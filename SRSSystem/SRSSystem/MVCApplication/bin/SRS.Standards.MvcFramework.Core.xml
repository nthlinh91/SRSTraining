<?xml version="1.0"?>
<doc>
<assembly>
<name>
SRS.Standards.MvcFramework.Core
</name>
</assembly>
<members>
<member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.BFile">
	<summary>Oracle BFILE型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.Blob">
	<summary>Oracle BLOB型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.Byte">
	<summary>byte型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.Char">
	<summary>Oracle CHAR型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.Clob">
	<summary>Oracle CLOB型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.Date">
	<summary>Oracle DATE型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.Decimal">
	<summary>Oracle NUMBER型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.Double">
	<summary>8バイトのFLOAT型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.Long">
	<summary>Oracle LONG型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.LongRaw">
	<summary>Oracle LONG RAW型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.Int16">
	<summary>2バイトのINTEGER型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.Int32">
	<summary>4バイトのINTEGER型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.Int64">
	<summary>8バイトのINTEGER型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.IntervalDS">
	<summary>Oracle INTERVAL DAY TO SECOND型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.IntervalYM">
	<summary>Oracle INTERVAL YEAR TO MONTH型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.NClob">
	<summary>Oracle NCLOB型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.NChar">
	<summary>Oracle NCHAR型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.NVarchar2">
	<summary>Oracle NVARCHAR2型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.Raw">
	<summary>Oracle RAW型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.RefCursor">
	<summary>Oracle REF CURSOR型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.Single">
	<summary>4バイトのFLOAT型、6精度をサポート</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.TimeStamp">
	<summary>Oracle TIMESTAMP型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.TimeStampLTZ">
	<summary>Oracle TIMESTAMP WITH LOCAL TIME ZONE型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.TimeStampTZ">
	<summary>Oracle TIMESTAMP WITH TIME ZONE型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.Varchar2">
	<summary>Oracle VARCHAR2型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.XmlType">
	<summary>Oracle XMLType型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.BinaryDouble">
	<summary>Oracle BINARY_DOUBLE型</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType.BinaryFloat">
	<summary>Oracle BINARY_FLOAT型</summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType">
	<summary>
 Oracle パラメータの型を指定する列挙体。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.NoCachedListKeyException.#ctor">
	<summary>
 コンストラクタ
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.NoCachedListKeyException.#ctor(System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="message">エラーメッセージ</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.NoCachedListKeyException.#ctor(System.String,System.Exception)">
	<summary>
 コンストラクタ
 </summary>
	<param name="message">エラーメッセージ</param>
	<param name="exception">例外オブジェクト</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.NoCachedListKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 コンストラクタ
 </summary>
	<param name="info">SerializationInfo</param>
	<param name="context">StreamingContext</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.NoCachedListKeyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 例外の情報をシリアライズします。
 </summary>
	<param name="info">SerializationInfo</param>
	<param name="context">StreamingContext</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.NoCachedListKeyException">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 キーを取得していないのにページ処理を行おうとした際の例外クラス
 </summary>
	<author>MASUDA Kazuya/SRS</author>
	<Version>
 001, 2015-09-07, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.FacadeException.#ctor">
	<summary>
 コンストラクタ
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.FacadeException.#ctor(System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="message">エラーメッセージ</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.FacadeException.#ctor(System.String,System.Exception)">
	<summary>
 コンストラクタ
 </summary>
	<param name="message">エラーメッセージ</param>
	<param name="inner">例外</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.FacadeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 コンストラクタ
 </summary>
	<param name="info">SerializationInfo</param>
	<param name="context">StreamingContext</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.Facade.FacadeException">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 ファサードの領域の例外クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.Http.WebHost.SessionHttpControllerRouteHandler.#ctor(System.Web.Http.HttpConfiguration)">
	<summary>
 コンストラクタ。
 </summary>
	<param name="config">HTTP設定</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Http.WebHost.SessionHttpControllerRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
	<summary>
 HTTPハンドラ取得処理
 </summary>
	<param name="requestContext">リクエストコンテキスト</param>
	<returns>HTTPハンドラ</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Http.WebHost.SessionHttpControllerRouteHandler">
	<summary>
 セッションをサポートするHTTPコントローラルートハンドラ
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Information.InformationManager.#ctor">
	<summary>
 ダミーコンストラクタ
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Information.InformationManager.SyncRoot">
	<summary>
 排他ロック制御用オブジェクト
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Information.InformationManager._initializedInfo">
	<summary>
 初期化判定用
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.InformationManager.UserInfo">
	<summary>
 ユーザ情報
 </summary>
	<returns>ユーザ情報</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.InformationManager.AppInfo">
	<summary>
 アプリケーション情報
 </summary>
	<returns>アプリケーション情報</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.InformationManager.TransferInfo">
	<summary>
 業務間連携情報
 </summary>
	<returns>業務間連携情報</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.InformationManager.BusinessInfo">
	<summary>
 業務共通情報
 </summary>
	<returns>業務共通情報</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.InformationManager.PreloadInfo">
	<summary>
 プレロード情報
 </summary>
	<returns>プレロード情報</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.InformationManager.ListKeyCacheData">
	<summary>
 一覧検索キャッシュ情報
 </summary>
	<returns>オブジェクトを返す</returns>
	<remarks>互換性のため、アクセスはBusinessInformationから行う</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Information.InformationManager.Initialize">
	<summary>
 初期化処理
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.Information.InformationManager">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 共通情報をグローバル（シングルトン)で共有する為のクラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="F:SRS.Standards.MvcFramework.Core.Logging.MethodTraceType.Begin">
	<summary>
 開始
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Logging.MethodTraceType.End">
	<summary>
 終了
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.Logging.MethodTraceType">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 メソッドの開始・終了を判別する為の列挙型
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.Logging.LogManager.#ctor">
	<summary>
 ダミーコンストラクタ
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Logging.LogManager.S_syncRoot">
	<summary>
 排他ロック制御用オブジェクト
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.LogManager.ExceptionLog">
	<summary>
 例外ログ
 </summary>
	<returns>例外ログ出力クラス</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.LogManager.SqlLog">
	<summary>
 SQL実行ログ
 </summary>
	<returns>SQL実行ログ出力クラス</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.LogManager.RequestLog">
	<summary>
 リクエストログ
 </summary>
	<returns>リクエストログ出力クラス</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.LogManager.SysTraceLog">
	<summary>
 システムトレースログ
 </summary>
	<returns>システムトレースログ出力クラス</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.LogManager.UserFacadeTraceLog">
	<summary>
 ユーザ(Facade)トレースログ
 </summary>
	<returns>ユーザ(Facade)トレースログ出力クラス</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.LogManager.UserRuleTraceLog">
	<summary>
 ユーザ(Rule)トレースログ
 </summary>
	<returns>ユーザ(Rule)トレースログ出力クラス</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.LogManager.AuthLog">
	<summary>
 認証ログ
 </summary>
	<returns>認証ログ出力クラス</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.LogManager.SecurityLog">
	<summary>
 業務セキュリティログ
 </summary>
	<returns>業務セキュリティログ出力クラス</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.LogManager.BusinessLog">
	<summary>
 業務ログ
 </summary>
	<returns>業務ログ出力クラス</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Logging.LogManager.Initialize``1">
	<summary>
 初期化処理
 </summary>
	<typeparam name="T">ログ出力クラスの型</typeparam>
	<returns>ログ出力クラス</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Logging.LogManager">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 ログ出力クラス管理様クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.ControllerBase`2.#ctor">
	<summary>
 コンストラクタ
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ControllerBase`2.Facade">
	<summary>
 業務ファサード
 </summary>
	<returns>業務ファサード</returns>
	<remarks>業務ファサードのメソッドを実行する場合に使用</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.ControllerBase`2.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
	<summary>
 認証フィルター制御処理
 </summary>
	<param name="filterContext">フィルター コンテキスト</param>
	<remarks>認証が必要な場合で、認証されていない場合はログを出力</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.ControllerBase`2.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
	<summary>
 アクション メソッドの実行前イベント
 </summary>
	<param name="filterContext">フィルター コンテキスト</param>
	<remarks>前処理を実施</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.ControllerBase`2.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
	<summary>
 アクション メソッドの実行後イベント
 </summary>
	<param name="filterContext">フィルター コンテキスト</param>
	<remarks>後処理を実施</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.ControllerBase`2.JudgeTrans(SRS.Standards.MvcFramework.Core.Facade.IViewModel)">
	<summary>
 遷移先を判定し、結果のActionResultを返す
 </summary>
	<param name="model">モデル</param>
	<returns>ActionResult</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.ControllerBase`2.SetCulture(System.String)">
	<summary>
 表示言語を設定する
 </summary>
	<param name="cultureInfoName">表示言語文字列</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.ControllerBase`2.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
	<summary>
 結果データ作成後処理
 </summary>
	<param name="filterContext">フィルターコンテキスト</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.ControllerBase`2.Login(SRS.Standards.MvcFramework.Core.Security.AuthenticationModel)">
	<summary>
 ログイン処理を実行する
 </summary>
	<param name="model">認証用モデル</param>
	<returns>ActionResult</returns>
	<remarks>ログイン成功時、Form認証チケットを発行する</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.ControllerBase`2.Logout">
	<summary>
 ログアウト処理を実行する
 </summary>
	<remarks>Form認証チケットを削除する</remarks>
</member><member name="T:SRS.Standards.MvcFramework.Core.MVC.ControllerBase`2">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 コントローラの基底クラス
 </summary>
	<typeparam name="TFacade">このコントローラに紐づけられる業務ファサードの型</typeparam>
	<typeparam name="TModel">このコントローラに紐づけられる業務モデルの型</typeparam>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewModelBase.FuncName">
	<summary>
 画面に表示する機能名
 </summary>
	<returns>機能名</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewModelBase.WindowTitle">
	<summary>
 ブラウザのタブに表示される文言を設定
 </summary>
	<returns>タブタイトル</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewModelBase.Message">
	<summary>
 フッタのメッセージ領域に表示する文言を設定
 </summary>
	<returns>表示文言</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewModelBase.ValidLevel">
	<summary>
 検証結果レベル
 </summary>
	<returns>検証結果レベル</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewModelBase.ValidateMembers">
	<summary>
 エラー発生メンバ(プロパティ)
 </summary>
	<returns>エラー発生メンバ</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewModelBase.DownloadFilePath">
	<summary>
 ダウンロードファイル物理パス
 </summary>
	<returns>物理パス</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewModelBase.ContentType">
	<summary>
 ダウンロードファイルのContentType
 </summary>
	<returns>ContentType</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewModelBase.RedirectName">
	<summary>
 遷移先を指定
 </summary>
	<returns>遷移先</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewModelBase.JudgeTrans">
	<summary>
 画面遷移判定
 </summary>
	<returns>遷移判定値</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewModelBase.MessageParams">
	<summary>
 メッセージ置換項目
 </summary>
	<returns>置換項目の文字列配列</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewModelBase.ViewMode">
	<summary>
 画面モード
 </summary>
	<returns>画面モード値</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewModelBase.RowId">
	<summary>
 行ID
 </summary>
	<remarks>
 一覧要素の場合、結果をソートするキーにも使用されます。
 複数テーブルを含む場合は、実装モデル側で行ID保持プロパティを増やす必要があります。
 </remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewModelBase.Revision">
	<summary>
 リビジョン
 </summary>
	<remarks>複数テーブルを含む場合は、実装モデル側でリビジョン保持プロパティを増やす必要があります。</remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewModelBase.LoginUserId">
	<summary>
 システムのユーザ情報から、ログインユーザIDを取得します。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewModelBase.LoginUserName">
	<summary>
 システムのユーザ情報から、ログインユーザ名を取得します。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewModelBase.LoginBusinessIdentityId">
	<summary>
 システムのユーザ情報から、業務識別IDを取得します。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewModelBase.CurrentMenuId">
	<summary>
 現在実行中の機能のメニューIDを取得します。取得できない場合、<c>Nothing</c> を返します。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewModelBase.Today">
	<summary>
 実行サーバにおける日付を取得します。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewModelBase.Now">
	<summary>
 実行サーバにおける現在日時を取得します。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.MVC.ViewModelBase">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 画面モデルの基底クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.ResourceManager">
	<summary>
  このクラスで使用されているキャッシュされた ResourceManager インスタンスを返します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.Culture">
	<summary>
  厳密に型指定されたこのリソース クラスを使用して、すべての検索リソースに対し、
  現在のスレッドの CurrentUICulture プロパティをオーバーライドします。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.CannotConvertType">
	<summary>
  指定の値（{0}）を型（{1}）に変換できません。 に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.ConfigurationSectionNotFound">
	<summary>
  構成セクションが設定されていません。（{0}） に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.DialogFormAndDialogFormTypeNotSet">
	<summary>
  DialogFormとDialogFormTypeプロパティの両方が設定されていません。 に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.HttpContextNotAvailable">
	<summary>
  現在のHttpContextが使用できません。ASP.NET環境でのみ使用可能な機能を使っていないか、使っている場合は正しくASP.NET環境で使用しているかを確認してください。 に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.HttpSessionNotAvailable">
	<summary>
  現在のHTTPリクエストでセッションが使用できません。セッションがサポートされている環境でのみ使用可能な機能を使っていないか、使っている場合は現在のリクエストでセッションがサポートされていることを確認してください。 に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.InstanceAlreadyCreatedAndTypeNameNotSet">
	<summary>
  インスタンスが作成済みのため、インスタンスの型名を設定することができません。インスタンスの型名は、インスタンスを作成する前に設定してください。 に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.LocalServiceTypeCannnotInstancing">
	<summary>
  サービスの型がインターフェイスか抽象クラスのため、インスタンスを作成できません。TypeNameプロパティにインスタンスを作成できる型を指定してください。（{0}） に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.LocalServiceTypeNameTypeCannnotInstancing">
	<summary>
  作成するインスタンスの型がインターフェイスか抽象クラスのため、インスタンスを作成できません。TypeNameプロパティに、インスタンスを作成できる型が設定されているか確認してください。（TypeName設定：{0}, 実際の型：{1}） に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.LocalServiceTypeNameTypeInvalid">
	<summary>
  作成するインスタンスの型が、サービスのインターフェイスと互換性のある型ではありません。TypeNameプロパティが正しく設定されているか確認してください。（TypeName設定：{0}, 実際の型：{1}） に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.LocalServiceTypeNameTypeNotFound">
	<summary>
  作成するインスタンスの型が見つかりません。TypeNameプロパティに正しい型が設定されているか確認してください。（TypeName設定：{0}, 置換後の実効型名：{1}） に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.MessageDataConfigSectionInvalid">
	<summary>
  指定されたメッセージデータ用構成セクションは、NameValueCollectionまたはIDictionaryを返す構成セクションではありません。（セクション名：{0}, セクションの型：{1}） に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.MessageDataConfigSectionNotFound">
	<summary>
  指定されたメッセージデータ用構成セクションが見つかりません。（{0}） に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.MessageNotFound">
	<summary>
  指定されたメッセージID（{0}）に対応するメッセージが見つかりません（パラメータ：{1}）。 に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.MessageRetrieveFailed">
	<summary>
  メッセージ取得に失敗しました（メッセージID：{0} パラメータ：{1}）。 に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.MessageSectionPropertyNotSet">
	<summary>
  MessageSectionプロパティが設定されていません。 に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.MessageSourceInitializationError">
	<summary>
  メッセージソースの初期化でエラーが発生しました。対象メッセージソースの構成情報等に問題がないか確認してください。（{0}） に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.MutexCannotCreated">
	<summary>
  Mutexの作成に失敗しましたため、プロセス間の排他制御を行わずに出力します。（{0}） に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.NotMarshalByRefObject">
	<summary>
  MarshalByRefObjectに変換できません。 に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.ObjectPoolNameOrTypeInvalid">
	<summary>
  指定されたオブジェクトプール名は、PoolName値ではなく、有効な型名でもありません。 に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.ObjectPoolTypeInvalid">
	<summary>
  指定された型はIScopeBoundObjectPoolを実装していません。 に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.ParentPropertyIsNull">
	<summary>
  親であるプロパティがnull参照のため、指定された名前のプロパティを設定することはできません。（{0}） に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.ParentPropertyIsNullAndReadOnly">
	<summary>
  親であるプロパティがnull参照かつ読み取り専用のため、指定された名前のプロパティを設定することはできません。（{0}） に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.ParentPropertyIsValueType">
	<summary>
  親であるプロパティが値型のため、指定された名前のプロパティを設定することはできません。（{0}） に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.ParentPropertyNotFound">
	<summary>
  親であるプロパティが見つからないため、指定された名前のプロパティを設定することはできません。（{0}） に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.PropertyConfigurationError">
	<summary>
  コンポーネントのプロパティ設定でエラーが発生しました。構成ファイルのプロパティ設定に問題がないか確認してください。（{0}） に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.PropertyIsReadOnly">
	<summary>
  プロパティが読み取り専用のため、指定された名前のプロパティを設定することはできません。（{0}） に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.PropertyNotFound">
	<summary>
  指定された名前のプロパティが見つかりません。（{0}） に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.PropertyNotSet">
	<summary>
  プロパティが設定されていません。（{0}） に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.PropertyValueCannotConvert">
	<summary>
  指定の値（{0}）を設定先プロパティの型（{1}）に変換できないため、指定された名前のプロパティを設定することはできません。（{2}） に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.PropertyValueCannotSet">
	<summary>
  指定値または型変換後の値（{0}）を、プロパティに設定できません。（{1}） に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.ResourceNameInvalid">
	<summary>
  リソース名の指定が不正です。「リソースのベース名, アセンブリ名」で指定してください。 に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.ServiceInitializationError">
	<summary>
  構成ファイルによるサービス情報の初期化でエラーが発生しました。（{0} {1}） に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.ServiceProxyInitializationError">
	<summary>
  サービスプロキシの初期化でエラーが発生しました。対象サービスの登録情報等に問題がないか確認してください。（サービス型：{0}, 登録サービス型：{1}, サービスプロキシ名：{2}, サービスプロキシ型：{3}） に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.ServiceProxyNotRegistered">
	<summary>
  指定された名前のサービスプロキシは登録されていません。 に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.ServiceProxyTypeInvalid">
	<summary>
  サービスプロキシの型がServiceProxyBaseの派生クラスではありません。 に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.ServiceTypeNotRegistered">
	<summary>
  指定の型に対応するサービス情報は登録されていません。 に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.TimeStampFlushError">
	<summary>
  取得済みタイムスタンプデータのフラッシュでエラーが発生しました。
{0} に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource.WebClientProxyTypeInvalid">
	<summary>
  サービスの型または、明示的に指定している場合はサービスクライアントプロキシの型が、SoapHttpClientProtocolまたはHttpPostClientProtocolまたはHttpGetClientProtocolの、いずれかの派生クラスではありません。TypeNameプロパティと、Urlプロパティの一部の、
両方を設定している場合は、TypeNameが先に設定されていることを確認してください。（{0}） に類似しているローカライズされた文字列を検索します。
</summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.My.Resources.FrameworkResource">
	<summary>
  ローカライズされた文字列などを検索するための、厳密に型指定されたリソース クラスです。
</summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.DataFormatting.Trim(System.Data.DataTable,System.Int32)">
	<summary>
		<see cref="T:System.Data.DataTable"/> 中の、指定した列にある文字列データの先頭・末尾空白を削除します。
 文字列でないデータに対しては、何も変更しません。
 </summary>
	<param name="target">処理対象の <see cref="T:System.Data.DataTable"/> 。</param>
	<param name="columnIndex">処理対象の列番号。</param>
	<returns>処理した <see cref="T:System.Data.DataTable"/> 自身。</returns>
	<exception cref="T:System.IndexOutOfRangeException">指定した列が見つかりません。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.DataFormatting.Trim(System.Data.DataTable,System.String)">
	<summary>
		<see cref="T:System.Data.DataTable"/> 中の、指定した列にある文字列データの先頭・末尾空白を削除します。
 文字列でないデータに対しては、何も変更しません。
 </summary>
	<param name="target">処理対象の <see cref="T:System.Data.DataTable"/> 。</param>
	<param name="columnName">処理対象の列名。</param>
	<returns>処理した <see cref="T:System.Data.DataTable"/> 自身。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.DataFormatting.Trim(System.Data.DataTable)">
	<summary>
		<see cref="T:System.Data.DataTable"/> 中の、全文字列データの先頭・末尾空白を削除します。
 文字列でないデータに対しては、何も変更しません。
 </summary>
	<param name="target">処理対象の <see cref="T:System.Data.DataTable"/> 。</param>
	<returns>処理対象の <see cref="T:System.Data.DataTable"/> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.DataFormatting.Trim(System.Data.DataSet)">
	<summary>
		<see cref="T:System.Data.DataSet"/> 中の、全文字列データの先頭・末尾空白を削除します。
 文字列でないデータに対しては、何も変更しません。
 </summary>
	<param name="target">処理対象の <see cref="T:System.Data.DataSet"/> 。</param>
	<returns>処理対象の <see cref="T:System.Data.DataSet"/> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.DataFormatting.DBNullToZero(System.Object)">
	<summary>
		<c>Nothing</c> 及び <see cref="T:System.DBNull"/> を <c>0</c> に変換します。
 </summary>
	<param name="target">処理対象のオブジェクト。</param>
	<returns>可能な限り <see cref="T:System.Double"/> に変換を試み、不可能な場合は <c>0.0</c> を返します。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.DataFormatting.DBNullToEmptyString(System.Object)">
	<summary>
		<c>Nothing</c> 及び <see cref="T:System.DBNull"/> を <see cref="T:System.String"/> に変換します。
 </summary>
	<param name="target">処理対象のオブジェクト。</param>
	<returns>可能な限り <see cref="T:System.String"/> に変換を試み、不可能な場合は <c>String.Empty</c> を返します。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.DataFormatting.DBNullToZeroOrEmpty(System.Data.DataTable,System.Int32)">
	<summary>
		<see cref="T:System.Data.DataTable"/> 中の、指定した列にあるデータについて、
 <c>Nothing</c> 及び <see cref="T:System.DBNull"/> を列の型に応じて、<c>0</c> または <see cref="T:System.String"/> に変換します。
 </summary>
	<param name="target">処理対象の <see cref="T:System.Data.DataTable"/> 。</param>
	<param name="columnIndex">処理対象の列番号。</param>
	<returns>処理した <see cref="T:System.Data.DataTable"/> 自身。</returns>
	<exception cref="T:System.IndexOutOfRangeException">指定した列が見つかりません。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.DataFormatting.DBNullToZeroOrEmpty(System.Data.DataTable,System.String)">
	<summary>
		<see cref="T:System.Data.DataTable"/> 中の、指定した列にあるデータについて、
 <c>Nothing</c> 及び <see cref="T:System.DBNull"/> を列の型に応じて、<c>0</c> または <see cref="T:System.String"/> に変換します。
 </summary>
	<param name="target">処理対象の <see cref="T:System.Data.DataTable"/> 。</param>
	<param name="columnName">処理対象の列名。</param>
	<returns>処理した <see cref="T:System.Data.DataTable"/> 自身。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.DataFormatting.DBNullToZeroOrEmpty(System.Data.DataTable)">
	<summary>
		<see cref="T:System.Data.DataTable"/> 中の全てのデータについて、
 <c>Nothing</c> 及び <see cref="T:System.DBNull"/> を列の型に応じて、<c>0</c> または <see cref="T:System.String"/> に変換します。
 </summary>
	<param name="target">処理対象の <see cref="T:System.Data.DataTable"/> 。</param>
	<returns>処理した列。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.DataFormatting.DBNullToZeroOrEmpty(System.Data.DataSet)">
	<summary>
		<see cref="T:System.Data.DataSet"/> 中の全てのデータについて、
 <c>Nothing</c> 及び <see cref="T:System.DBNull"/> を列の型に応じて、<c>0</c> または <see cref="T:System.String"/> に変換します。
 </summary>
	<param name="target">処理対象の <see cref="T:System.Data.DataSet"/> 。</param>
	<returns>処理した列。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.DataFormatting.DBNullToNullable``1(System.Object)">
	<summary>
		<c>Nothing</c> 及び <see cref="T:System.DBNull"/> を Nullable型 に変換します。
 </summary>
	<typeparam name="T">実データの型。</typeparam>
	<param name="target">処理対象のオブジェクト。</param>
	<returns>可能な限り <see cref="T:System.Nullable`1"/> に変換を試み、不可能な場合は <c>Nothing</c> を返します。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.DataFormatting.IsStringType(System.Type)">
	<summary>
 与えられた型が、文字型かどうかを返します。
 </summary>
	<param name="type">検証する型。</param>
	<returns>文字型の場合 <c>True</c>、そうでないとき <c>False</c> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.DataFormatting.IsNumberType(System.Type)">
	<summary>
 与えられた型が、数値型かどうかを返します。
 </summary>
	<param name="type">検証する型。</param>
	<returns>数値型の場合 <c>True</c>、そうでないとき <c>False</c> 。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Utilities.DataFormatting">
	<summary>
 DB取得値の変換:末尾空白のトリムや、DBNullの変換等の機能を提供します。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceManager.ResourceExtensionField">
	<summary>
 外部リソースファイルの拡張子。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceManager.fileResourceSet">
	<summary>
 内部リソース保持用の構造。
 </summary>
	<remarks>ResourceSetsを直接扱うのは旧形式となったので、独自に保持する</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceManager.#ctor(System.String,System.String)">
	<summary>
 コンストラクタ。
 baseName と 言語カルチャ名、extension を結合したものが実際に開くファイル名となります。
 </summary>
	<param name="baseName">開くファイル名の基準となるパス名。 </param>
	<param name="extension">開くファイル名の拡張子。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceManager.#ctor(System.String,System.String,System.Globalization.CultureInfo)">
	<summary>
 コンストラクタ。
 baseName と 言語カルチャ名、extension を結合したものが実際に開くファイル名となります。
 </summary>
	<param name="baseName">開くファイル名の基準となるパス名。 </param>
	<param name="extension">開くファイル名の拡張子。</param>
	<param name="cultureInfo">
		<see cref="T:System.Globalization.CultureInfo"/> 。指定しない場合、現在の UICulture が適用されます。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceManager.GetResourceFileName(System.Globalization.CultureInfo)">
	<summary>
 指定した <see cref="T:System.Globalization.CultureInfo"/> のリソースファイルの名前を生成します。
 </summary>
	<param name="culture">指定する <see cref="T:System.Globalization.CultureInfo"/> 値。</param>
	<returns>リソースファイル名。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceManager.GetFactoryResourceFileName(System.Globalization.CultureInfo)">
	<summary>
 指定した <see cref="T:System.Globalization.CultureInfo"/> のリソースファイルの名前を生成します。
 </summary>
	<param name="culture">指定する <see cref="T:System.Globalization.CultureInfo"/> 値。</param>
	<returns>リソースファイル名。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceManager.GetResourceReader">
	<summary>
 外部形式ファイルを読み込むための <see cref="T:System.Resources.ResourceReader"/> のインスタンスを生成する。
 </summary>
	<returns>対応する <see cref="T:System.Resources.ResourceReader"/> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
	<summary>
 外部形式ファイルからリソースを読み出す。
 </summary>
	<param name="culture">検索対象の <see cref="T:System.Globalization.CultureInfo"/> 。</param>
	<param name="createIfNotExists">true の場合、<see cref="T:System.Resources.ResourceSet"/> がまだ読込まれていなければ、読込みます。</param>
	<param name="tryParents"><see cref="T:System.Resources.ResourceSet"/>が読込めないとき、親 <see cref="T:System.Globalization.CultureInfo"/> が存在するかどうか調べます。</param>
	<returns>
		<see cref="T:System.Resources.ResourceSet"/> 値。読込めない場合は、<c>Nothing</c> を返す。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceManager.InitializeResource(SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceReader,System.Globalization.CultureInfo)">
	<summary>
 指定した <see cref="T:System.Globalization.CultureInfo"/> の外部リソース読込みを試みます。
 </summary>
	<param name="resourceReader">使用する <see cref="T:SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceReader"/> 。</param>
	<param name="culture">初期化を試みる <see cref="T:System.Globalization.CultureInfo"/> 。</param>
	<returns>読込みに成功した場合 <c>True</c> 、失敗した場合 <c>False</c> を返します。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
	<summary>
 リソースを読込む内部処理を実行します。
 </summary>
	<param name="culture">読み込むカルチャ。</param>
	<param name="createIfNotExists">読込まれていない場合に、新たに読み込む。</param>
	<param name="tryParents">読込に失敗した場合、親カルチャを試す場合 <c>True</c> を指定します。</param>
	<returns>指定したカルチャのリソースセット。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceManager.GetString(System.String)">
	<summary>
 指定されている <see cref="T:System.String"/> リソースの値を取得します。
 </summary>
	<param name="name">取得するリソースの名前。</param>
	<returns>指定されている <see cref="T:System.String"/> リソースの値。見付からない場合は空文字列を返します。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
	<summary>
 指定されている <see cref="T:System.String"/> リソースの値を取得します。
 </summary>
	<param name="name">取得するリソースの名前。</param>
	<param name="culture">取得するカルチャ。</param>
	<returns>指定されている <see cref="T:System.String"/> リソースの値。見付からない場合は空文字列を返します。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceManager.ReleaseAllResources">
	<summary>
 すべての ResourceSet オブジェクトの Close メソッドを呼び出し、すべてのリソースを解放するように指示します。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceManager">
	<summary>
 外部形式のリソースを読み込むための基底 <see cref="T:System.Resources.ResourceManager"/> 。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionProxyAttribute.CreateInstance(System.Type)">
	<summary>
 この属性が適用された <see cref="T:System.ContextBoundObject"/> 派生クラスが
 インスタンスが作成された際に、<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionProxy"/> を
 割り込ませます。
 </summary>
	<param name="serverType">インスタンスを作成するオブジェクト型。</param>
	<returns><see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionProxy"/> の透過プロキシ。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionProxyAttribute">
	<summary>
 割り込み処理を有効にするための、<see cref="T:System.Runtime.Remoting.Proxies.ProxyAttribute"/> 派生クラスです。
 インスタンスが作成される際に、<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionProxy"/> クラスを、
 実プロキシとして割り込ませます。
 </summary>
	<remarks>
		<para>この属性を適用するクラスは、<see cref="T:System.ContextBoundObject"/> を継承し、
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.IInterceptable"/> インターフェイスを実装している必要があります。</para>
	</remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.IEntity.TargetProperties">
	<summary>
 クエリ生成の対象とする列名のリスト。値を代入した際に追加されることを想定しています。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.IEntity">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 テーブルエンティティインターフェイス。
 </summary>
	<author>MASUDA Kazuya/SRS TS</author>
	<Version>
 001, 2015-08-05, 新規作成
 </Version>
	<remarks>公開用のインターフェイス。実体は <see cref="T:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1"/> に実装。利便性のためにあえてインターフェイスとする。</remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.IViewModel.FuncName">
	<summary>
 画面に表示する機能名
 </summary>
	<returns>機能名</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.IViewModel.WindowTitle">
	<summary>
 ブラウザのタブに表示される文言を設定
 </summary>
	<returns>タブタイトル</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.IViewModel.ValidLevel">
	<summary>
 検証結果レベル
 </summary>
	<returns>検証結果レベル</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.IViewModel.Message">
	<summary>
 メッセージ
 </summary>
	<returns>画面に表示するメッセージ</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.IViewModel.MessageParams">
	<summary>
 メッセージ引数
 </summary>
	<returns>メッセージ出力時置換対象となる文字列の配列</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.IViewModel.ValidateMembers">
	<summary>
 チェックエラー対象
 </summary>
	<returns>チェックエラーとなったモデル情報の配列</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.IViewModel.JudgeTrans">
	<summary>
 遷移判定
 </summary>
	<returns>遷移判定</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.IViewModel.DownloadFilePath">
	<summary>
 ダウンロードファイル物理パス
 </summary>
	<returns>物理パス</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.IViewModel.ContentType">
	<summary>
 ダウンロードファイルのContentType
 </summary>
	<returns>ContentType</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.IViewModel.RedirectName">
	<summary>
 遷移先を指定
 </summary>
	<returns>遷移先</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.IViewModel.ViewMode">
	<summary>
 画面モード
 </summary>
	<returns>画面モード値</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Facade.IViewModel">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 業務処理用メンバインタフェース
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.TransactionScopeAttribute.#ctor">
	<summary>
 特定のオプションを指定せずに新しいインスタンスを初期化します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.TransactionScopeAttribute.#ctor(System.Transactions.TransactionScopeOption)">
	<summary>
 トランザクションスコープのスコープオプションを指定して、
 新しいインスタンスを初期化します。
 </summary>
	<param name="scope">トランザクションスコープのオプションを指定する値</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.TransactionScopeAttribute.#ctor(System.Transactions.IsolationLevel)">
	<summary>
 トランザクションの分離レベルを指定して、新しいインスタンスを初期化します。
 </summary>
	<param name="isolationLevel">トランザクションの分離レベルを指定する値</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.TransactionScopeAttribute.#ctor(System.TimeSpan)">
	<summary>
 トランザクションのタイムアウトを指定して、
 クラスの新しいインスタンスを初期化します。
 </summary>
	<param name="timeout">トランザクションのタイムアウトを指定する値</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.TransactionScopeAttribute.#ctor(System.Int32)">
	<summary>
 トランザクションのタイムアウトを指定して、
 クラスの新しいインスタンスを初期化します。
 </summary>
	<param name="timeoutSeconds">トランザクションのタイムアウト(秒)を指定する値</param>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.TransactionScopeAttribute.HasIsolationLevel">
	<summary>
 オプションが指定されているかを示す値を取得します。
 </summary>
	<returns>オプションが指定されているかを示す値。</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.TransactionScopeAttribute.HasTimeout">
	<summary>
 オプションが指定されているかを示す値を取得します
 </summary>
	<returns>オプションが指定されているかを示す値</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.TransactionScopeAttribute.Enabled">
	<summary>
 トランザクションスコープの管理が有効になっているかどうかを示す値を取得します
 </summary>
	<returns>トランザクションスコープの管理が有効になっているかどうかを示す値</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.TransactionScopeAttribute.Scope">
	<summary>
 トランザクションスコープのスコープオプションを示す値を取得または設定します
 </summary>
	<returns>トランザクションスコープのスコープオプションを示す値</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.TransactionScopeAttribute.Timeout">
	<summary>
 トランザクションのタイムアウト時間を示す値を取得します。
 タイムアウト時間が未設定の場合は、既定値が使用されます。
 </summary>
	<returns>トランザクションのタイムアウト時間を示す値。</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.TransactionScopeAttribute.AutoIsolation">
	<summary>
 自動的な分離レベル設定が有効になっているどうかを示す値を取得または設定します。
 このオプションが有効になっている場合、現在のトランザクションに参加する際に、
 分離レベルが現在のトランザクションに合わせて設定されます。
 現在のトランザクションが存在しない場合は、Scopeオプションの
 指定にしたがいます。
 </summary>
	<returns>自動的な分離レベル設定が有効になっているどうかを示す値。</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.TransactionScopeAttribute.IsolationLevel">
	<summary>
 トランザクションの分離レベルを指定する値を取得または設定します。
 分離レベルが未設定の場合は、既定値が使用されます。
 </summary>
	<value></value>
	<returns></returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.TransactionScopeAttribute.Overlay(SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionOptionAttributeBase)">
	<summary>
 現在のインスタンスの各オプション値に指定された
 オプション値を上書きします。設定されていないオプション値は上書きされません。
 </summary>
	<param name="overlayAttr">上書きする設定内容。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.TransactionScopeAttribute.GetEffective(System.Type,System.Reflection.MethodBase)">
	<summary>
 指定された型とメソッドに適用されているオプションの属性から、実際に有効になる
 オプション情報を取得します。
 </summary>
	<param name="type">オプション値を取得する対象の型。</param>
	<param name="method">オプション値を取得する対象のメソッド。</param>
	<returns>実際に有効となるオプション情報。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Facade.TransactionScopeAttribute">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 ファサードクラスまたはそのメソッドにおける、トランザクションスコープに関する
 オプションを指定する属性
 </summary>
	<remarks>OMEのソースをそのまま使用</remarks>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="F:SRS.Standards.MvcFramework.Core.Globalization.EastAsianWidth.Wide">
	<summary>W:Fullwidth 以外で全角に該当する文字。</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Globalization.EastAsianWidth.Ambiguous">
	<summary>A:曖昧。文脈次第で全角・半角か取扱いが変わる。</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Globalization.EastAsianWidth.Halfwidth">
	<summary>H:半角に該当する文字。文字の名前に”HALFWIDTH”と付く。</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Globalization.EastAsianWidth.Fullwidth">
	<summary>F:全角に該当する文字。文字の名前に”FULLWIDTH”と付く。</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Globalization.EastAsianWidth.Narrow">
	<summary>Na:Halfwidth 以外で半角に該当し、対応する全角文字が存在する文字。</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Globalization.EastAsianWidth.Neutral">
	<summary>N:中立。そもそも東アジア圏に存在しない文字。</summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.Globalization.EastAsianWidth">
	<summary>
 Unicode の East Asian Width 値を表す列挙体。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.ApplicationInformation.SystemName">
	<summary>
 システム名
 </summary>
	<returns>システム名</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.ApplicationInformation.URL">
	<summary>
 ＵＲＬ
 </summary>
	<returns>ＵＲＬ</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.ApplicationInformation.MenuId">
	<summary>
 メニューＩＤ
 </summary>
	<returns>メニューＩＤ</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.ApplicationInformation.ControllerName">
	<summary>
 コントローラ名
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.ApplicationInformation.CanInsert">
	<summary>
 登録可否
 </summary>
	<returns>登録可否判定値</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.ApplicationInformation.CanUpdate">
	<summary>
 更新可否
 </summary>
	<returns>更新可否判定値</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.ApplicationInformation.CanDelete">
	<summary>
 削除可否
 </summary>
	<returns>削除可否判定値</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.ApplicationInformation.CanSearch">
	<summary>
 検索可否
 </summary>
	<returns>検索可否判定値</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.ApplicationInformation.ConnectionString">
	<summary>
 データベース接続文字列
 </summary>
	<returns>データベース接続文字列</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.ApplicationInformation.GetParameters">
	<summary>
 GETパラメータ
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.ApplicationInformation.DbKind">
	<summary>
 データベースの種類を接続文字列から判定します。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.Information.ApplicationInformation">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 アプリケーション情報格納クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.InternalTrace.#ctor">
	<summary>
 ダミーコンストラクタ
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.InternalTrace.SourceName">
	<summary>
 フレームワークのログ出力用の、<see cref="T:System.Diagnostics.TraceSource"/> で使用される
 ソース名を取得または設定します。このプロパティ値は、各スレッド用の
 <see cref="T:System.Diagnostics.TraceSource"/> を新規作成する際に使用されます。
 既に作成済みのインスタンスには影響しません。
 </summary>
	<value><see cref="T:System.Diagnostics.TraceSource"/> で使用されるソース名。</value>
	<remarks>
		<para>フレームワークのログソース名を変更したい場合は、
 アプリケーション開始時にこのプロパティを設定するようにします。
 通常はこのプロパティを使用する必要はありません。</para>
	</remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.InternalTrace.Source">
	<summary>
 フレームワークのログ出力用の <see cref="T:System.Diagnostics.TraceSource"/> を取得します。
 取得される <see cref="T:System.Diagnostics.TraceSource"/> は、スレッド毎に独立したインスタンスになります。
 </summary>
	<value>フレームワークのログ出力用の <see cref="T:System.Diagnostics.TraceSource"/>。</value>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.InternalTrace">
	<summary>
 フレームワークの内部ログ出力用のユーティリティクラスです。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.ObjectPoolName.None">
	<summary>
 プールが存在しないことを指定します。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.ObjectPoolName.Singleton">
	<summary>
 単一インスタンスのスコープを使用するプールを指定します。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.ObjectPoolName.CallContext">
	<summary>
		<see cref="T:System.Runtime.Remoting.Messaging.CallContext"/>
 のスコープを使用するプールを指定します。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.ObjectPoolName.Session">
	<summary>
 ASP.NET環境におけるセッション単位のスコープを使用するプールを指定します。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.ObjectPoolName.Request">
	<summary>
 ASP.NET環境におけるリクエスト単位のスコープを使用するプールを指定します。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.ObjectPoolName">
	<summary>
 既定で使用できるオブジェクトプール名を指定する列挙値です。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.TargetProperties">
	<summary>
 クエリ生成の対象とする列名のリスト。値を代入した際に追加されることを想定しています。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.Select(`0)">
	<summary>
 検索条件を指定してデータを取得します。
 </summary>
	<param name="param">検索条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>取得したデータ。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.Select(`0,SRS.Standards.MvcFramework.Core.DataAccess.IPaging,System.String)">
	<summary>
 検索条件を指定してデータをページングしながら取得します。
 </summary>
	<param name="param">検索条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<param name="viewModel">ページング画面モデル。</param>
	<param name="orderBy">ORDER BY 句。</param>
	<returns>取得したデータ。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.Select">
	<summary>
 データを全て取得します。
 </summary>
	<returns>取得したデータ。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.Count(`0)">
	<summary>
 条件を指定してデータ件数を取得します。
 </summary>
	<param name="param">検索条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>データ件数。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.Count">
	<summary>
 データ件数を取得します。
 </summary>
	<returns>データ件数。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.Exists(`0)">
	<summary>
 条件に合致するデータが存在するか判定します。
 </summary>
	<param name="param">検索条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>存在する場合 <c>True</c>、存在しない場合 <c>False</c>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.Exists">
	<summary>
 データが存在するか判定します。
 </summary>
	<returns>存在する場合 <c>True</c>、存在しない場合 <c>False</c>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.Insert(System.Collections.Generic.IEnumerable{`0})">
	<summary>
 データを登録します。
 </summary>
	<param name="data">挿入するデータ。</param>
	<returns>登録件数。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.Insert(`0)">
	<summary>
 データを登録します。
 </summary>
	<param name="data">挿入するデータ。</param>
	<returns>登録件数。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.Update(`0,`0)">
	<summary>
 条件を指定してデータを更新します。
 </summary>
	<param name="data">更新条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<param name="param">検索条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>更新件数。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.Update(`0)">
	<summary>
 主キーを更新条件として指定してデータを更新します。
 </summary>
	<param name="data">更新条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>更新件数。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.Update(System.Collections.Generic.IEnumerable{`0})">
	<summary>
 主キーを更新条件として指定してデータを更新します。
 </summary>
	<param name="data">更新条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>更新件数。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.Delete(`0)">
	<summary>
 条件を指定してデータを削除します。
 </summary>
	<param name="param">検索条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>削除件数。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.Delete(System.Collections.Generic.IEnumerable{`0})">
	<summary>
 条件を指定してデータを削除します。
 </summary>
	<param name="param">検索条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>削除件数。</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.FuncName">
	<summary>
 画面に表示する機能名
 </summary>
	<returns>機能名</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.WindowTitle">
	<summary>
 ブラウザのタブに表示される文言を設定
 </summary>
	<returns>タブタイトル</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.Message">
	<summary>
 フッタのメッセージ領域に表示する文言を設定
 </summary>
	<returns>表示文言</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.ValidLevel">
	<summary>
 検証結果レベル
 </summary>
	<returns>検証結果レベル</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.ValidateMembers">
	<summary>
 エラー発生メンバ(プロパティ)
 </summary>
	<returns>エラー発生メンバ</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.DownloadFilePath">
	<summary>
 ダウンロードファイル物理パス
 </summary>
	<returns>物理パス</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.ContentType">
	<summary>
 ダウンロードファイルのContentType
 </summary>
	<returns>ContentType</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.RedirectName">
	<summary>
 遷移先を指定
 </summary>
	<returns>遷移先</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.JudgeTrans">
	<summary>
 画面遷移判定
 </summary>
	<returns>遷移判定値</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.MessageParams">
	<summary>
 メッセージ置換項目
 </summary>
	<returns>置換項目の文字列配列</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1.ViewMode">
	<summary>
 画面モード
 </summary>
	<returns>画面モード値</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.EntityBase`1">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 テーブルエンティティ基底クラス。
 DBテーブルに対する基本的な操作(検索、挿入、更新、削除)をサポートするクラスです。
 </summary>
	<author>MASUDA Kazuya/SRS TS</author>
	<Version>
 001, 2015-08-05, 新規作成
 </Version>
	<typeparam name="T">必ず自分自身の型を指定してください。(メソッドの型決定用の型引数)</typeparam>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.ValidateMemberModel.MemberName">
	<summary>
 メンバ名(プロパティ名)
 </summary>
	<returns>メンバ名</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.ValidateMemberModel.ValidLevel">
	<summary>
 検証結果レベル
 </summary>
	<returns>エラーレベル</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.ValidateMemberModel.Message">
	<summary>
 メッセージ
 </summary>
	<returns>画面に表示するメッセージ</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.ValidateMemberModel.MessageParams">
	<summary>
 メッセージ引数
 </summary>
	<returns>メッセージ出力時置換対象となる文字列の配列</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Facade.ValidateMemberModel">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 検証・業務処理でエラー・警告が発生したプロパティを管理する為のモデル
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.Http.IApiControllerBase.OnActionExecuting(System.Web.Http.Controllers.HttpActionContext)">
	<summary>
 アクション メソッドの実行前イベント
 </summary>
	<param name="actionContext">フィルター コンテキスト</param>
	<remarks>前処理を実施</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Http.IApiControllerBase.OnActionExecuted(System.Web.Http.Filters.HttpActionExecutedContext)">
	<summary>
 アクション メソッドの実行後イベント
 </summary>
	<param name="actionExecutedContext">フィルター コンテキスト</param>
	<remarks>後処理を実施</remarks>
</member><member name="T:SRS.Standards.MvcFramework.Core.Http.IApiControllerBase">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 クラス内の特定メソッドをフィルタとして実行させるための、WebAPIコントローラ インターフェイス
 </summary>
	<author>MASUDA Kazuya/SRS TS</author>
	<Version>
 001, 2015-05-20, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.IO.ByteFixedStringAttribute.Length">
	<summary>
 固定長文字列のバイト長。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.IO.ByteFixedStringAttribute.PaddingType">
	<summary>
 固定長文字列の埋め方。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.ByteFixedStringAttribute.#ctor(System.Int32,SRS.Standards.MvcFramework.Core.IO.PaddingType)">
	<summary>
 固定長文字列として指定します。
 </summary>
	<param name="length">固定長文字列のバイト長。</param>
	<param name="paddingType">空白の埋め方。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.ByteFixedStringAttribute.#ctor(System.Int32)">
	<summary>
 固定長文字列として指定します。
 </summary>
	<param name="length">固定長文字列のバイト長。</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.IO.ByteFixedStringAttribute">
	<summary>
 バイト長を指定した固定長文字列として指定します。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Logging.LoginType.Login">
	<summary>
 ログイン
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Logging.LoginType.Logout">
	<summary>
 ログアウト
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.Logging.LoginType">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 ログイン・ログアウトを判別する為の列挙型
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption.None">
	<summary>
 すべてのオプションがオフであることを指定します。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption.IgnoreCase">
	<summary>
 プロパティ名の大文字小文字を区別しないように指定します。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption.IgnoreNotFound">
	<summary>
 設定可能なプロパティが見つからない場合に、例外をスローしないように指定します。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption.IgnoreNotConverted">
	<summary>
 プロパティの型に設定値を変換できない場合に、例外をスローしないように指定します。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption.CreateParentIfNecessary">
	<summary>
 ドット「.」を含む階層的なプロパティ名が指定され、親のプロパティが <c>null</c>参照の場合に、
 自動的に親のプロパティ値を作成、設定するように指定します。
 親のプロパティは、対象プロパティの型の、既定のコンストラクタで作成されます。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption.Default">
	<summary>
 オプションのデフォルト値を指定します。オプションを指定しない場合の規定値になります。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption">
	<summary>
 プロパティを設定する動作を制御するフラグを指定します。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.OracleDynamicParameters.ParamInfo.Name">
	<summary>パラメータ名。</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.OracleDynamicParameters.ParamInfo.Value">
	<summary>値。</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.OracleDynamicParameters.ParamInfo.ParameterDirection">
	<summary>パラメータ方向。</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.OracleDynamicParameters.ParamInfo.DbType">
	<summary>型。</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.OracleDynamicParameters.ParamInfo.Size">
	<summary>サイズ。</summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.OracleDynamicParameters.ParamInfo">
	<summary>
 パラメータ情報を表すクラス。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.OracleDynamicParameters.#ctor">
	<summary>
 コンストラクタ。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.OracleDynamicParameters.#ctor(System.Object)">
	<summary>
 コンストラクタ。
 </summary>
	<param name="template">追加するパラメータ。匿名型か動的パラメータを受け取ります。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.OracleDynamicParameters.AddDynamicParams(System.Object)">
	<summary>
 動的パラメータに指定されたパラメータオブジェクトに含まれるパラメータを追加します。
 EG: AddDynamicParams(new {A = 1, B = 2End) // will add property A and B to the dynamic
 </summary>
	<param name="param">パラメータオブジェクト。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.OracleDynamicParameters.Add(System.String,System.Object,System.Nullable{SRS.Standards.MvcFramework.Core.DataAccess.OracleDbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32})">
	<summary>
 動的パラメータリストにパラメータを追加します。
 </summary>
	<param name="name">パラメータ名。</param>
	<param name="value">値。</param>
	<param name="dbType">型。</param>
	<param name="direction">パラメータ方向。</param>
	<param name="size">サイズ。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.OracleDynamicParameters.Clean(System.String)">
	<summary>
 パラメータ名から余分な文字を消去します。
 </summary>
	<param name="name">パラメータ名。</param>
	<returns>正規化されたパラメータ名。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.OracleDynamicParameters.AddParameters(System.Data.IDbCommand,Dapper.SqlMapper.Identity)">
	<summary>
 コマンドの実行に必要なパラメータを全て追加します。
 </summary>
	<param name="command">実行される生のコマンド。</param>
	<param name="identity">クエリに関する情報。</param>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.OracleDynamicParameters.ParameterNames">
	<summary>
 パラメータの名前一覧を取得します。
 </summary>
	<value>パラメータの名前一覧。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.OracleDynamicParameters.Item(System.String)">
	<summary>
 パラメータの値を取得します。
 </summary>
	<param name="name">パラメータ名。</param>
	<returns>値。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.OracleDynamicParameters">
	<summary>
 Oracle 用の DynamicParameters。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.#ctor">
	<summary>
 ダミーコンストラクタ
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper._parameterRegex">
	<summary>
 SQLパラメータの正規表現 (キャッシュ)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper._parameterRegexOracle">
	<summary>
 SQLパラメータの正規表現 (キャッシュ、Oracle用)
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.GetParameterRegex">
	<summary>
 SQLパラメータの正規表現を、接続DBに関係なく取得します。
 </summary>
	<returns>SQLパラメータの正規表現オブジェクト。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.CreateRowCountSyntax(System.String)">
	<summary>
 件数取得用SQLを生成する
 </summary>
	<param name="querySyntax">検索SQL文</param>
	<returns>生成したSQL文</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.CreatePagingSyntax(System.String,System.String,System.Int32,System.Int32)">
	<summary>
 ページング用データ取得SQL生成
 </summary>
	<param name="querySyntax">検索SQL文</param>
	<param name="orderBySyntax">OrderBy句</param>
	<param name="pageNum">取得したページ番号</param>
	<param name="rowCount">1ページあたりの行数</param>
	<returns>生成したSQL文</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.GetDynamicParameters(System.String,System.Object)">
	<summary>
 指定されたSQLからパラメータのDapper.DynamicParametersを取得する
 </summary>
	<param name="sql">SQL</param>
	<param name="paramModel">条件モデル</param>
	<returns>DynamicParameters</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.GetDynamicParametersMulti(System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.String[])">
	<summary>
 指定されたSQLからパラメータのDapper.DynamicParametersを取得する (一括取得用)
 </summary>
	<param name="paramModels">条件モデルの集合</param>
	<param name="size">一度に取得するデータの数</param>
	<param name="primaryKeys">主キー名(任意数)</param>
	<returns>DynamicParameters</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.GetParamHash(System.String)">
	<summary>
 指定されたSQLからパラメータのDictionaryを取得する
 </summary>
	<param name="sql">SQL</param>
	<returns>Key=プロパティ名、Value=@プロパティ名のDictionary</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.GetTablePrimaryKeysQuery(System.String)">
	<summary>
 対象テーブルの主キー一覧を取得するためのSQLを取得します。
 </summary>
	<param name="tableName">対象テーブル名。</param>
	<returns>クエリ。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.GetColumnName(System.String,System.Boolean)">
	<summary>
 設定に従って、列名を大文字・小文字に変換する。
 </summary>
	<param name="primaryKey">主キー名</param>
	<param name="isRowId">行IDのときTrue。</param>
	<returns>変換後の名前</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.GetVariableName(System.String,System.Boolean)">
	<summary>
 状況に従って、変数名を取得する。
 </summary>
	<param name="primaryKey">主キー名</param>
	<param name="isRowId">行IDのときTrue。</param>
	<returns>変換後の名前</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.CreateWhereStatementInner(System.Text.StringBuilder,System.Boolean,System.String,System.Nullable{System.Int32},System.String[])">
	<summary>
 キーの情報から、単体データ向けの制約条件文を生成します。
 </summary>
	<param name="builder">StringBuilder。</param>
	<param name="isRowId">キーが行IDのときTrue。</param>
	<param name="tableId">テーブルのID。</param>
	<param name="index">同一キー名に対して1クエリ内で複数の値を指定するため、変数名末尾に付加する連番。不要な場合は <c>Nothing</c>を指定する。</param>
	<param name="primaryKeyNames">主キー名(任意数)</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.CreateWhereStatement(System.Nullable{System.Int32},System.Boolean,System.String,System.String[])">
	<summary>
 キーの情報から、複数データ向けの制約条件文を生成します。
 </summary>
	<param name="size">一度に取得するデータの数</param>
	<param name="isRowId">キーが行IDのときTrue。</param>
	<param name="tableId">テーブルのID。</param>
	<param name="primaryKeyNames">主キー名(任意数)</param>
	<returns>生成したSQL文</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.CreateOnStatement(System.String,System.String,System.String[])">
	<summary>
 キーの情報から、複数データ向けの同一テーブル結合条件文を生成します。
 </summary>
	<param name="tableIdA">1つめのテーブルのID</param>
	<param name="tableIdB">2つめのテーブルのID</param>
	<param name="primaryKeyNames">主キー名(任意数)</param>
	<returns>生成したSQL文</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.CreateExclusiveUpdateSyntax(System.String,System.Nullable{System.Int32},SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveLockType,System.Boolean,System.String,System.String[])">
	<summary>
 排他制御用データ取得用SQLを生成する(主キーの情報 / 行IDから、一括取得対応）
 </summary>
	<param name="tableName">テーブル名</param>
	<param name="size">一度に取得するデータの数。1つのみのときは <c>Nothing</c> を指定する。</param>
	<param name="lockType">排他ロックの種類。</param>
	<param name="isRowId">キーが行IDのときTrue。</param>
	<param name="rowIdPropertyName">行IDのプロパティ名</param>
	<param name="primaryKeyNames">主キー名(任意数)</param>
	<returns>生成したSQL文</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.CreateWithLockClauseSqlServer(SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveLockType)">
	<summary>
 排他ロック種類から、実際のロック構文(WITH節)を生成します。(SQL Server用)
 </summary>
	<param name="lockType">排他ロックの種類。</param>
	<returns>実際のロック構文。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.CreateWithLockClauseOracle(SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveLockType)">
	<summary>
 排他ロック種類から、実際のロック構文(WITH節)を生成します。(Oracle用)
 </summary>
	<param name="lockType">排他ロックの種類。</param>
	<returns>実際のロック構文。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.GetEntitySelectQuery``1(``0)">
	<summary>
 エンティティクラス用の検索SQLを取得します。
 </summary>
	<typeparam name="T">エンティティクラス。</typeparam>
	<param name="param">検索条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>SQL文。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.GetEntityCountQuery``1(``0)">
	<summary>
 エンティティクラス用の件数取得SQLを取得します。
 </summary>
	<typeparam name="T">エンティティクラス。</typeparam>
	<param name="param">検索条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>SQL文。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.GetEntityInsertQuery``1(``0)">
	<summary>
 エンティティクラス用の登録SQLを取得します。
 </summary>
	<typeparam name="T">エンティティクラス。</typeparam>
	<param name="data">挿入するデータ。</param>
	<returns>SQL文。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.GetEntityUpdateQuery``1(``0,``0)">
	<summary>
 エンティティクラス用の更新SQLを取得します。
 </summary>
	<typeparam name="T">エンティティクラス。</typeparam>
	<param name="data">更新条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<param name="param">検索条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>SQL文。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.GetEntityUpdateQuery``1(``0)">
	<summary>
 エンティティクラス用の更新SQLを取得します。主キー指定が必須です。
 </summary>
	<typeparam name="T">エンティティクラス。</typeparam>
	<param name="data">更新条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>SQL文。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.GetEntityUpdateModel``1(``0,``0)">
	<summary>
 エンティティクラス用の更新SQLに対応する引数オブジェクトを生成します。
 </summary>
	<typeparam name="T">エンティティクラス。</typeparam>
	<param name="data">更新条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<param name="param">検索条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>更新SQLに対応する引数オブジェクト。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.GetEntityUpdateModel``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
	<summary>
 エンティティクラス用の更新SQLに対応する引数オブジェクトを生成します。
 </summary>
	<typeparam name="T">エンティティクラス。</typeparam>
	<param name="data">更新条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<param name="param">検索条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>更新SQLに対応する引数オブジェクト。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.GetEntityDeleteQuery``1(``0)">
	<summary>
 エンティティクラス用の削除SQLを取得します。
 </summary>
	<typeparam name="T">エンティティクラス。</typeparam>
	<param name="param">検索条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>SQL文。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.GetEntityTableName(System.Type)">
	<summary>
 エンティティクラス用の対象テーブル名を取得します。
 </summary>
	<param name="entityType">エンティティクラスの型。</param>
	<returns>テーブル名。</returns>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.EntityPropertyType.All">
	<summary>全ての列。</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.EntityPropertyType.Key">
	<summary>主キー列のみ。</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.EntityPropertyType.Value">
	<summary>主キー以外の列のみ。</summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.EntityPropertyType">
	<summary>
 エンティティのプロパティ種類を指定する列挙体です。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.GetEntityProperties(System.Type,SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.EntityPropertyType)">
	<summary>
 エンティティとして扱うプロパティの一覧を取得します。
 </summary>
	<param name="entityType">エンティティクラスの型。</param>
	<param name="type">対象とするプロパティの種類。</param>
	<returns>エンティティとして扱うプロパティの一覧。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper.GetEntityWhereClause``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},``0)">
	<summary>
 エンティティクラス用の検索条件を表すWHERE句を取得します。
 </summary>
	<typeparam name="T">エンティティクラス。</typeparam>
	<param name="builder">WHERE句を出力する <see cref="T:System.Text.StringBuilder"/>。</param>
	<param name="properties">対象プロパティ情報。</param>
	<param name="param">検索条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.SqlHelper">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 SQL文の生成を補助するクラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 002, 2015-06-09, MASUDA Kazuya/SRS パラメータ名の直後に記号があると例外が発生するバグを修正
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.SerializableValidator.#ctor">
	<summary>
 ダミーコンストラクタ
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.SerializableValidator.Validate(System.Object)">
	<summary>
 対象オブジェクトがシリアライズ可能かどうかを検査します。
 不可能な場合、例外が発生します。
 結果は内部的にキャッシュされます。
 </summary>
	<param name="target">検査対象オブジェクト。</param>
	<exception cref="T:System.Runtime.Serialization.SerializationException">対象オブジェクトはシリアライズ不可能です。</exception>
</member><member name="T:SRS.Standards.MvcFramework.Core.IO.SerializableValidator">
	<summary>
 オブジェクトがシリアライズ可能かどうかを検査するための機能を提供します。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.ExceptionLogger.NLogName">
	<summary>
 Nlogのログ名(設定名)
 </summary>
	<returns>ログ名</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.ExceptionLogger.NLogLogger">
	<summary>
 NLogのログ出力クラス
 </summary>
	<returns>NLogLogger</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Logging.ExceptionLogger.Log(System.Exception)">
	<summary>
 例外ログ出力
 </summary>
	<param name="excption">ログを出力する例外</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.Logging.ExceptionLogger">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 例外ログ出力クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.ConfigurableAttribute.Yes">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator"/> による設定が有効であることを示す属性値です。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.ConfigurableAttribute.No">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator"/> による設定が無効であることを示す属性値です。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.ConfigurableAttribute.#ctor(System.Boolean)">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator"/> によるプロパティ設定を有効にするかどうかを指定して、
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.ConfigurableAttribute"/> クラスの新しいインスタンスを初期化します。
 </summary>
	<param name="configurable">プロパティ設定を有効にするかどうかを指定する bool 値。</param>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.ConfigurableAttribute.Configurable">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator"/> によるプロパティ設定を有効にするかどうかを
 指定する値を、取得または設定します。
 </summary>
	<value>プロパティ設定を有効にするかどうかを指定する bool 値。</value>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.ConfigurableAttribute.IsDefaultAttribute">
	<summary>
 このインスタンスの値が既定値かどうかを示す値を返します。 
 </summary>
	<returns>インスタンスが既定値である場合は true。</returns>
	<remarks>
		<para>このクラスでは、<see cref="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.ConfigurableAttribute.Configurable"/> が true の場合が既定値になります。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.ConfigurableAttribute.Equals(System.Object)">
	<summary>
 このインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。
 </summary>
	<param name="obj">このインスタンスと比較する <see cref="T:System.Object"/>。</param>
	<returns><paramref name="obj"/> がこのインスタンスの型および値と等しい場合は true。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.ConfigurableAttribute.GetHashCode">
	<summary>
 このインスタンスのハッシュコードを返します。 
 </summary>
	<returns>32 ビット符号付き整数ハッシュコード。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.ConfigurableAttribute">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator"/> によるプロパティの設定を無効にする場合に、
 対象のプロパティに適用する属性クラスです。<see cref="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.ConfigurableAttribute.Configurable"/> が false
 の設定でこの属性が適用されたプロパティは、<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator"/>
 のメソッドによるプロパティ設定では見えなくなります。
 </summary>
	<remarks>
		<para>この属性は通常、<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator"/> で設定させたくない
 プロパティを明示するために適用します。この属性が適用されていないプロパティは、
 既定で <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator"/> による設定が有効になります。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.EventLog.#ctor">
	<summary>
 ダミーコンストラクタ
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Utilities.EventLog.MaxMsgLength">
	<summary>
 書き込む際の最大メッセージ長
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.EventLog.LogWriteEntry(System.String,System.Int32,System.Int16,System.String,System.Diagnostics.EventLogEntryType)">
	<summary>
 Windowsのイベントログに設定された情報を登録します。
 </summary>
	<param name="systemName">
 監視システム側と取決めたシステム名（バッチPG名）。事前に該当マシン上でイベントソースとして登録しておく必要があります。
 登録されていない場合、管理者権限があれば自動で登録します。
 発生したエラーはライブラリ ログに出力されます。
 </param>
	<param name="eventId">
 監視システム側と取決めた通報メール上のメッセージID。
 </param>
	<param name="category">
 監視システム側と取決めたタスクのカテゴリ。<c>0</c> で指定なしになります。
 </param>
	<param name="message">
 ログ内容。3万文字以内です。
 </param>
	<param name="entryType">イベント ログ エントリのイベントの種類を指定</param>
	<returns>イベントログ出力成功した場合 <c>True</c>、そうでない場合 <c>False</c> 。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Utilities.EventLog">
	<summary>
 Windowsのイベントログに情報を登録します。このクラスは継承できません。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ProcessTools.#ctor">
	<summary>
 ダミーコンストラクタ。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ProcessTools.ExecuteProcess(System.String,System.String,System.Diagnostics.ProcessWindowStyle,System.Int32)">
	<summary>
 プロセスを起動します。
 </summary>
	<param name="command">起動するアプリケーションやバッチファイルのパス。</param>
	<param name="arg">アプリケーションを起動するときに使用するコマンドライン引数(省略可)。</param>
	<param name="style">ウインドウスタイル (省略時は非表示)。</param>
	<param name="wait">プロセスが終了するまで待機する時間。単位はミリ秒です。最大値は、32 ビット整数で表現できる最大値で、オペレーティング システムに対して無限大で表現される値です。(省略時は待ちません)</param>
	<returns>実行したプロセスオブジェクト。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ProcessTools.ExecuteProcess(System.String,System.Action{System.Diagnostics.ProcessStartInfo},System.Action{System.Diagnostics.Process},System.String,System.Diagnostics.ProcessWindowStyle,System.Int32)">
	<summary>
 プロセスを起動します。
 </summary>
	<param name="command">起動するアプリケーションやバッチファイルのパス。</param>
	<param name="setupAction">プロセス実行直前ののセットアップ処理。使用しない場合は <c>Nothing</c> を指定する。</param>
	<param name="afterStartAction">プロセズ実行直後の処理。使用しない場合は <c>Nothing</c> を指定する。</param>
	<param name="arg">アプリケーションを起動するときに使用するコマンドライン引数(省略可)。</param>
	<param name="style">ウインドウスタイル (省略時は非表示)。</param>
	<param name="wait">プロセスが終了するまで待機する時間。単位はミリ秒です。最大値は、32 ビット整数で表現できる最大値で、オペレーティング システムに対して無限大で表現される値です。(省略時は待ちません)</param>
	<returns>実行したプロセスオブジェクト。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Utilities.ProcessTools">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 プロセスを起動します。このクラスは継承できません。
 </summary>
	<author>MASUDA Kazuya/SRS TS</author>
</member><member name="P:SRS.Standards.MvcFramework.Core.Xml.XmlFile.XmlDocument">
	<summary>
 現在保持している <see cref="P:SRS.Standards.MvcFramework.Core.Xml.XmlFile.XmlDocument"/> 。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.#ctor">
	<summary>
 初期化処理。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.#ctor(System.String)">
	<summary>
 初期化処理。指定されたパスのXMLファイルを開いて読み込みます。
 </summary>
	<param name="fileName">読み込むXMLファイルのフルパス。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.Open(System.String)">
	<summary>
 指定されたパスのXMLファイルを開いて読み込みます。
 ※現在開いているファイルは保存せずに閉じます。
 </summary>
	<param name="fileName">読み込むXMLファイルのフルパス。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.Close">
	<summary>
 現在開いているファイルを保存せずに閉じます。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.Save">
	<summary>
 現在開いているファイルを上書き保存します。
 新規作成ファイルの場合、<see cref="T:SRS.Standards.MvcFramework.Core.Xml.XmlFileNotLoadedException"/> を発生する。
 </summary>
	<exception cref="T:SRS.Standards.MvcFramework.Core.Xml.XmlFileNotLoadedException">XMLファイルが読込まれていません。</exception>
	<exception cref="T:System.Xml.XmlException">操作の結果、整形式の XML ドキュメントにならない場合があります (ドキュメント要素がない、XML 宣言の重複など)。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.Save(System.String)">
	<summary>
 現在開いているファイルを、指定されたパスに保存します。
 </summary>
	<param name="fileName">XML保存先のパス。</param>
	<exception cref="T:System.Xml.XmlException">操作の結果、整形式の XML ドキュメントにならない場合があります (ドキュメント要素がない、XML 宣言の重複など)。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.GetNodeText(System.String)">
	<summary>
 指定したXPathで特定される、最初のノードのInnerTextを取得します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<returns>特定された最初のノードの値。不正なXPathの場合は、<paramref name="defaultValue"/> が返ります。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.GetNodeText(System.String,System.String)">
	<summary>
 指定したXPathで特定される、最初のノードのInnerTextを取得します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<param name="defaultValue">値が見つからなかった場合に返す値。</param>
	<returns>特定された最初のノードの値。不正なXPathの場合は、<paramref name="defaultValue"/> が返ります。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.GetNodeBoolean(System.String)">
	<summary>
 指定したXPathで特定される、最初のノードのInnerTextを <see cref="T:System.Boolean"/> として取得します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<returns>特定された最初のノードの値。不正なXPathの場合は、<paramref name="defaultValue"/> が返ります。</returns>
	<exception cref="T:SRS.Standards.MvcFramework.Core.Xml.XmlFileNotLoadedException">XMLファイルが読込まれていません。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.GetNodeBoolean(System.String,System.Boolean)">
	<summary>
 指定したXPathで特定される、最初のノードのInnerTextを <see cref="T:System.Boolean"/> として取得します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<param name="defaultValue">値が見つからなかった場合に返す値。</param>
	<returns>特定された最初のノードの値。不正なXPathの場合は、<paramref name="defaultValue"/> が返ります。</returns>
	<exception cref="T:SRS.Standards.MvcFramework.Core.Xml.XmlFileNotLoadedException">XMLファイルが読込まれていません。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.GetNodeInteger(System.String)">
	<summary>
 指定したXPathで特定される、最初のノードのInnerTextを <see cref="T:System.Int32"/> として取得します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<returns>特定された最初のノードの値。不正なXPathの場合は、<paramref name="defaultValue"/> が返ります。</returns>
	<exception cref="T:SRS.Standards.MvcFramework.Core.Xml.XmlFileNotLoadedException">XMLファイルが読込まれていません。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.GetNodeInteger(System.String,System.Int32)">
	<summary>
 指定したXPathで特定される、最初のノードのInnerTextを <see cref="T:System.Int32"/> として取得します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<param name="defaultValue">値が見つからなかった場合に返す値。</param>
	<returns>特定された最初のノードの値。不正なXPathの場合は、<paramref name="defaultValue"/> が返ります。</returns>
	<exception cref="T:SRS.Standards.MvcFramework.Core.Xml.XmlFileNotLoadedException">XMLファイルが読込まれていません。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.GetNodeDouble(System.String)">
	<summary>
 指定したXPathで特定される、最初のノードのInnerTextを <see cref="T:System.Double"/> として取得します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<returns>特定された最初のノードの値。不正なXPathの場合は、<paramref name="defaultValue"/> が返ります。</returns>
	<exception cref="T:SRS.Standards.MvcFramework.Core.Xml.XmlFileNotLoadedException">XMLファイルが読込まれていません。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.GetNodeDouble(System.String,System.Double)">
	<summary>
 指定したXPathで特定される、最初のノードのInnerTextを <see cref="T:System.Double"/> として取得します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<param name="defaultValue">値が見つからなかった場合に返す値。</param>
	<returns>特定された最初のノードの値。不正なXPathの場合は、<paramref name="defaultValue"/> が返ります。</returns>
	<exception cref="T:SRS.Standards.MvcFramework.Core.Xml.XmlFileNotLoadedException">XMLファイルが読込まれていません。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.GetNodeDateTime(System.String)">
	<summary>
 指定したXPathで特定される、最初のノードのInnerTextを <see cref="T:System.Double"/> として取得します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<returns>特定された最初のノードの値。不正なXPathの場合は、<paramref name="defaultValue"/> が返ります。</returns>
	<exception cref="T:SRS.Standards.MvcFramework.Core.Xml.XmlFileNotLoadedException">XMLファイルが読込まれていません。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.GetNodeDateTime(System.String,System.DateTime)">
	<summary>
 指定したXPathで特定される、最初のノードのInnerTextを <see cref="T:System.Double"/> として取得します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<param name="defaultValue">値が見つからなかった場合に返す値。</param>
	<returns>特定された最初のノードの値。不正なXPathの場合は、<paramref name="defaultValue"/> が返ります。</returns>
	<exception cref="T:SRS.Standards.MvcFramework.Core.Xml.XmlFileNotLoadedException">XMLファイルが読込まれていません。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.GetNodeDateTimeExact(System.String,System.String)">
	<summary>
 指定したXPathで特定される、最初のノードのInnerTextを <see cref="T:System.Double"/> として取得します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<param name="format">書式設定文字列。</param>
	<returns>特定された最初のノードの値。不正なXPathの場合は、<paramref name="defaultValue"/> が返ります。</returns>
	<exception cref="T:SRS.Standards.MvcFramework.Core.Xml.XmlFileNotLoadedException">XMLファイルが読込まれていません。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.GetNodeDateTimeExact(System.String,System.String,System.DateTime)">
	<summary>
 指定したXPathで特定される、最初のノードのInnerTextを <see cref="T:System.Double"/> として取得します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<param name="format">書式設定文字列。</param>
	<param name="defaultValue">値が見つからなかった場合に返す値。</param>
	<returns>特定された最初のノードの値。不正なXPathの場合は、<paramref name="defaultValue"/> が返ります。</returns>
	<exception cref="T:SRS.Standards.MvcFramework.Core.Xml.XmlFileNotLoadedException">XMLファイルが読込まれていません。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.SetNodeText(System.String,System.String)">
	<summary>
 指定したXPathで特定される、最初のノードに対して、InnerTextを設定します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<param name="value">設定する値。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.SetNodeText(System.String,System.String,System.Boolean)">
	<summary>
 指定したXPathで特定される、最初のノードに対して、InnerTextを設定します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<param name="value">設定する値。</param>
	<param name="escape">ノードの値をCDATAエスケープするかどうか。既定は <c>False</c> 。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.GetNode(System.String)">
	<summary>
 指定したXPathで特定される、最初のノードを返します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<returns>特定された最初の <see cref="T:System.Xml.XmlNode"/> 。見つからない場合は <c>Nothing</c> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.AddNode(System.String,System.Xml.XmlNode)">
	<summary>
 指定されたXPathで特定される、最初のノードに対して、指定されたノードを追加します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<param name="node">追加対象のノード。</param>
	<returns>追加したノード。追加しなかった場合は Nothing。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.AddNode(System.String,System.String,System.String)">
	<summary>
 指定されたXPathで特定される、最初のノードに対して、指定されたタグ名と値でノードを追加します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<param name="tag">追加するノードのタグ名。</param>
	<param name="value">追加するノードの値。</param>
	<returns>追加したノード。追加しなかった場合は Nothing。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.AddNode(System.String,System.String,System.String,System.Boolean)">
	<summary>
 指定されたXPathで特定される、最初のノードに対して、指定されたタグ名と値でノードを追加します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<param name="tag">追加するノードのタグ名。</param>
	<param name="value">追加するノードの値。</param>
	<param name="escape">ノードの値をCDATAエスケープするかどうか。既定は <c>False</c> 。</param>
	<returns>追加したノード。追加しなかった場合は Nothing。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.GetAttribute(System.String,System.String)">
	<summary>
 指定されたXPathで特定される、最初のノードの、指定された属性値を取得します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<param name="attributeName">値を取得する属性の名前。</param>
	<returns>属性値。見つからなかった場合や不正なXPathの場合は、<paramref name="defaultValue"/> が返ります。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.GetAttribute(System.String,System.String,System.String)">
	<summary>
 指定されたXPathで特定される、最初のノードの、指定された属性値を取得します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<param name="attributeName">値を取得する属性の名前。</param>
	<param name="defaultValue">値が見つからなかった場合に返す値。</param>
	<returns>属性値。見つからなかった場合や不正なXPathの場合は、<paramref name="defaultValue"/> が返ります。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.SetAttribute(System.String,System.String,System.String)">
	<summary>
 指定されたXPathで特定される、最初のノードの、指定された属性値に値を設定します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<param name="attributeName">値を設定する属性の名前。</param>
	<param name="value">設定する属性値。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.IsNodeExists(System.String)">
	<summary>
 指定したXPathで特定されるノードが存在するかどうかを判定します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<returns>1つでも存在する場合は <c>True</c> 、そうでなければ <c>False</c> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.GetNodes(System.String)">
	<summary>
 指定したXPathで特定される、ノードの集合を取得します。
 </summary>
	<param name="xpath">ノードを特定するための XPath 式。</param>
	<returns>XPathで特定される全てのノードを含む <see cref="T:System.Xml.XmlNodeList"/> 。見つからない場合は空の <see cref="T:System.Xml.XmlNodeList"/> を返します。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.EmptyXmlNodeList.#ctor">
	<summary>
 コンストラクタ。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Xml.XmlFile.EmptyXmlNodeList.Count">
	<summary>
 要素数。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.EmptyXmlNodeList.GetEnumerator">
	<summary>
 列挙子を取得します。
 </summary>
	<returns>列挙子。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.EmptyXmlNodeList.Item(System.Int32)">
	<summary>
 要素を取得します。
 </summary>
	<param name="index">要素番号。</param>
	<returns>要素。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Xml.XmlFile.EmptyXmlNodeList">
	<summary>
 空の XmlNodeList
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFile.Dispose(System.Boolean)">
	<summary>
 リソース開放処理。
 </summary>
	<param name="disposing">マネージリソースとアンマネージリソース両方開放する場合 <c>True</c>、アンマネージリソースのみ開放する場合 <c>False</c>。</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.Xml.XmlFile">
	<summary>
 XMLファイルを扱うためのWrapperクラス。
  <see cref="T:System.Xml.XmlDocument"/> を内部に持ち、
 テキストの取得・設定、ノードの取得・設定、ファイルの保存等の機能を提供します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.IInterceptable.InterceptMessage(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
	<summary>
 メソッドが呼び出された際に、このメソッドに処理が移されます。
 </summary>
	<param name="callMessage">メソッドの呼び出しに関する情報を格納している
 <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage"/>。</param>
	<returns>サービス呼び出しの結果情報を格納している <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage"/>。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.IInterceptable">
	<summary>
 メソッド呼び出し時の割り込み処理をサポートするクラスが実装する
 インターフェイスです。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionAttribute.#ctor">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionAttribute"/> クラスの新しいインスタンスを
 初期化します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionAttribute.#ctor(System.Boolean)">
	<summary>
		<see cref="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionAttribute.Enabled"/> プイパティの設定値を指定して、
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionAttribute"/> クラスの新しいインスタンスを
 初期化します。
 </summary>
	<param name="enabled"><see cref="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionAttribute.Enabled"/> プイパティの設定値</param>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionAttribute.Enabled">
	<summary>
 割り込み処理が有効かどうかを指定する bool 値を取得または設定します。
 </summary>
	<value>割り込み処理が有効かどうかを指定する値。規定値は true です。</value>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionAttribute">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptableBase"/> 派生クラスの実処理メソッドで、
 割り込み処理を行う必要があるかどうかを指定する属性クラスです。
 割り込み処理を行う必要がないメソッドであることを明示する場合に、
 Enabled を false に指定して、この属性を適用します。
 </summary>
	<remarks>
		<para><see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptableBase"/> 派生クラスのメソッドは、
 既定で割り込み処理が有効になります。この属性は、特に割り込み処理を
 無効にしたいメソッドにだけ適用します。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Http.ApiControllerBase`1.#ctor">
	<summary>
 コンストラクタ
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Http.ApiControllerBase`1.Facade">
	<summary>
 業務ファサード
 </summary>
	<returns>業務ファサード</returns>
	<remarks>業務ファサードのメソッドを実行する場合に使用</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Http.ApiControllerBase`1.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
	<summary>
 認証フィルター制御処理
 </summary>
	<param name="filterContext">フィルター コンテキスト</param>
	<remarks>認証が必要な場合で、認証されていない場合はログを出力</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Http.ApiControllerBase`1.OnActionExecuting(System.Web.Http.Controllers.HttpActionContext)">
	<summary>
 アクション メソッドの実行前イベント
 </summary>
	<param name="actionContext">フィルター コンテキスト</param>
	<remarks>前処理を実施</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Http.ApiControllerBase`1.OnActionExecuted(System.Web.Http.Filters.HttpActionExecutedContext)">
	<summary>
 アクション メソッドの実行後イベント
 </summary>
	<param name="actionExecutedContext">フィルター コンテキスト</param>
	<remarks>後処理を実施</remarks>
</member><member name="T:SRS.Standards.MvcFramework.Core.Http.ApiControllerBase`1">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 WebAPIコントローラの基底クラス
 </summary>
	<typeparam name="TFacade">このコントローラに紐づけられる業務ファサードの型</typeparam>
	<author>MASUDA Kazuya/SRS TS</author>
	<Version>
 001, 2015-05-20, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.INLogLogger.NLogName">
	<summary>
 NLogのLogger名
 </summary>
	<returns>NLogのLogger名</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.INLogLogger.NLogLogger">
	<summary>
 NLogのLogger
 </summary>
	<returns>NLogのLogger</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Logging.INLogLogger">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 NLog出力用メンバインタフェース
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="F:SRS.Standards.MvcFramework.Core.MVC.ViewModeType.Init">
	<summary>
 初期
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.MVC.ViewModeType.Searched">
	<summary>
 検索後
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.MVC.ViewModeType.Detail">
	<summary>
 詳細
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.MVC.ViewModeType.Insert">
	<summary>
 登録
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.MVC.ViewModeType.UpdateConfirmed">
	<summary>
 更新確認後
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.MVC.ViewModeType.InsertConfirmed">
	<summary>
 登録確認後
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.MVC.ViewModeType">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 画面モード
 </summary>
	<remarks></remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewElementModelBase.DeleteFlag">
	<summary>
 削除フラグ
 </summary>
	<remarks>削除後の画面表示制御で使用</remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewElementModelBase.SelectFlag">
	<summary>
 [選択]
 </summary>
	<remarks>選択されたかどうかを設定</remarks>
</member><member name="T:SRS.Standards.MvcFramework.Core.MVC.ViewElementModelBase">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 一覧画面明細モデルの基底クラス
 </summary>
	<author>MASUDA Kazuya/SRS</author>
	<Version>
 001, 2015-09-07, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.CallContextBoundObjectPool.Item(System.String)">
	<summary>
 現在の <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> 内に存在する、指定の名前のオブジェクトを
 取得または設定します。
 </summary>
	<param name="name">対象オブジェクトの名前。</param>
	<returns>現在の <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> に存在する、
 指定の名前のオブジェクト。</returns>
	<remarks>
		<para>オブジェクトは、指定された名前で直接 <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> に
 格納されます。または、指定された名前で直接 <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> から
 取得されます。</para>
	</remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.CallContextBoundObjectPool.Item(System.Type)">
	<summary>
 現在の <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> 内に存在する、指定の型のオブジェクトを
 取得または設定します。
 </summary>
	<param name="type">対象オブジェクトの型。</param>
	<returns>現在の <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> に存在する、
 指定の型のオブジェクト。</returns>
	<remarks>
		<para>オブジェクトは、指定された型のアセンブリ名を含むフルクラス名で、
 直接 <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> に格納されます。
 または、指定された型のアセンブリ名を含むフルクラス名で、
 直接 <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> から取得されます。</para>
	</remarks>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.CallContextBoundObjectPool">
	<summary>
 現在の <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> というスコープで管理されるオブジェクトの
 プールを提供します。オブジェクトは <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> に保持されます。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TypeUtility.#ctor">
	<summary>
 ダミーコンストラクタ
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TypeUtility.Convert(System.Object,System.Type)">
	<summary>
 オブジェクトを、指定した型に変換します。
 </summary>
	<param name="fromValue">変換する元のオブジェクト。</param>
	<param name="destinationType">変換後の型を指定する <see cref="T:System.Type"/> 。</param>
	<returns>変換後の <paramref name="destinationType"/> 型値。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TypeUtility.Convert(System.Object,System.Type,System.ComponentModel.TypeConverter)">
	<summary>
 変換に使用する型コンバータを指定して、オブジェクトを、指定した型に変換します。
 </summary>
	<param name="fromValue">変換する元のオブジェクト。</param>
	<param name="destinationType">変換後の型を指定する <see cref="T:System.Type"/>。</param>
	<param name="converter">型変換に使用する型コンバータ。
 既定の型コンバータを使用する場合は <c>null</c>。</param>
	<returns>変換後の <paramref name="destinationType"/> 型値。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TypeUtility.GetEncoding(System.String)">
	<summary>
 エンコーディング名またはコードページを指定する文字列から、<see cref="T:System.Text.Encoding"/>
 を取得します。
 null参照、空文字列、"0"、"Default" などを指定した場合は、
 既定のエンコーディングである <see cref="P:System.Text.Encoding.Default"/> が返されます。
 </summary>
	<param name="name">エンコーディング名またはコードページを指定する文字列。</param>
	<returns>取得した <see cref="T:System.Text.Encoding"/>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TypeUtility.GetResourceManager(System.String)">
	<summary>
 「リソースのベース名,リソースを含むアセンブリ名」の形式で指定されるリソース名から、
 <see cref="T:System.Resources.ResourceManager"/> を取得します。
 </summary>
	<param name="resourceName">「リソースのベース名,リソースを含むアセンブリ名」
 の形式で指定されるリソース名。</param>
	<returns>取得した <see cref="T:System.Resources.ResourceManager"/>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TypeUtility.Contains(System.Collections.ICollection,System.String,System.Boolean)">
	<summary>
 コレクションが指定の文字列を含んでいるかを示す値を返却します。
 文字列は序数による比較で検査されます。
 </summary>
	<param name="collection">調査対象のコレクション。</param>
	<param name="value">調査対象の文字列。</param>
	<param name="ignoreCase">大文字小文字を区別しない場合は false。</param>
	<returns>コレクションに、指定の文字列が含まれている場合は true。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TypeUtility">
	<summary>
 設定関連の機能を提供します。
 </summary>
	<remarks>
		<para>このクラスのインスタンスを作成することはできません。
 全ての機能は静的なメソッドとして提供されます。</para>
	</remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.Resources.ResourceManager">
	<summary>
  このクラスで使用されているキャッシュされた ResourceManager インスタンスを返します。
</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.My.Resources.Resources.Culture">
	<summary>
  厳密に型指定されたこのリソース クラスを使用して、すべての検索リソースに対し、
  現在のスレッドの CurrentUICulture プロパティをオーバーライドします。
</summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.My.Resources.Resources">
	<summary>
  ローカライズされた文字列などを検索するための、厳密に型指定されたリソース クラスです。
</summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundUp(System.Double)">
	<summary>
 整数値に切り上げる。（ゼロから遠い方に丸める）
 </summary>
	<param name="value">入力値</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundUpAtAnyPlace(System.Double,System.Int32)">
	<summary>
 切り上げる。（ゼロから遠い方に丸める）
 </summary>
	<param name="value">入力値</param>
	<param name="position">小数点以下の桁数。負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) に切り上げられます。</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.Ceiling(System.Double)">
	<summary>
 整数値に切り上げる。（常に大きくなる方に丸める）
 </summary>
	<param name="value">入力値</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.CeilingAtAnyPlace(System.Double,System.Int32)">
	<summary>
 切り上げる。（常に大きくなる方に丸める）
 </summary>
	<param name="value">入力値</param>
	<param name="position">小数点以下の桁数。負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) に切り上げられます。</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundDown(System.Double)">
	<summary>
 整数値に切り捨てる。（ゼロに近い方に丸める）
 </summary>
	<param name="value">入力値</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundDownAtAnyPlace(System.Double,System.Int32)">
	<summary>
 切り捨てる。（ゼロに近い方に丸める）
 </summary>
	<param name="value">入力値</param>
	<param name="position">小数点以下の桁数。負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) に切り捨てられます。</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.Floor(System.Double)">
	<summary>
 整数値に切り捨てる。（常に小さくなる方に丸める）
 </summary>
	<param name="value">入力値</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.FloorAtAnyPlace(System.Double,System.Int32)">
	<summary>
 切り捨てる。（常に小さくなる方に丸める）
 </summary>
	<param name="value">入力値</param>
	<param name="position">小数点以下の桁数。負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) に切り捨てられます。</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundHalfUp(System.Double)">
	<summary>
 整数値に四捨五入する。値が中間値の場合はゼロから遠い方に丸める。
 </summary>
	<param name="value">入力値</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundHalfUpAtAnyPlace(System.Double,System.Int32)">
	<summary>
 四捨五入する。値が中間値の場合はゼロから遠い方に丸める。
 </summary>
	<param name="value">入力値</param>
	<param name="position">小数点以下の桁数。負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) に四捨五入されます。</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundHalfEven(System.Double)">
	<summary>
 整数値に四捨五入する。値が中間値の場合は偶数方向に丸める。（銀行家の丸め）
 </summary>
	<param name="value">入力値</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundHalfEvenAtAnyPlace(System.Double,System.Int32)">
	<summary>
 四捨五入する。値が中間値の場合は偶数方向に丸める。（銀行家の丸め）
 </summary>
	<param name="value">入力値</param>
	<param name="position">小数点以下の桁数。負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) に四捨五入されます。</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundUp(System.Single)">
	<summary>
 整数値に切り上げる。（ゼロから遠い方に丸める）
 </summary>
	<param name="value">入力値</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundUpAtAnyPlace(System.Single,System.Int32)">
	<summary>
 切り上げる。（ゼロから遠い方に丸める）
 </summary>
	<param name="value">入力値</param>
	<param name="position">小数点以下の桁数。負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) に切り上げられます。</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.Ceiling(System.Single)">
	<summary>
 切り上げる。（常に大きくなる方向に整数値に丸める）
 </summary>
	<param name="value">入力値</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.CeilingAtAnyPlace(System.Single,System.Int32)">
	<summary>
 切り上げる。（常に大きくなる方に丸める）
 </summary>
	<param name="value">入力値</param>
	<param name="position">小数点以下の桁数。負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) に切り上げられます。</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundDown(System.Single)">
	<summary>
 整数値に切り捨てる。（ゼロに近い方に丸める）
 </summary>
	<param name="value">入力値</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundDownAtAnyPlace(System.Single,System.Int32)">
	<summary>
 切り捨てる。（ゼロに近い方に丸める）
 </summary>
	<param name="value">入力値</param>
	<param name="position">小数点以下の桁数。負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) に切り捨てられます。</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.Floor(System.Single)">
	<summary>
 整数値に切り捨てる。（常に小さくなる方に丸める）
 </summary>
	<param name="value">入力値</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.FloorAtAnyPlace(System.Single,System.Int32)">
	<summary>
 切り捨てる。（常に小さくなる方に丸める）
 </summary>
	<param name="value">入力値</param>
	<param name="position">小数点以下の桁数。負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) に切り捨てられます。</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundHalfUp(System.Single)">
	<summary>
 整数値に四捨五入する。値が中間値の場合はゼロから遠い方に丸める。
 </summary>
	<param name="value">入力値</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundHalfUpAtAnyPlace(System.Single,System.Int32)">
	<summary>
 四捨五入する。値が中間値の場合はゼロから遠い方の整数値に丸める。
 </summary>
	<param name="value">入力値</param>
	<param name="position">小数点以下の桁数。負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) に四捨五入されます。</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundHalfEven(System.Single)">
	<summary>
 整数値に四捨五入する。値が中間値の場合は偶数方向に丸める。（銀行家の丸め）
 </summary>
	<param name="value">入力値</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundHalfEvenAtAnyPlace(System.Single,System.Int32)">
	<summary>
 四捨五入する。値が中間値の場合は偶数方向に丸める。（銀行家の丸め）
 </summary>
	<param name="value">入力値</param>
	<param name="position">小数点以下の桁数。負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) に四捨五入されます。</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundUp(System.Decimal)">
	<summary>
 整数値に切り上げる。（ゼロから遠い方に丸める）
 </summary>
	<param name="value">入力値</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundUpAtAnyPlace(System.Decimal,System.Int32)">
	<summary>
 切り上げる。（ゼロから遠い方に丸める）
 </summary>
	<param name="value">入力値</param>
	<param name="position">小数点以下の桁数。負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) に切り上げられます。</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.Ceiling(System.Decimal)">
	<summary>
 整数値に切り上げる。（常に大きくなる方に丸める）
 </summary>
	<param name="value">入力値</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.CeilingAtAnyPlace(System.Decimal,System.Int32)">
	<summary>
 切り上げる。（常に大きくなる方に丸める）
 </summary>
	<param name="value">入力値</param>
	<param name="position">小数点以下の桁数。負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) に切り上げられます。</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundDown(System.Decimal)">
	<summary>
 整数値に切り捨てる。（ゼロに近い方に丸める）
 </summary>
	<param name="value">入力値</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundDownAtAnyPlace(System.Decimal,System.Int32)">
	<summary>
 切り捨てる。（ゼロに近い方の整数値に丸める）
 </summary>
	<param name="value">入力値</param>
	<param name="position">小数点以下の桁数。負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) に切り捨てられます。</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.Floor(System.Decimal)">
	<summary>
 整数値に切り捨てる。（常に小さくなる方に丸める）
 </summary>
	<param name="value">入力値</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.FloorAtAnyPlace(System.Decimal,System.Int32)">
	<summary>
 切り捨てる。（常に小さくなる方に丸める）
 </summary>
	<param name="value">入力値</param>
	<param name="position">小数点以下の桁数。負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) に切り捨てられます。</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundHalfUp(System.Decimal)">
	<summary>
 整数値に四捨五入する。値が中間値の場合はゼロから遠い方に丸める。
 </summary>
	<param name="value">入力値</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundHalfUpAtAnyPlace(System.Decimal,System.Int32)">
	<summary>
 四捨五入する。値が中間値の場合はゼロから遠い方に丸める。
 </summary>
	<param name="value">入力値</param>
	<param name="position">小数点以下の桁数。負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) に四捨五入されます。</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundHalfEven(System.Decimal)">
	<summary>
 整数値に四捨五入する。値が中間値の場合は偶数方向に丸める。（銀行家の丸め）
 </summary>
	<param name="value">入力値</param>
	<returns>端数処理結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Rounding.RoundHalfEvenAtAnyPlace(System.Decimal,System.Int32)">
	<summary>
 四捨五入する。値が中間値の場合は偶数方向に丸める。（銀行家の丸め）
 </summary>
	<param name="value">入力値</param>
	<param name="position">小数点以下の桁数。負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) に四捨五入されます。</param>
	<returns>端数処理結果</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Utilities.Rounding">
	<summary>
 数値の端数処理を行います。<see cref="T:System.Single"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/> の拡張メソッドとして提供します。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveLockType.NoLock">
	<summary>ロックなし</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveLockType.RowUpdate">
	<summary>行更新ロック</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveLockType.RowUpdateNoWait">
	<summary>行更新ロック(ロック待機なし)</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveLockType.RowUpdateNoWaitPrimaryKey">
	<summary>行更新ロック(ロック待機なし、主キーで検索)</summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveLockType">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 テーブルに実ロックをかける際の種類。
 </summary>
	<author>MASUDA Kazuya/SRS</author>
	<Version>
 001, 2015-09-16, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveUpdateEqualityComparer.Equals(SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveUpdateRowModel,SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveUpdateRowModel)">
	<summary>
 比較処理実施
 </summary>
	<param name="x">比較元</param>
	<param name="y">比較先</param>
	<returns>True：同一モデル</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveUpdateEqualityComparer.GetHashCode(SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveUpdateRowModel)">
	<summary>
 EqualsがTrueの時は必ず同じ値を返す
 </summary>
	<param name="obj">オブジェクト</param>
	<returns>HashCode</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveUpdateEqualityComparer">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 排他処理管理用データモデル比較用クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveUpdateModel.ExclusiveUpdateTypes">
	<summary>
 排他制御対象(複数指定可)
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveUpdateModel.ExclusiveUpdateRows">
	<summary>
 排他制御の行データ
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveUpdateModel">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 排他処理管理用データモデル
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityDataAccess.Select``1(``0)">
	<summary>
 検索条件を指定してデータを取得します。
 </summary>
	<typeparam name="T">エンティティクラス。</typeparam>
	<param name="param">検索条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>取得したデータ。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityDataAccess.Select``1(``0,SRS.Standards.MvcFramework.Core.DataAccess.IPaging,System.String)">
	<summary>
 検索条件を指定してデータをページングしながら取得します。
 </summary>
	<typeparam name="T">エンティティクラス。</typeparam>
	<param name="param">検索条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<param name="viewModel">ページング画面モデル。</param>
	<param name="orderBy">ORDER BY 句。</param>
	<returns>取得したデータ。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityDataAccess.Count``1(``0)">
	<summary>
 条件を指定してデータ件数を取得します。
 </summary>
	<typeparam name="T">エンティティクラス。</typeparam>
	<param name="param">検索条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>データ件数。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityDataAccess.Insert``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>
 データを登録します。
 </summary>
	<typeparam name="T">エンティティクラス。</typeparam>
	<param name="data">挿入するデータ。</param>
	<returns>取得したデータ。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityDataAccess.Insert``1(``0)">
	<summary>
 データを登録します。
 </summary>
	<typeparam name="T">エンティティクラス。</typeparam>
	<param name="data">挿入するデータ。</param>
	<returns>取得したデータ。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityDataAccess.Update``1(``0)">
	<summary>
 条件を指定してデータを更新します。
 </summary>
	<typeparam name="T">エンティティクラス。</typeparam>
	<param name="data">更新条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>取得したデータ。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityDataAccess.Update``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>
 条件を指定してデータを更新します。
 </summary>
	<typeparam name="T">エンティティクラス。</typeparam>
	<param name="data">更新条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>取得したデータ。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityDataAccess.Update``1(``0,``0)">
	<summary>
 条件を指定してデータを更新します。
 </summary>
	<typeparam name="T">エンティティクラス。</typeparam>
	<param name="data">更新条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<param name="param">検索条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>取得したデータ。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityDataAccess.Update``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
	<summary>
 条件を指定してデータを更新します。
 </summary>
	<typeparam name="T">エンティティクラス。</typeparam>
	<param name="data">更新条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<param name="param">検索条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>取得したデータ。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityDataAccess.Delete``1(``0)">
	<summary>
 条件を指定してデータを削除します。
 </summary>
	<typeparam name="T">エンティティクラス。</typeparam>
	<param name="param">検索条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>削除件数。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityDataAccess.Delete``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>
 条件を指定してデータを削除します。
 </summary>
	<typeparam name="T">エンティティクラス。</typeparam>
	<param name="param">検索条件。<c>Nothing</c>以外の値が指定されたプロパティが使用されます。</param>
	<returns>削除件数。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.EntityDataAccess">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 テーブルエンティティ基底クラス。
 DBテーブルに対する基本的な操作(検索、挿入、更新、削除)をサポートするクラスです。
 </summary>
	<author>MASUDA Kazuya/SRS TS</author>
	<Version>
 001, 2015-08-05, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveUpdateRowModel.RowId">
	<summary>
 行ID
 </summary>
	<returns>行ID</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveUpdateRowModel.RowVersion">
	<summary>
 行バージョン
 </summary>
	<returns>行バージョン</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveUpdateRowModel">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 排他処理管理用データ行モデル
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.JsonSerializer.#ctor">
	<summary>
 ダミーコンストラクタ
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.JsonSerializer.Serialize``1(``0)">
	<summary>
 オブジェクトを JSON にシリアライズします。
 </summary>
	<typeparam name="T">対象型。</typeparam>
	<param name="instance">対象オブジェクト</param>
	<returns>シリアライズ結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.JsonSerializer.Deserialize``1(System.String)">
	<summary>
 オブジェクトを JSON からデシリアライズします。
 </summary>
	<typeparam name="T">対象型。</typeparam>
	<param name="json">JSONテキスト</param>
	<returns>デシリアライズ結果</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.JsonSerializer">
	<summary>
 任意の型としてJSONをシリアライズします。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.RequestLogger.NLogName">
	<summary>
 Nlogのログ名(設定名)
 </summary>
	<returns>ログ名</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.RequestLogger.NLogLogger">
	<summary>
 NLogのログ出力クラス
 </summary>
	<returns>NLogLogger</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Logging.RequestLogger.Log(System.Web.HttpRequestBase)">
	<summary>
 リクエストログ出力
 </summary>
	<param name="request">リクエスト</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Logging.RequestLogger.Log(System.Net.Http.HttpRequestMessage)">
	<summary>
 リクエストログ出力
 </summary>
	<param name="request">リクエスト</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.Logging.RequestLogger">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 リクエストログ出力クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.AuthLogger.NLogName">
	<summary>
 NLogのログ名(設定名)
 </summary>
	<returns>ログ名</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.AuthLogger.NLogLogger">
	<summary>
 NLogのログ出力クラス
 </summary>
	<returns>NLogLogger</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Logging.AuthLogger.Log(System.String,SRS.Standards.MvcFramework.Core.Logging.LoginType,System.Boolean)">
	<summary>
 トレースログを出力
 </summary>
	<param name="trialUserId">試行ユーザＩＤ</param>
	<param name="login">ログイン or ログアウト</param>
	<param name="successFlg">ログイン成否</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.Logging.AuthLogger">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 認証ログ出力クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.SRSValidationAttribute.Required">
	<summary>必須項目かどうか。</summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSValidationAttribute.#ctor(System.Boolean)">
	<summary>
 コンストラクタ。
 </summary>
	<param name="required">必須項目かどうか。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSValidationAttribute.GetInputMaxLength">
	<summary>
 TextBoxに入力可能な最大桁を求めます。
 </summary>
	<returns>TextBoxに入力可能な最大桁。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.MVC.SRSValidationAttribute">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 モデル項目用バリデーション属性の基底クラス。
 </summary>
	<author>MASUDA Kazuya/SRS TS</author>
	<Version>
 001, 2015-09-09, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.ExtendedRazorViewEngine.#ctor">
	<summary>
 コンストラクタ
 </summary>
	<remarks>RazorViewEngineの基本設定に拡張設定を追加する</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.ExtendedRazorViewEngine.FindView(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean)">
	<summary>
 View検索処理
 </summary>
	<param name="controllerContext">コントローラー コンテキスト</param>
	<param name="viewName">ビューの名前</param>
	<param name="masterName">マスター ビューの名前</param>
	<param name="useCache">キャッシュされたビューを使用する場合は true</param>
	<returns>ページ ビュー</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.MVC.ExtendedRazorViewEngine">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 拡張RazorViewEngine
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 002, 2015-06-19, SRS TS MASUDA Kazuya 記述を簡約化
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.RequestBoundObjectPool.Pool">
	<summary>
 オブジェクト保存域
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.RequestBoundObjectPool.Item(System.String)">
	<summary>
 現在の <see cref="T:System.Web.HttpContext"/> 内に存在する、指定の名前のオブジェクトを
 取得または設定します。
 </summary>
	<param name="name">対象オブジェクトの名前。</param>
	<returns>現在の <see cref="T:System.Web.HttpContext"/> に存在する、
 指定の名前のオブジェクト。</returns>
	<remarks>
		<para>オブジェクトは、指定された名前で直接 <see cref="T:System.Web.HttpContext"/> に
 格納されます。または、指定された名前で直接 <see cref="T:System.Web.HttpContext"/> から
 取得されます。</para>
	</remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.RequestBoundObjectPool.Item(System.Type)">
	<summary>
 現在の <see cref="T:System.Web.HttpContext"/> 内に存在する、指定の型のオブジェクトを
 取得または設定します。
 </summary>
	<param name="type">対象オブジェクトの型。</param>
	<returns>現在の <see cref="T:System.Web.HttpContext"/> に存在する、
 指定の型のオブジェクト。</returns>
	<remarks>
		<para>オブジェクトは、指定された型のアセンブリ名を含むフルクラス名で、
 直接 <see cref="T:System.Web.HttpContext"/> に格納されます。
 または、指定された型のアセンブリ名を含むフルクラス名で、
 直接 <see cref="T:System.Web.HttpContext"/> から取得されます。</para>
	</remarks>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.RequestBoundObjectPool">
	<summary>
 現在の <see cref="T:System.Web.HttpContext"/> というスコープで管理されるオブジェクトの
 プールを提供します。オブジェクトは <see cref="T:System.Web.HttpContext"/> に保持されます。
 このスコープは、ASP.NET環境における一回のリクエストに対応します。
 </summary>
	<remarks>
		<para><see cref="T:System.Web.HttpContext"/> が存在しない環境で、オブジェクトを格納または取得
 しようとすると、例外がスローされます。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.#ctor">
	<summary>
 ダミーコンストラクタ
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Enabled">
	<summary>
 タイムスタンプの取得が、構成ファイルで有効に設定されているかどうかを示す値を取得します。
 </summary>
	<value>タイムスタンプの取得が、構成ファイルで有効に設定されているかどうかを示す値。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.ThreadLocal">
	<summary>
 各スレッドで独立した <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> インスタンスを取得します。
 </summary>
	<value>各スレッドで独立した <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> インスタンス。</value>
	<remarks>
		<para>この種類の <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> は、ASP.NET 等、複数スレッドで平行して
 独立した処理が実行される、サーバアプリケーションでの使用に向いています。
 スレッド毎に独立した <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> が取得されるため、タイムスタンプの
 出力も各処理スレッド別に独立したブロックとして出力されます。</para>
	</remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Global">
	<summary>
 アプリケーション全体で共通の <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> インスタンスを取得します。
 </summary>
	<value>アプリケーション全体で共通の <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> インスタンス。</value>
	<remarks>
		<para>この種類の <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> は、WindowsFormsアプリケーション等、
 基本的に複数スレッドが同時並行的に処理を行わないアプリケーションや、全スレッド
 でのタイムスタンプを結合した形で取得する必要のあるアプリケーションに向いています。
 どのスレッドでも、常にアプリケーション全体で共通の <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/>
 インスタンスが取得されるため、すべてのタイムスタンプが結合された形で出力されます。</para>
		<para>このプロパティで取得される <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> は、全スレッドで共有されるため、
 スレッド間で同期して動作します。このため、複数スレッドで同時並行的に処理を行う
 アプリケーションで使用すると、タイムスタンプ取得の際に、別スレッドにより短時間
 ブロックされる可能性がありますので注意してください。</para>
	</remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Current">
	<summary>
 現在のアプリケーションで基本として使用すべき <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> インスタンスを
 取得します。これは内部的に <see cref="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.ThreadLocal"/> または <see cref="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Global"/>
 のいずれかで取得されるインスタンスになります。どちらが取得されるかは、
 構成ファイルの設定によって決まります。既定では <see cref="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.ThreadLocal"/> です。
 </summary>
	<value>現在のアプリケーションで基本として使用すべき <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/>
 インスタンス。</value>
	<remarks>
		<para>プログラムコードからは、基本的にこのプロパティ、もしくはこのプロパティを
 経由して各種メソッドを自動的に呼び出すヘルパーメソッドのいずれかを使用してください。
 このようにすることで、プログラムコード側でコードが動作するアプリケーションの
 タイプを意識する必要がなくなります。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamp(System.String)">
	<summary>
		<see cref="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Current"/> で取得される <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> インスタンスを経由して、
 タイムスタンプを取得します。通常のタイムスタンプは、このメソッドで取得するように
 してください。
 </summary>
	<param name="caption">タイムスタンプの意味を説明する見出し文字列。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Interval(System.String)">
	<summary>
 特定の区間の最初と最後のタイミングで、自動的にタイムスタンプを取得するための
 <see cref="T:System.IDisposable"/> オブジェクトを取得します。使用される <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/>
 は、<see cref="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Current"/> で取得される <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> インスタンスです。
 </summary>
	<param name="caption">この区間のタイムスタンプの意味を説明する見出し文字列。</param>
	<returns>区間のタイムスタンプを取得するための <see cref="T:System.IDisposable"/> オブジェクト。</returns>
	<remarks>
		<para>このメソッドを using ブロックとともに使用することで、ブロック内の処理の
 最初と最後のタイムスタンプを簡易な記述で取得することができます。</para>
		<para>このオブジェクトは、自動的な <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> のフラッシュは行いません。
 あくまでタイムスタンプの取得だけを実行します。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Flush(System.String)">
	<summary>
		<see cref="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Current"/> で取得される <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> インスタンスを
 フラッシュします。<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> をフラッシュすると、その時点までに
 取得されたすべてのタイムスタンプが、まとめてファイルに出力されます。
 通常のタイムスタンプのフラッシュは、このメソッドで行うようにしてください。
 </summary>
	<param name="caption">フラッシュの意味を説明する見出し文字列。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.LocalCreate(System.String)">
	<summary>
 特定の区間だけで、他の <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> とは独立してローカルに使用する、
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> を作成します。
 </summary>
	<param name="caption">作成する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> の意味を説明する見出し文字列。</param>
	<returns>作成されたローカル用の <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> インスタンス。</returns>
	<remarks>
		<para>このメソッドを使用して作成した <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> インスタンスは、
 不要になった時点で <see cref="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper.Dispose"/> を使用して破棄するか、
 <see cref="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper.Flush(System.String)"/> を使用してフラッシュしてください。
 この時点で、これまでに取得したタイムスタンプがまとめて出力されます。
 using 句を使用すると、この動作を簡易な記述で強制することができます。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.LocalInterval(System.String)">
	<summary>
 特定の区間の最初と最後で自動的にタイムスタンプを取得する、独立したローカルな
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> を作成します。このメソッドで返されるオブジェクトは、
 作成されると同時にタイムスタンプを取得し、破棄される時点でもタイムスタンプを取得し、
 すぐにフラッシュされます。
 </summary>
	<param name="caption">この区間のタイムスタンプの意味を説明する見出し文字列。</param>
	<returns>特定の区間の最初と最後で自動的にタイムスタンプを取得する、独立したローカルな
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> インスタンス。</returns>
	<remarks>
		<para>このメソッドで取得される <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> は独立したインスタンスになるため、
 他の <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> による出力内容には干渉しません。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Initialize">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp"/> クラスを初期化します。構成設定の読み込み等を行います。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper.#ctor">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> クラスの新しいインスタンスを初期化します。
 このクラス自身のインスタンスは、nullオブジェクトとしてだけ機能します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper.Stamp(System.String)">
	<summary>
 現在のインスタンスでタイムスタンプを取得します。
 このクラスの既定のメソッドでは何も実行しません。派生クラスで、
 実際にタイムスタンプの取得を行うようにオーバーライドされます。
 </summary>
	<param name="caption">タイムスタンプの意味を説明する見出し文字列。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper.Flush(System.String)">
	<summary>
 現在のインスタンスがこれまでに取得したタイムスタンプを、ファイルに出力します。
 このクラスの既定のメソッドでは何も実行しません。派生クラスで、
 実際にタイムスタンプのフラッシュを行うようにオーバーライドされます。
 </summary>
	<param name="caption">フラッシュの意味を説明する見出し文字列。</param>
	<remarks>
		<para>このメソッドを適切なタイミングで実行することで、タイムスタンプを分かりやすく、
 かつ適切に出力するようにしてください。自動フラッシュが行われると、区間の処理時間を
 計測している途中でフラッシュが実行されるなど、適切でない動作が発生する可能性があります。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper.Interval(System.String)">
	<summary>
 特定の区間の最初と最後のタイミングで、自動的にタイムスタンプを取得するための
 <see cref="T:System.IDisposable"/> オブジェクトを取得します。
 このクラスの既定のメソッドでは何も実行しない nullオブジェクトを返却します。
 派生クラスで、実際にタイムスタンプの取得を行うオブジェクトを返却するように
 オーバーライドされます。
 </summary>
	<param name="caption">この区間のタイムスタンプの意味を説明する見出し文字列。</param>
	<returns>区間のタイムスタンプを取得するための <see cref="T:System.IDisposable"/> オブジェクト。</returns>
	<remarks>
		<para>このメソッドを using ブロックとともに使用することで、ブロック内の処理の
 最初と最後のタイムスタンプを簡易な記述で取得することができます。</para>
		<para>このオブジェクトは、自動的な <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> のフラッシュは行いません。
 あくまでタイムスタンプの取得だけを実行します。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper.Dispose">
	<summary>
 現在のインスタンスを破棄します。このメソッドは見出し文字列を指定できないことを除いて、
 <see cref="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper.Flush(System.String)"/> メソッドと同様に機能しますが、基本的にタイムスタンプのフラッシュを
 目的とする場合は、<see cref="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper.Flush(System.String)"/> メソッドを使用してください。
 このクラスの既定のメソッドでは何も実行しません。派生クラスで、
 実際にインスタンスの破棄を行うようにオーバーライドされます。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper">
	<summary>
 タイムスタンプの取得と出力を行う、<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> の基底クラスです。
 ヘルパーメソッドを使用する場合は、このクラスを直接使用する必要はありません。
 ローカルなタイムスタンプなどで、<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> オブジェクトを直接扱う場合には、
 このクラスのメソッドを使用する必要があります。
 </summary>
	<remarks>
		<para>実際にタイムスタンプの取得や出力を実行するのは、このクラスの派生クラスです。
 このクラス自身はインターフェイスだけを規定します（タイムスタンプの取得が無効に設定
 されている場合だけ、何も行わない nullオブジェクトとして、このクラスのインスタンスが
 使用されます）。</para>
	</remarks>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StamperImpl.m_description">
	<summary>説明</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StamperImpl.m_stopWatch">
	<summary>ストップウォッチ</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StamperImpl.m_threadId">
	<summary>スレッドID</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StamperImpl.m_stamps">
	<summary>タイムスタンプデータ</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StamperImpl.m_lastElapsed">
	<summary>最後のタイムサンプからの経過時間</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StamperImpl.m_count">
	<summary>タイムスタンプを取った回数</summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StamperImpl.#ctor(System.String)">
	<summary>
 この <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> の意味を説明する文字列を指定して、
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StamperImpl"/> クラスの新しいインスタンスを初期化します。
 </summary>
	<param name="description">この <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> の意味を説明する文字列。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StamperImpl.Stamp(System.String)">
	<summary>
 タイムスタンプの意味を説明する見出し文字列を指定して、現在のインスタンスで
 タイムスタンプを取得します。
 </summary>
	<param name="caption">タイムスタンプの意味を説明する見出し文字列</param>
	<remarks>
		<para>取得されたタイムスタンプは、内部バッファに保持されます。
 バッファサイズがオーバーした場合は自動的にフラッシュされます。
 基本的には、自動フラッシュに任せず、適切なタイミングで手動でフラッシュ
 するようにしてください。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StamperImpl.Flush(System.String)">
	<summary>
 フラッシュの意味を説明する見出し文字列を指定して、現在のインスタンスがこれまでに
 取得したタイムスタンプを、ファイルに出力します。
 </summary>
	<param name="caption">フラッシュの意味を説明する見出し文字列。</param>
	<remarks>
		<para>このメソッドを適切なタイミングで実行することで、タイムスタンプを分かりやすく、
 かつ適切に出力するようにしてください。自動フラッシュが行われると、区間の処理時間を
 計測している途中でフラッシュが実行されるなど、適切でない動作が発生する可能性があります。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StamperImpl.Interval(System.String)">
	<summary>
 特定の区間の最初と最後のタイミングで、自動的にタイムスタンプを取得するための
 <see cref="T:System.IDisposable"/> オブジェクトを取得します。
 </summary>
	<param name="caption">この区間のタイムスタンプの意味を説明する見出し文字列。</param>
	<returns>区間のタイムスタンプを取得するための <see cref="T:System.IDisposable"/> オブジェクト。</returns>
	<remarks>
		<para>このメソッドを using ブロックとともに使用することで、ブロック内の処理の
 最初と最後のタイムスタンプを簡易な記述で取得することができます。</para>
		<para>このオブジェクトは、自動的な <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> のフラッシュは行いません。
 あくまでタイムスタンプの取得だけを実行します。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StamperImpl.Dispose">
 現在のインスタンスを破棄します。このメソッドは見出し文字列を指定できないことを除いて、
 <see cref="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StamperImpl.Flush(System.String)"/> メソッドと同様に機能しますが、基本的にタイムスタンプのフラッシュを
 目的とする場合は、<see cref="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StamperImpl.Flush(System.String)"/> メソッドを使用してください。

</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StamperImpl.Finalize">
	<summary>
 ファイナライズ処理
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StamperImpl">
	<summary>
 実際にタイムスタンプの取得とファイルへの出力を実行する、<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> の実装です。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.IntervalStamper.#ctor(System.String)">
	<summary>
 この区間の意味を説明する見出し文字列を指定して、<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.IntervalStamper"/>
 クラスの新しいインスタンスを初期化します。
 </summary>
	<param name="description">この区間の意味を説明する見出し文字列。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.IntervalStamper.Dispose">
	<summary>
 タイムスタンプを取得し、すぐにこのインスタンスを破棄します。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.IntervalStamper">
	<summary>
 特定区間の最初と最後のタイミングでタイムスタンプを取得する、独立したローカルな
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> として動作する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> の実装です。
 このクラスのインスタンスは、作成されると同時にタイムスタンプを取得し、
 破棄される時点でもタイムスタンプを取得し、すぐにフラッシュされます。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.SynchronizedStamper.#ctor(System.String)">
	<summary>
 このインスタンスの意味を説明する見出し文字列を指定して、<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.SynchronizedStamper"/>
 クラスの新しいインスタンスを初期化します。
 </summary>
	<param name="description">インスタンスの意味を説明する見出し文字列。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.SynchronizedStamper.Stamp(System.String)">
	<summary>
 スレッド間の同期を取りながらタイムスタンプを取得します。
 </summary>
	<param name="caption">タイムスタンプの意味を説明する見出し文字列。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.SynchronizedStamper.Flush(System.String)">
	<summary>
 スレッド間の同期を取りながら、これまでに取得したタイムスタンプをフラッシュします。
 </summary>
	<param name="caption">フラッシュの意味を説明する見出し文字列。</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.SynchronizedStamper">
	<summary>
 スレッドセーフに動作するための、<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StamperImpl"/> の同期ラッパーです。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.NullIntervalBlock">
	<summary>
 何も実行しない、区間の nullオブジェクトクラスです。
 タイムスタンプの取得が無効に設定されている場合に使用されます。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.IntervalBlock.#ctor(SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper,System.String)">
	<summary>
 関連付けられる <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> インスタンスと、区間の意味を説明する
 見出し文字列を指定して、<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.IntervalBlock"/> クラスの新しいインスタンスを
 初期化します。
 インスタンスが作成されるとすぐに、区間開始のタイムスタンプが取得されます。
 </summary>
	<param name="stamper">関連付けられる <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> インスタンス。</param>
	<param name="caption">区間の意味を説明する見出し文字列。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.IntervalBlock.Dispose">
	<summary>
 区間完了のタイムスタンプを取得し、このインスタンスを破棄します。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.IntervalBlock">
	<summary>
		<see cref="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper.Interval(System.String)"/> メソッドなどで取得される、using ブロックでの
 区間を定義する <see cref="T:System.IDisposable"/> オブジェクトです。
 オブジェクトの作成時と破棄時に、関連付けられている <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/>
 でタイムスタンプを取得します。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StampData.caption">
	<summary>タイムスタンプの意味を説明する見出し文字列</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StampData.elapsed">
	<summary>計測の経過時間</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StampData.difference">
	<summary>前回タイムスタンプ取得時との差分</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StampData.timeStamp">
	<summary>タイムスタンプ</summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StampData.#ctor(System.String,System.TimeSpan,System.TimeSpan)">
	<summary>
 タイムスタンプの意味を説明する見出し文字列と、計測の経過時間、
 前回タイムスタンプ取得時との差分を指定して、<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StampData"/>
 クラスの新しいインスタンスを初期化します。
 </summary>
	<param name="caption">タイムスタンプの意味を説明する見出し文字列。</param>
	<param name="elapsed">計測の経過時間。</param>
	<param name="difference">前回タイムスタンプ取得時との差分。</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.StampData">
	<summary>
 タイムスタンプの情報を保持するデータクラスです。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp">
	<summary>
 簡単なパフォーマンスチェックを実行するために、簡易な記述でタイムスタンプを
 ログ出力する機能を提供します。
 </summary>
	<remarks>
		<para>タイムスタンプの出力を有効にするには、構成ファイルで設定を
 有効にする必要があります。設定が無効になっている場合は、タイムスタンプの
 取得は実行されません。</para>
		<para>タイムスタンプは、アプリケーション全体で共通、各スレッド間で独立、
 および、ローカルな一部の区間でのみ存続するタイプの種類があります。
 各種タイムスタンプの取得は、<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> クラスのインスタンスが実行します。</para>
		<para>取得したタイムスタンプは、<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> のバッファサイズがオーバーするとき、
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> が破棄されるとき、または <see cref="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Flush(System.String)"/>
 が実行されるときに、ファイルに出力されます。明示的に破棄やフラッシュを行わない場合、
 ファイナライズメソッドにより自動的に出力されますが、このタイミングは予測できないため
 推奨されません。通常は明示的に実行するようにしてください。また、バッファオーバーによる
 自動フラッシュが行われると、区間の処理時間を計測している途中でフラッシュが実行されるなど、
 適切でない動作が発生する可能性があります。</para>
		<para>ひとつの <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> によるタイムスタンプは、一度にまとめてファイルに
 出力されます。</para>
		<para>タイムスタンプの取得には大きな負荷はかかりませんが、ファイルへのフラッシュには
 ある程度の負荷がかかります。また、出力対象のファイルはひとつだけになるため、複数の
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> が同時にフラッシュを行うと、スレッド間で処理が同期され、
 ブロックされる可能性があります。特に、特定の区間だけで使用するローカルな
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> は、即フラッシュすることが基本となるため注意してください。</para>
		<para><see cref="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Global"/> プロパティ以外で取得または作成される <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/>
 インスタンスは、スレッド間で同期されないためスレッドセーフではありません。基本的には、
 スレッド間で <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/> インスタンスを引き回さないようにしてください。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceReader.#ctor">
	<summary>
 ダミーコンストラクタ。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceReader.Initialize(System.String)">
	<summary>
 外部ファイルを読み込んで初期化を行う。
 </summary>
	<param name="fileName">読込み対象のファイル名。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceReader.GetEnumerator1">
	<summary>
 外部ファイルから読み込んだリソースに対する、列挙子を取得する。
 </summary>
	<returns>列挙子。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceReader.Close">
	<summary>
 外部ファイルを閉じる。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceReader.GetEnumerator">
	<summary>
 外部ファイルから読み込んだリソースに対する、列挙子を取得する。
 </summary>
	<returns>列挙子。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceReader.Dispose(System.Boolean)">
	<summary>
 リソース開放処理。
 </summary>
	<param name="disposing">マネージリソースとアンマネージリソース両方開放する場合 <c>True</c>、アンマネージリソースのみ開放する場合 <c>False</c>。</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.Globalization.ExternalFileResourceReader">
	<summary>
 外部形式のリソースを読み込むための基底 ResourceReader。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionOptionAttributeBase.Overlay(SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionOptionAttributeBase)">
	<summary>
 指定された属性から、null 以外に明示的に設定されているオプションだけを
 自身のインスタンスに上書きします。
 このメソッドは、派生属性クラスで実装する必要があります。
 </summary>
	<param name="overlayOption">上書きするオプションを保持する属性クラス。</param>
	<remarks>
		<para>このメソッドをオーバーライド際には、まず、<paramref name="overlay"/>
 パラメータを、派生クラスの型にキャストします。次に、<paramref name="overlay"/>
 のオプション値のうち、null 以外に設定されている（明示的に設定されている）
 オプション値だけを、自身のオプション値に上書きするように実装します。</para>
		<para>このメソッドは、オプションの継承と上書きを実行するために、
 <see cref="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionOptionAttributeBase.GetEffective``1(``0,System.Type,System.Reflection.MethodBase)"/> メソッドから自動的に呼び出されます。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionOptionAttributeBase.GetEffective``1(``0,System.Type,System.Reflection.MethodBase)">
	<summary>
 指定されたクラスのメソッドに最終的に適用される、<typeparamref name="AttributeType"/>
 のオプションを取得します。派生属性クラスで、自身のオプションを返却するメソッドを
 実装するために使用します。
 </summary>
	<typeparam name="T">取得するオプション属性の型。</typeparam>
	<param name="defaultOption">デフォルトのオプション。このオプションに対して、
 型またはメソッドに適用されているオプション情報が上書きされます。</param>
	<param name="type">オプション値を取得する対象の型。</param>
	<param name="method">オプション値を取得する対象のメソッド。</param>
	<returns>実際に有効となるオプション情報。このオブジェクトは、
 <paramref name="defaultOption"/> で渡されたオブジェクトに対して
 属性の設定情報を上書きしたオブジェクトです。</returns>
	<remarks>
		<para>派生属性クラスでは、オプションが全く適用されていない場合のデフォルトの
 オプション状態を作成し、このメソッドに引数として渡し、その結果を返却する
 静的なメソッドを提供します。<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptableBase"/> 派生クラスの
 割り込み処理メソッドでは、提供されたメソッドを使用して、最終的に有効となる
 オプションを取得します。</para>
		<para>派生属性クラスから引き渡すデフォルトのオプションには、通常、すべての
 オプション値に、null ではない有効なオプション値を設定するようにします。
 こうすることで、オプションが全く適用されていない場合でも、割り込み処理
 メソッドで、有効なオプション値が設定済みであることを前提にできます。</para>
		<para>オプションが適用されていない場合に特別な意味を持たせる必要がある場合には、
 このデフォルトのオプションで値を設定しないようにします（null 値のままにします）。</para>
		<para>オプションは、クラスおよびメソッドの継承階層をたどって適用されます。
 また、クラスに適用されているオプションは、メソッドのオプションのデフォルトとなります。
 メソッドにオプションが適用されている場合は、クラスのデフォルトを上書きします。
 通常は、共通の既定クラスでデフォルトのオプションを指定し、必要な場合のみ、
 個別のクラスまたはメソッドで上書きするようにします。</para>
	</remarks>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionOptionAttributeBase">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptableBase"/> 派生クラスとして、共通の割り込み処理を実装する
 共通の基底クラスを実装する際に、割り込み処理の動作に対してオプションを指定する余地が
 ある場合、この属性クラスの派生クラスを作成し、属性でオプションを設定できるようにします。
 </summary>
	<remarks>
		<para>オプションとは、例えば認証を実行するか、トランザクションをどのように開始するか等、
 派生クラスまたはそのメソッド単位で動作を変更する必要がある場合の、設定を示します。</para>
		<para>この属性クラスからルールに則り派生することで、基底クラスから派生クラスへ、
 またクラスのオプションからメソッド固有のオプションへ、自動的に継承されるオプションを
 作成することができます。</para>
		<para>認証や、トランザクション制御など、特定のカテゴリのオプションについて、
 ひとつの派生属性クラスを作成します。ひとつの属性クラスに、複数のオプション設定を
 含めることができます。</para>
		<para>各オプション値は、既定値が null のフィールドとして保持します。
 値型のオプションの場合は、<see cref="T:System.Nullable"/> を使用します。
 また、属性値を指定できるように、属性型のプロパティを定義します。</para>
		<para>既定値である null のオプション値は、既定のオプション値を上書きせずに、
 そのまま継承することを意味します。null 以外に明示的に設定したオプション値は、
 既定のオプションを上書きすることを意味します。これにより、特定のオプション値のみを
 上書きする形で、属性を適用することができます。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.EntityConstant.#ctor">
	<summary>
 ダミーコンストラクタ
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.EntityConstant.GetDateFunction">
	<summary>
 Entity の DATETIME型 項目に GETDATE() を指定する場合に、この値を使用してください。
 </summary>
	<remarks>この値と一致した場合、SQL組み立て時点でGETDATE()を埋め込みます。</remarks>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.EntityConstant">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 Entityに関係する、公開用の定数クラス。
 </summary>
	<author>kmasuda/SRS</author>
	<Version>
 001, 2015-10-28, 新規作成
 </Version>
	<remarks>Importの手間を省くため、あえてDataAccess名前空間に配置</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.NonEntityColumnAttribute.#ctor">
	<summary>
 特定のオプションを指定せずに新しいインスタンスを初期化します。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.NonEntityColumnAttribute">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 エンティティクラス内に存在するが、データ入出力と関係ないプロパティを指定する属性。
 </summary>
	<author>MASUDA Kazuya/SRS TS</author>
	<Version>
 001, 2015-08-05, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.ListItemPrimaryKeyModel.RowId">
	<summary>
 行ID
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.ListItemPrimaryKeyModel.PrimaryKeys">
	<summary>
 主キー情報
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.ListItemPrimaryKeyModel.Equals(System.Object)">
	<summary>
 比較対象と自分自身が等価のときはTrueを返す
 </summary>
	<param name="obj">比較対象オブジェクト</param>
	<returns>等価のとき<c>True</c>、そうでないとき<c>False</c>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.ListItemPrimaryKeyModel.GetHashCode">
	<summary>
 このインスタンスのハッシュコードを返します。
 </summary>
	<returns>このインスタンスのハッシュコード。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.ListItemPrimaryKeyModel.op_Equality(SRS.Standards.MvcFramework.Core.DataAccess.ListItemPrimaryKeyModel,SRS.Standards.MvcFramework.Core.DataAccess.ListItemPrimaryKeyModel)">
	<summary>
 二項演算子 = (等しい)
 </summary>
	<param name="c1">1つめの要素。</param>
	<param name="c2">2つめの要素。</param>
	<returns>等しいとき <c>True</c>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.ListItemPrimaryKeyModel.op_Inequality(SRS.Standards.MvcFramework.Core.DataAccess.ListItemPrimaryKeyModel,SRS.Standards.MvcFramework.Core.DataAccess.ListItemPrimaryKeyModel)">
	<summary>
 二項演算子 ＜＞ (等しくない)
 </summary>
	<param name="c1">1つめの要素。</param>
	<param name="c2">2つめの要素。</param>
	<returns>等しくないとき <c>True</c>。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.ListItemPrimaryKeyModel">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 一覧項目主キーモデルクラス
 </summary>
	<author>kmasuda/SRS</author>
	<Version>
 001, 2015-10-26, 新規作成
 </Version>
</member><member name="F:SRS.Standards.MvcFramework.Core.Facade.FacadeBase._rollback">
	<summary>
 ロールバック通知用
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.FacadeBase.InterceptMessage(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
	<summary>
 Facadeの入口となる処理、Facadeのメソッドが実行されると割り込みを行い初期処理を実行する。
 </summary>
	<param name="callMessage">実行されるメソッドの情報</param>
	<returns>メソッド実行の結果情報</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.FacadeBase.ProcessMessage(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
	<summary>
 Facadeのメインとなる処理、Facadeのメソッドが実行されると割り込みを行い各処理を実行する。
 </summary>
	<param name="callMessage">実行されるメソッドの情報</param>
	<returns>メソッド実行の結果情報</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.FacadeBase.OnMethodSucceeded(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Runtime.Remoting.Messaging.IMethodReturnMessage)">
	<summary>
 Facadeメソッド成功時処理、Facadeメソッド実行時の終了処理を実行する。
 </summary>
	<param name="callMessage">実行されるメソッドの情報</param>
	<param name="returnMessage">メソッド実行の結果情報</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.FacadeBase.CreateTransactionTimeout(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
	<summary>
 SQLトランザクション・コマンドのタイムアウト値を秒数で取得します。
 </summary>
	<param name="callMessage">実行されるメソッドの情報</param>
	<returns>タイムアウト値(秒数)</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.FacadeBase.CreateTransactionScope(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
	<summary>
 トランザクションスコープを作成
 </summary>
	<param name="callMessage">実行されるメソッドの情報</param>
	<returns>トランザクションスコープ</returns>
	<remarks>OMEソースをそのまま使用</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.FacadeBase.Rollback">
	<summary>
 ロールバック
 </summary>
	<remarks>この処理が実行されると、メソッド完了時にロールバックが行われる</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.FacadeBase.AssertModel(SRS.Standards.MvcFramework.Core.Facade.IViewModel)">
	<summary>
 与えられたモデルにエラーが設定されている場合、強制的にロールバックを行う。
 </summary>
	<param name="model">検査対象モデル</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.FacadeBase.Login(SRS.Standards.MvcFramework.Core.Security.AuthenticationModel)">
	<summary>
 ログイン処理
 </summary>
	<param name="authModel">認証管理モデル</param>
	<returns>認証管理モデル</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.FacadeBase.OnLogin(SRS.Standards.MvcFramework.Core.Security.AuthenticationModel)">
	<summary>
 ログイン処理(メイン処理)
 </summary>
	<param name="authModel">認証管理モデル</param>
	<returns>ログイン判定(ログインOKであればTrueを返す)</returns>
	<remarks>業務側で必要に応じて上書きを行う</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.FacadeBase.Authentication(SRS.Standards.MvcFramework.Core.Security.AuthenticationModel)">
	<summary>
 認証チェック
 </summary>
	<param name="authModel">認証管理モデル</param>
	<returns>認証管理モデル</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.FacadeBase.OnAuthentication(SRS.Standards.MvcFramework.Core.Security.AuthenticationModel)">
	<summary>
 認証チェック(メイン処理)
 </summary>
	<param name="authModel">認証管理モデル</param>
	<returns>認証チェック判定(True:OK)</returns>
	<remarks>業務側で必要に応じて上書きを行う</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.FacadeBase.SecurityCheck(SRS.Standards.MvcFramework.Core.Security.SecurityRegulationModel)">
	<summary>
 業務権限チェック
 </summary>
	<param name="securityModel">業務権限・業務規制管理モデル</param>
	<returns>業務権限・業務規制管理モデル</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.FacadeBase.OnSecurityCheck(SRS.Standards.MvcFramework.Core.Security.SecurityRegulationModel)">
	<summary>
 業務権限チェック(メイン処理)
 </summary>
	<param name="securityModel">業務権限・業務規制管理モデル</param>
	<returns>業務権限チェック結果(チェックＯＫ時:True)</returns>
	<remarks>業務側で必要に応じて上書きを行う</remarks>
</member><member name="T:SRS.Standards.MvcFramework.Core.Facade.FacadeBase">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 フレームワークで使用する各種設定を管理する為のクラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.Http.ApiExecutionFilterAttribute.OnActionExecuting(System.Web.Http.Controllers.HttpActionContext)">
	<summary>
 アクション メソッドの実行前イベント
 </summary>
	<param name="actionContext">フィルター コンテキスト</param>
	<remarks>前処理を実施</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Http.ApiExecutionFilterAttribute.OnActionExecuted(System.Web.Http.Filters.HttpActionExecutedContext)">
	<summary>
 アクション メソッドの実行後イベント
 </summary>
	<param name="actionExecutedContext">フィルター コンテキスト</param>
	<remarks>後処理を実施</remarks>
</member><member name="T:SRS.Standards.MvcFramework.Core.Http.ApiExecutionFilterAttribute">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 IApiControllerBase 用 の ActionFilter (クラス内の特定メソッドをフィルタとして実行させる)
 </summary>
	<author>MASUDA Kazuya/SRS TS</author>
	<Version>
 001, 2015-05-20, 新規作成
 </Version>
</member><member name="F:SRS.Standards.MvcFramework.Core.IO.CsvReader._reader">
	<summary>
 ファイル読み取り用。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.IO.CsvReader._separator">
	<summary>
 区切り文字。既定ではOS設定が使われます。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvReader.#ctor(System.String)">
	<summary>
 コンストラクタ。
 </summary>
	<param name="path">読み込むファイル名。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvReader.#ctor(System.String,System.Text.Encoding)">
	<summary>
 コンストラクタ。
 </summary>
	<param name="encoding">書き込む際の文字エンコード。既定ではUTF8。</param>
	<param name="path">読み込むファイル名。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvReader.#ctor(System.String,System.String)">
	<summary>
 コンストラクタ。
 </summary>
	<param name="separator">区切り文字。既定ではOS設定。</param>
	<param name="path">読み込むファイル名。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvReader.#ctor(System.String,System.Text.Encoding,System.String)">
	<summary>
 コンストラクタ。
 </summary>
	<param name="path">読み込むファイル名。</param>
	<param name="encoding">書き込む際の文字エンコード。既定ではUTF8。</param>
	<param name="separator">区切り文字。既定ではOS設定。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvReader.ReadLine">
	<summary>
 1行読込みます。
 </summary>
	<returns>CSV分割された、文字列配列。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvReader.IsIncompleteLine(System.String)">
	<summary>
 クォートが閉じていない、次の行に続いている行データかどうかを判定します。
 </summary>
	<param name="targetLine">検査対象の行データ。</param>
	<returns>不完全な行のとき <c>True</c>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvReader.Close">
	<summary>
 ファイルを閉じて、全てのリソースを開放します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvReader.EndOfStream">
	<summary>
 ファイルの末尾にいるかどうか。
 </summary>
	<returns>末尾の場合 <c>True</c>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvReader.ParseLine(System.String)">
	<summary>
 行を解析します。
 </summary>
	<param name="line">1行を表す文字列。</param>
	<returns>CSVとして列毎に分解された文字列配列。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvReader.ReadModels``1(System.String)">
	<summary>
 ファイルから読み込んでモデルに変換します。
 <see cref="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.WriteModels``1(System.String,System.Collections.Generic.IEnumerable{``0})"/> で書き込まれたCSVを読み込むことを想定しています。
 </summary>
	<typeparam name="T">モデルの型。</typeparam>
	<param name="filePath">読込先のファイル名。</param>
	<returns>モデルの集合。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvReader.ReadModels``1(System.String,System.Boolean)">
	<summary>
 ファイルから読み込んでモデルに変換します。
 <see cref="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.WriteModels``1(System.String,System.Collections.Generic.IEnumerable{``0})"/> で書き込まれたCSVを読み込むことを想定しています。
 </summary>
	<typeparam name="T">モデルの型。</typeparam>
	<param name="filePath">読込先のファイル名。</param>
	<param name="hasHeader">1行目がヘッダかどうか。ヘッダがある場合、ヘッダ名でプロパティ名と表示名を用いて、プロパティとの紐付けを行います。既定では <c>True</c>。</param>
	<returns>モデルの集合。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvReader.ReadModels``1(System.String,System.Text.Encoding)">
	<summary>
 ファイルから読み込んでモデルに変換します。
 <see cref="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.WriteModels``1(System.String,System.Collections.Generic.IEnumerable{``0})"/> で書き込まれたCSVを読み込むことを想定しています。
 </summary>
	<typeparam name="T">モデルの型。</typeparam>
	<param name="filePath">読込先のファイル名。</param>
	<param name="encoding">書き込む際の文字エンコード。既定ではUTF8。</param>
	<returns>モデルの集合。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvReader.ReadModels``1(System.String,System.String)">
	<summary>
 ファイルから読み込んでモデルに変換します。
 <see cref="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.WriteModels``1(System.String,System.Collections.Generic.IEnumerable{``0})"/> で書き込まれたCSVを読み込むことを想定しています。
 </summary>
	<typeparam name="T">モデルの型。</typeparam>
	<param name="filePath">読込先のファイル名。</param>
	<param name="separator">区切り文字。既定ではOS設定。</param>
	<returns>モデルの集合。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvReader.ReadModels``1(System.String,System.Text.Encoding,System.String)">
	<summary>
 ファイルから読み込んでモデルに変換します。
 <see cref="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.WriteModels``1(System.String,System.Collections.Generic.IEnumerable{``0})"/> で書き込まれたCSVを読み込むことを想定しています。
 </summary>
	<typeparam name="T">モデルの型。</typeparam>
	<param name="filePath">読込先のファイル名。</param>
	<param name="encoding">書き込む際の文字エンコード。既定ではUTF8。</param>
	<param name="separator">区切り文字。既定ではOS設定。</param>
	<returns>モデルの集合。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvReader.ReadModels``1(System.String,System.Boolean,System.Text.Encoding,System.String)">
	<summary>
 ファイルから読み込んでモデルに変換します。
 <see cref="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.WriteModels``1(System.String,System.Collections.Generic.IEnumerable{``0})"/> で書き込まれたCSVを読み込むことを想定しています。
 </summary>
	<typeparam name="T">モデルの型。</typeparam>
	<param name="filePath">読込先のファイル名。</param>
	<param name="hasHeader">1行目がヘッダかどうか。ヘッダがある場合、ヘッダ名でプロパティ名と表示名を用いて、プロパティとの紐付けを行います。既定では <c>True</c>。</param>
	<param name="encoding">書き込む際の文字エンコード。既定ではUTF8。</param>
	<param name="separator">区切り文字。既定ではOS設定。</param>
	<returns>モデルの集合。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvReader.Dispose(System.Boolean)">
	<summary>
 オブジェクトによって使用されている全てのリソースを開放します。
 </summary>
	<param name="disposing">廃棄中かどうか。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvReader.Dispose">
	<summary>
 オブジェクトによって使用されている全てのリソースを開放します。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.IO.CsvReader">
	<summary>
 CSV読込用のクラスです。
 OSの設定に従って既定の読込形式(区切り文字)が変化します。(Excel互換)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.IO.CsvWriter._writer">
	<summary>
 ファイル書き込み用。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.IO.CsvWriter._separator">
	<summary>
 区切り文字。既定ではOS設定が使われます。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.IO.CsvWriter._quoteMode">
	<summary>
 項目をダブルクォートで囲む方法を指定します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.#ctor(System.String,System.Boolean)">
	<summary>
 コンストラクタ。
 </summary>
	<param name="fileName">出力先のファイル名。</param>
	<param name="append">ファイルに追加するかどうか。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.#ctor(System.String,System.Boolean,SRS.Standards.MvcFramework.Core.IO.QuoteModeType)">
	<summary>
 コンストラクタ。
 </summary>
	<param name="fileName">出力先のファイル名。</param>
	<param name="append">ファイルに追加するかどうか。</param>
	<param name="quoteMode">項目のをダブルクォートで囲む方法を指定します。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
	<summary>
 コンストラクタ。
 </summary>
	<param name="fileName">出力先のファイル名。</param>
	<param name="append">ファイルに追加するかどうか。</param>
	<param name="encoding">書き込む際の文字エンコード。既定ではUTF8。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,SRS.Standards.MvcFramework.Core.IO.QuoteModeType)">
	<summary>
 コンストラクタ。
 </summary>
	<param name="fileName">出力先のファイル名。</param>
	<param name="append">ファイルに追加するかどうか。</param>
	<param name="encoding">書き込む際の文字エンコード。既定ではUTF8。</param>
	<param name="quoteMode">項目のをダブルクォートで囲む方法を指定します。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.#ctor(System.String,System.Boolean,System.String)">
	<summary>
 コンストラクタ。
 </summary>
	<param name="fileName">出力先のファイル名。</param>
	<param name="append">ファイルに追加するかどうか。</param>
	<param name="separator">区切り文字。既定ではOS設定。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.#ctor(System.String,System.Boolean,System.String,SRS.Standards.MvcFramework.Core.IO.QuoteModeType)">
	<summary>
 コンストラクタ。
 </summary>
	<param name="fileName">出力先のファイル名。</param>
	<param name="append">ファイルに追加するかどうか。</param>
	<param name="separator">区切り文字。既定ではOS設定。</param>
	<param name="quoteMode">項目のをダブルクォートで囲む方法を指定します。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.String)">
	<summary>
 コンストラクタ。
 </summary>
	<param name="fileName">出力先のファイル名。</param>
	<param name="append">ファイルに追加するかどうか。</param>
	<param name="encoding">書き込む際の文字エンコード。既定ではUTF8。</param>
	<param name="separator">区切り文字。既定ではOS設定。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.String,SRS.Standards.MvcFramework.Core.IO.QuoteModeType)">
	<summary>
 コンストラクタ。
 </summary>
	<param name="fileName">出力先のファイル名。</param>
	<param name="append">ファイルに追加するかどうか。</param>
	<param name="encoding">書き込む際の文字エンコード。既定ではUTF8。</param>
	<param name="separator">区切り文字。既定ではOS設定。</param>
	<param name="quoteMode">項目のをダブルクォートで囲む方法を指定します。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.Write(System.Object)">
	<summary>
 1つの値を書込む
 </summary>
	<param name="param">列要素。</param>
	<remarks>自動的に引用符で括り、Nothingは空文字列になります。</remarks>
</member><member name="F:SRS.Standards.MvcFramework.Core.IO.CsvWriter._newLine">
	<summary>
 現在の書き込み位置が行頭の場合 <c>True</c>。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.WriteLine(System.Object[])">
	<summary>
 CSVの行を書込む
 </summary>
	<param name="params">1行に含まれる列要素。いくつでも指定可能です。</param>
	<remarks>自動的に引用符で括ります</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.Close">
	<summary>
 対象ファイルを閉じます。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.Flush">
	<summary>
 バッファの内容を全て書き込み、バッファを空にします。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.WriteModels``1(System.String,System.Collections.Generic.IEnumerable{``0})">
	<summary>
 モデルをファイルに書き込みます。
 </summary>
	<typeparam name="T">モデルの型。</typeparam>
	<param name="filePath">出力先のファイル名。</param>
	<param name="models">出力するモデルの集合。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.WriteModels``1(System.String,System.Collections.Generic.IEnumerable{``0},System.String)">
	<summary>
 モデルをファイルに書き込みます。
 </summary>
	<typeparam name="T">モデルの型。</typeparam>
	<param name="filePath">出力先のファイル名。</param>
	<param name="models">出力するモデルの集合。</param>
	<param name="separator">区切り文字。既定ではOS設定。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.WriteModels``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Text.Encoding)">
	<summary>
 モデルをファイルに書き込みます。
 </summary>
	<typeparam name="T">モデルの型。</typeparam>
	<param name="filePath">出力先のファイル名。</param>
	<param name="models">出力するモデルの集合。</param>
	<param name="encoding">書き込む際の文字エンコード。既定ではUTF8。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.WriteModels``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Text.Encoding,System.String)">
	<summary>
 モデルをファイルに書き込みます。
 </summary>
	<typeparam name="T">モデルの型。</typeparam>
	<param name="filePath">出力先のファイル名。</param>
	<param name="models">出力するモデルの集合。</param>
	<param name="encoding">書き込む際の文字エンコード。既定ではUTF8。</param>
	<param name="separator">区切り文字。既定ではOS設定。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.WriteModels``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Text.Encoding,System.String)">
	<summary>
 モデルをファイルに書き込みます。
 </summary>
	<typeparam name="T">モデルの型。</typeparam>
	<param name="filePath">出力先のファイル名。</param>
	<param name="models">出力するモデルの集合。</param>
	<param name="hasHeader">1行目がヘッダかどうか。既定では <c>True</c>。</param>
	<param name="encoding">書き込む際の文字エンコード。既定ではUTF8。</param>
	<param name="separator">区切り文字。既定ではOS設定。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.WriteModels``1(System.String,System.Collections.Generic.IEnumerable{``0},SRS.Standards.MvcFramework.Core.IO.QuoteModeType)">
	<summary>
 モデルをファイルに書き込みます。
 </summary>
	<typeparam name="T">モデルの型。</typeparam>
	<param name="filePath">出力先のファイル名。</param>
	<param name="models">出力するモデルの集合。</param>
	<param name="quoteMode">項目のをダブルクォートで囲む方法を指定します。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.WriteModels``1(System.String,System.Collections.Generic.IEnumerable{``0},System.String,SRS.Standards.MvcFramework.Core.IO.QuoteModeType)">
	<summary>
 モデルをファイルに書き込みます。
 </summary>
	<typeparam name="T">モデルの型。</typeparam>
	<param name="filePath">出力先のファイル名。</param>
	<param name="models">出力するモデルの集合。</param>
	<param name="separator">区切り文字。既定ではOS設定。</param>
	<param name="quoteMode">項目のをダブルクォートで囲む方法を指定します。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.WriteModels``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Text.Encoding,SRS.Standards.MvcFramework.Core.IO.QuoteModeType)">
	<summary>
 モデルをファイルに書き込みます。
 </summary>
	<typeparam name="T">モデルの型。</typeparam>
	<param name="filePath">出力先のファイル名。</param>
	<param name="models">出力するモデルの集合。</param>
	<param name="encoding">書き込む際の文字エンコード。既定ではUTF8。</param>
	<param name="quoteMode">項目のをダブルクォートで囲む方法を指定します。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.WriteModels``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Text.Encoding,System.String,SRS.Standards.MvcFramework.Core.IO.QuoteModeType)">
	<summary>
 モデルをファイルに書き込みます。
 </summary>
	<typeparam name="T">モデルの型。</typeparam>
	<param name="filePath">出力先のファイル名。</param>
	<param name="models">出力するモデルの集合。</param>
	<param name="encoding">書き込む際の文字エンコード。既定ではUTF8。</param>
	<param name="separator">区切り文字。既定ではOS設定。</param>
	<param name="quoteMode">項目のをダブルクォートで囲む方法を指定します。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.WriteModels``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Text.Encoding,System.String,SRS.Standards.MvcFramework.Core.IO.QuoteModeType)">
	<summary>
 モデルをファイルに書き込みます。
 </summary>
	<typeparam name="T">モデルの型。</typeparam>
	<param name="filePath">出力先のファイル名。</param>
	<param name="models">出力するモデルの集合。</param>
	<param name="hasHeader">1行目がヘッダかどうか。既定では <c>True</c>。</param>
	<param name="encoding">書き込む際の文字エンコード。既定ではUTF8。</param>
	<param name="separator">区切り文字。既定ではOS設定。</param>
	<param name="quoteMode">項目のをダブルクォートで囲む方法を指定します。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.WriteModels``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean,System.Text.Encoding,System.String)">
	<summary>
 モデルをファイルに書き込みます。
 </summary>
	<typeparam name="T">モデルの型。</typeparam>
	<param name="filePath">出力先のファイル名。</param>
	<param name="models">出力するモデルの集合。</param>
	<param name="hasHeader">1行目がヘッダかどうか。既定では <c>True</c>。</param>
	<param name="append">ファイルに追加するかどうか。</param>
	<param name="encoding">書き込む際の文字エンコード。既定ではUTF8。</param>
	<param name="separator">区切り文字。既定ではOS設定。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.WriteModels``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean,System.Text.Encoding,System.String,SRS.Standards.MvcFramework.Core.IO.QuoteModeType)">
	<summary>
 モデルをファイルに書き込みます。
 </summary>
	<typeparam name="T">モデルの型。</typeparam>
	<param name="filePath">出力先のファイル名。</param>
	<param name="models">出力するモデルの集合。</param>
	<param name="hasHeader">1行目がヘッダかどうか。既定では <c>True</c>。</param>
	<param name="append">ファイルに追加するかどうか。</param>
	<param name="encoding">書き込む際の文字エンコード。既定ではUTF8。</param>
	<param name="separator">区切り文字。既定ではOS設定。</param>
	<param name="quoteMode">項目のをダブルクォートで囲む方法を指定します。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.Dispose(System.Boolean)">
	<summary>
 オブジェクトによって使用されている全てのリソースを開放します。
 </summary>
	<param name="disposing">廃棄中かどうか。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.CsvWriter.Dispose">
	<summary>
 オブジェクトによって使用されている全てのリソースを開放します。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.IO.CsvWriter">
	<summary>
 CSV出力用のクラスです。
 OSの設定に従って既定の出力形式(区切り文字)が変化します。(Excel互換)
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.ByteFixedDataWriter.#ctor">
	<summary>
 ダミーコンストラクタ
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.ByteFixedDataWriter.WriteModels``1(System.String,System.Collections.Generic.IEnumerable{``0})">
	<summary>
 固定長ファイルを書込みます。
 </summary>
	<typeparam name="T">固定長レコード型。</typeparam>
	<param name="fileName">書き込むファイルのパス。</param>
	<param name="data">書き込む固定長データ。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.ByteFixedDataWriter.WriteModels``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Text.Encoding)">
	<summary>
 固定長ファイルを書込みます。
 </summary>
	<typeparam name="T">固定長レコード型。</typeparam>
	<param name="fileName">書き込むファイルのパス。</param>
	<param name="data">書き込む固定長データ。</param>
	<param name="encoding">入出力用のエンコーディング。多バイト文字の変換及び、長さ計算にも使われます。既定値は CP932(Shift-JIS)。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.ByteFixedDataWriter.GetRecordLine``1(``0,System.Text.Encoding)">
	<summary>
 データレコードを固定長のバイト列に変換します。
 </summary>
	<typeparam name="T">データレコードの型。</typeparam>
	<param name="target">対象データレコード。</param>
	<param name="encoding">入出力用のエンコーディング。</param>
	<returns>保持しているデータのバイト列。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.ByteFixedDataWriter.GetNewLine(System.Text.Encoding)">
	<summary>
 改行のバイト列を取得します。
 </summary>
	<param name="encoding">入出力用のエンコーディング。</param>
	<returns>入出力エンコーディングでの改行文字のバイト列(CRLF)。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.ByteFixedDataWriter.ToByteValue(System.String,System.Int32,SRS.Standards.MvcFramework.Core.IO.PaddingType,System.Text.Encoding)">
	<summary>
 書き込み用に文字列をバイト列に変換します。
 固定長から溢れた文字は捨てられます。
 </summary>
	<param name="value">フィールドに設定する値。</param>
	<param name="length">固定バイト長。</param>
	<param name="padding">固定長データの埋め方。</param>
	<param name="encoding">入出力用のエンコーディング。</param>
	<returns>書き込み用バイト列。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.IO.ByteFixedDataWriter">
	<summary>
 固定長データの書込機能を提供します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.#ctor">
	<summary>
 ダミーコンストラクタ
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.LiteralSeparate">
	<summary>
 セパレート文字列
 </summary>
	<remarks>
 Hashキーのセパレートに使用
 </remarks>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.LiteralDapperParameter">
	<summary>
 Dapperのパラメータ文字列
 </summary>
	<remarks>
 Dapperのパラメータ生成・判定に使用
 </remarks>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.LiteralHalfSpace">
	<summary>
 半角スペース
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.LiteralHalfSpaceChar">
	<summary>
 半角スペース(Char)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.LiteralCRLF">
	<summary>
 改行
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.LiteralSingleQuotes">
	<summary>
 シングルコーテーション
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.LiteralComma">
	<summary>
 カンマ
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.LiteralCommaChar">
	<summary>
 カンマ(Char)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.LiteralPeriod">
	<summary>
 ピリオド
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.LiteralBraceBegin">
	<summary>
 中括弧(開始)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.LiteralBraceEnd">
	<summary>
 中括弧(終了)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.LiteralYenMark">
	<summary>
 円マーク(\)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.LiteralSlash">
	<summary>
 スラッシュ(/)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.LiteralGet">
	<summary>
 GET文字列
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.LiteralPost">
	<summary>
 POST文字列
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.LiteralInsert">
	<summary>
 INSERT文字列
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.LiteralUpdate">
	<summary>
 UPDATE文字列
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.LiteralDelete">
	<summary>
 DELETE文字列
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.LiteralFrom">
	<summary>
 FROM文字列
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.LiteralInto">
	<summary>
 INTO文字列
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.LiteralWhere">
	<summary>
 WHERE文字列
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.ParamLogString">
	<summary>
 パラメータログ出力用文字列
 </summary>
	<remarks>パラメータログ出力用文字列</remarks>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.SurroundString">
	<summary>
 文字列を指定された文字で囲む文字列
 </summary>
	<remarks>文字列を指定された文字で囲む文字列</remarks>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.DapperParamString">
	<summary>
 Dapper用パラメータ定義文字列
 </summary>
	<remarks> Dapper用パラメータ定義文字列</remarks>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.ExceptionLoggerName">
	<summary>
 例外ログ出力のログ名
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.SqlLoggerName">
	<summary>
 SQLログのログ名
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.RequestLoggerName">
	<summary>
 リクエストログのログ名
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.SysTraceLoggerName">
	<summary>
 システムトレースログのログ名
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.UserFacadeTraceLoggerName">
	<summary>
 ユーザ(Facade)トレースログのログ名
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.UserRuleTraceLoggerName">
	<summary>
 ユーザ(Rule)トレースログのログ名
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.AuthLoggerName">
	<summary>
 認証ログのログ名
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.BusinessSecurityLoggerName">
	<summary>
 業務セキュリティログのログ名
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.BusinessLoggerName">
	<summary>
 業務ログのログ名
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.ExceptionMessageConfigurationSection">
	<summary>
 ExceptionMessageConfigurationのセクション名
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.MvcFrameworkConfigurationSection">
	<summary>
 MvcFrameworkConfigurationのセクション名
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.DataSelectConfigurationSection">
	<summary>
 DataSelectConfigurationのセクション名
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.TimeoutConfigurationSection">
	<summary>
 TimeoutConfigurationのセクション名
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.TransactionTimeoutConfigurationName">
	<summary>
 Timeout.config でトランザクションタイムアウトに設定するName
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.FormAuthenticationSection">
	<summary>
 Form認証のセクション名
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.DefaultTransactionsSection">
	<summary>
 トランザクションのデフォルト設定のセクション名
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.DefaultTransactionsTimeout">
	<summary>
 トランザクションのデフォルトのタイムアウト時間(分)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.FacadeCurrentScopeName">
	<summary>
 Facadeのカレントスコープ名
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.FacadeTransactionScopeName">
	<summary>
 Facadeのトランザクションスコープ名
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.FacadeSqlTimeoutName">
	<summary>
 FacadeのSQLタイムアウト名
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.FacadeMaxNestCount">
	<summary>
 Facadeの最大再帰実行回数
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.FacadeNextErrorMessage">
	<summary>
 Facadeの最大再帰実行時エラーメッセージ
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.LogMenuId">
	<summary>
 ログ項目名(業務ＩＤ(メニューＩＤ))
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.ViewLocationFormat1">
	<summary>
 ビューのロケーションフォーマット文字列１
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.ViewLocationFormat2">
	<summary>
 ビューのロケーションフォーマット文字列２
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.RouteGroup">
	<summary>
 ルート項目名(業務グループ)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.RouteMenuId">
	<summary>
 ルート項目名(業務ＩＤ(メニューＩＤ))
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.RouteController">
	<summary>
 ルート項目名(コントローラ)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.RoutingFormatBusiness">
	<summary>
 ルーティング用のフォーマット(業務用)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.RoutingFormatCommon">
	<summary>
 ルーティング用のフォーマット(共通用)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.ActionFormatBusiness">
	<summary>
 Action設定用のフォーマット(業務用)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.ActionFormatCommon">
	<summary>
 Action設定のフォーマット(共通用)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.UploadTempPathFormat">
	<summary>
 アップロードファイル保存用フォルダ名設定用フォーマット
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.HtmlTagInput">
	<summary>
 Input(HTMLタグ)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.HtmlTagDiv">
	<summary>
 Div(HTMLタグ)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.HtmlTagLabel">
	<summary>
 Label(HTMLタグ)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.HtmlAttrMaxLength">
	<summary>
 最大桁数(HTML属性)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.HtmlAttrDisabled">
	<summary>
 入力不可(HTML属性)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.HtmlAttrCssClass">
	<summary>
 CSSクラス(HTML属性)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.HtmlAttrId">
	<summary>
 ID(HTML属性)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.HtmlAttrName">
	<summary>
 NAME(HTML属性)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.HtmlAttrValue">
	<summary>
 value(HTML属性)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.HtmlAttrAction">
	<summary>
 Action(HTML属性)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.HtmlAttrType">
	<summary>
 Type(HTML属性)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.HtmlAttrAccept">
	<summary>
 Accept(HTML属性)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.HtmlAttrSize">
	<summary>
 Size(HTML属性)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.HtmlAttrTypeSubmit">
	<summary>
 Type(HTML属性)のsubmit
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.HtmlAttrTypeButton">
	<summary>
 Type(HTML属性)のbutton
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.HtmlAttrTypeHidden">
	<summary>
 Type(HTML属性)のhidden
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.HtmlAttrTypeFile">
	<summary>
 Type(HTML属性)のfile
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.HtmlAttrTabIndex">
	<summary>
 TabIndex(HTML属性)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.MvcConstant.HtmlAttrFor">
	<summary>
 For(HTML属性)
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.Constant.MvcConstant">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 MVCフレームワーク定数基底クラス
 必要に応じてMvcConfigurationに移動
 (参照範囲は内容に応じて決定)
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypePropertiesConfiguration.#ctor">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypePropertiesConfiguration"/> クラスの新しいインスタンスを
 初期化します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypePropertiesConfiguration.#ctor(System.String)">
	<summary>
 作成する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypePropertiesConfiguration"/> の名前を指定して、
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypePropertiesConfiguration"/> クラスの新しいインスタンスを
 初期化します。
 </summary>
	<param name="elementName">作成する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypePropertiesConfiguration"/>
 の名前。</param>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypePropertiesConfiguration.Type">
	<summary>
 型情報を取得または設定します。
 </summary>
	<value>型情報。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypePropertiesConfiguration.Properties">
	<summary>
 プロパティ設定のコレクションである <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationCollection"/>
 を、取得または設定します。
 </summary>
	<value>プロパティ設定のコレクション。</value>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypePropertiesConfiguration">
	<summary>
 汎用的に使用される、型情報とプロパティのコレクションを含む構成要素です。
 </summary>
	<remarks>
		<para>この構成要素は、type属性による型の指定と、その型に適用されるプロパティ
 情報である property要素を子要素として持ちます。型情報とプロパティのコレクション
 を設定する形式の構成要素として、汎用的に使用できます。</para>
		<para>通常は、この構成要素を含む、親の構成要素または構成セクションの、
 プロパティの型として使用します。</para>
	</remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationCollection.Item(System.String)">
	<summary>
 指定された名前のプロパティに対する構成要素である <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration"/>
 を取得します。
 </summary>
	<param name="name">構成要素を取得する対象のプロパティ名。</param>
	<returns>指定されたプロパティ名に対応する構成要素である
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration"/></returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationCollection.Item(System.Int32)">
	<summary>
 指定されたインデックス位置の構成要素である <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration"/>
 を取得します。
 </summary>
	<param name="index">プロパティの構成要素を取得するインデックス位置。</param>
	<returns>指定されたインデックス位置の構成要素である
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration"/></returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationCollection.CreateNewElement">
	<summary>
 新しい <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration"/> を作成します。
 </summary>
	<returns>新しい <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration"/>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationCollection.CreateNewElement(System.String)">
	<summary>
 作成する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration"/> の名前を指定して、
 新しい <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration"/> を作成します。
 </summary>
	<param name="elementName">作成する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration"/> の名前。</param>
	<returns>新しい <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration"/>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationCollection.GetElementKey(System.Configuration.ConfigurationElement)">
	<summary>
 指定した構成要素の要素キーを取得します。
 </summary>
	<param name="element">キーを返す <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration"/>。</param>
	<returns>指定した <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration"/> のキーとして動作する
 <see cref="T:System.Object"/>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationCollection.GetEnumerator1">
	<summary>
 列挙子を取得します。
 </summary>
	<returns>列挙子。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationCollection">
	<summary>
 汎用的に使用される、プロパティ設定要素のコレクションです。
 </summary>
	<remarks>
		<para>この構成要素コレクションは、プロパティの設定要素を子要素として持ちます。
 プロパティのコレクションを設定する形式の構成要素コレクションとして、汎用的に使用できます。</para>
		<para>通常は、この構成要素を含む、親の構成要素または構成セクションの、
 プロパティの型として使用します。</para>
		<para>このクラスは、<see cref="T:System.Configuration.ConfigurationElementCollection"/> から派生します。
 構成情報を読み込むために、最小限の機能を実装しています。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration.#ctor">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration"/> クラスの新しいインスタンスを
 初期化します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration.#ctor(System.String)">
	<summary>
 作成する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration"/> の名前を指定して、
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration"/> クラスの新しいインスタンスを
 初期化します。
 </summary>
	<param name="elementName">作成する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration"/>
 の名前。</param>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration.Name">
	<summary>
 プロパティ名を取得または設定します。
 </summary>
	<value>プロパティ名。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration.SettingValue">
	<summary>
 プロパティの設定値を取得または設定します。
 </summary>
	<value>プロパティの設定値。これは value属性の値です。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration.Type">
	<summary>
 プロパティの型を取得または設定します。
 </summary>
	<value>プロパティの型。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration.EnableTypeConfig">
	<summary>
 このプロパティに設定するオブジェクトに、型に対するプロパティ設定を
 適用するかどうかを指定する値を取得または設定します。
 </summary>
	<value>型に対するプロパティ設定を適用するかどうかを指定する値。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration.NamedConfig">
	<summary>
 このプロパティに設定するオブジェクトに、名前つきのプロパティ設定を
 適用する場合に、適用するプロパティ設定の名称を取得または設定します。
 </summary>
	<value>名前つきの設定名称。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration.Value">
	<summary>
 プロパティ値を取得します。通所は value 属性で指定された設定値です。
 type属性等の追加属性が指定されていた場合は、それらの情報を含む
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyValueInfo"/> が返されます。
 </summary>
	<value>プロパティ値。通所は value 属性で指定された設定値です。</value>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration">
	<summary>
 汎用的に使用される、プロパティ設定要素です。
 </summary>
	<remarks>
		<para>この構成要素は、特定の名前つきプロパティの設定要素です。
 プロパティを設定する形式の構成要素として、汎用的に使用できます。</para>
		<para>通常は、この構成要素を含む、親の構成要素または構成セクションの、
 プロパティの型として使用します。</para>
	</remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyValueInfo.Configuration">
	<summary>
 元となるプロパティの構成設定を取得または設定します。
 </summary>
	<value>元となるプロパティの構成設定。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyValueInfo.Value">
	<summary>
 元となるプロパティの構成設定の、value属性の値を取得または設定します。
 </summary>
	<value>元となるプロパティの構成設定の、value属性の値。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyValueInfo.Type">
	<summary>
 元となるプロパティの構成設定の、type属性の値を取得または設定します。
 </summary>
	<value>元となるプロパティの構成設定の、type属性の値。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyValueInfo.EnableTypeConfig">
	<summary>
 元となるプロパティの構成設定の、enableTypeConfig属性の値を取得または設定します。
 </summary>
	<value>元となるプロパティの構成設定の、enableTypeConfig属性の値。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyValueInfo.NamedConfig">
	<summary>
 元となるプロパティの構成設定の、namedConfig属性の値を取得または設定します。
 </summary>
	<value>元となるプロパティの構成設定の、namedConfig属性の値。</value>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyValueInfo">
	<summary>
 プロパティの設定で、type 等の追加情報が設定されている場合に、その設定情報を
 表します。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Security.BusinessSecurityType.NoAuthentication">
	<summary>
 システム使用権限無し
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Security.BusinessSecurityType.Authority">
	<summary>
 使用可能
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Security.BusinessSecurityType.NoSecurity">
	<summary>
 業務権限なし
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Security.BusinessSecurityType.Regulation">
	<summary>
 業務規制中
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.Security.BusinessSecurityType">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 業務権限・規制管理用の判別を行う列挙型
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceManager.#ctor(System.String)">
	<summary>
 初期化処理。
 </summary>
	<param name="baseName">リソースファイル名の基準となる文字列。 {baseName}_{言語名}.json が読込まれます。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceManager.#ctor(System.String,System.Globalization.CultureInfo)">
	<summary>
 初期化処理。
 </summary>
	<param name="baseName">リソースファイル名の基準となる文字列。 {baseName}_{言語名}.json が読込まれます。</param>
	<param name="cultureInfo">言語情報。指定しない場合は現在のUI言語が使用されます。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceManager.GetResourceReader">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceReader"/>を新しく作成して返します。
 </summary>
	<returns>新規作成した <see cref="T:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceReader"/> のインスタンス。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceManager">
	<summary>
 Json形式のリソースファイルを読み込むための <see cref="T:System.Resources.ResourceManager"/> 。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceReader.Initialize(System.String)">
	<summary>
 初期化を実行します。
 </summary>
	<param name="fileName">読み込むファイルのパス。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceReader.Initialize(System.String,System.String)">
	<summary>
 初期化を実行します。
 </summary>
	<param name="fileName">読み込むファイルのパス。</param>
	<param name="commentFilePath">読み込むコメントファイルのパス。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceReader.Close">
	<summary>
 ファイルを閉じます。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceReader.GetEnumerator">
	<summary>
 読み込んだリソースを繰り返し処理するための <see cref="T:System.Collections.IDictionaryEnumerator"/> を取得します。
 </summary>
	<returns>新規作成した <see cref="T:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceEnumerator"/> のインスタンス。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceReader">
	<summary>
 Json形式のリソースファイルを読み込むための <see cref="T:System.Resources.ResourceReader"/> 。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceEnumerator.#ctor(System.String)">
	<summary>
 初期化処理。
 </summary>
	<param name="fileName">読み込むファイルのパス。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceEnumerator.#ctor(System.String,System.String)">
	<summary>
 初期化処理。
 </summary>
	<param name="fileName">読み込むファイルのパス。</param>
	<param name="commentFilePath">読み込むコメントファイルのパス。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceEnumerator.Close">
	<summary>
 開いているファイルを閉じます。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceEnumerator.ParseNextLine">
	<summary>
 次の行をパースします。
 </summary>
	<returns>パースが成功した場合 <c>True</c>、失敗した場合(終端に到達) <c>False</c> 。</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceEnumerator.Entry">
	<summary>
 読み込んだリソースを取得します。
 </summary>
	<value>読み込んだキーと値の組を、<see cref="T:System.Collections.DictionaryEntry"/> として返します。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceEnumerator.Key">
	<summary>
 読み込んだリソースのキーを取得します。
 </summary>
	<value>読み込んだリソースのキー。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceEnumerator.Value">
	<summary>
 読み込んだリソースの値を取得します。
 </summary>
	<value>読み込んだリソースの値。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceEnumerator.Comment">
	<summary>
 読み込んだリソースのコメントを取得します。
 </summary>
	<value>読み込んだリソースのコメント。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceEnumerator.Current">
	<summary>
 現在読み込んでいる行のリソースの値を取得します。
 </summary>
	<value>読み込んだリソースの値。</value>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceEnumerator.MoveNext">
	<summary>
 読み込んだリソースのキーを取得します。
 </summary>
	<returns>読込みが成功したか。成功した場合 <c>True</c> 、失敗または終端の場合は <c>False</c> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceEnumerator.Reset">
	<summary>
 読込み位置をリセットします。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.Globalization.JsonResourceEnumerator">
	<summary>
 Jsonを Traverse するための Enumerator
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Cryptography.HashUtility.GetStringHash(System.String)">
	<summary>
 指定した文字列のハッシュ値を取得します。
 </summary>
	<param name="text">ハッシュ値を求める文字列。</param>
	<returns>計算されたハッシュ値の16進数表現。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Cryptography.HashUtility.GetStringHash(System.String,SRS.Standards.MvcFramework.Core.Cryptography.HashType)">
	<summary>
 指定した文字列のハッシュ値を取得します。
 </summary>
	<param name="text">ハッシュ値を求める文字列。</param>
	<param name="hashType">使用するハッシュアルゴリズム。既定は <see cref="F:SRS.Standards.MvcFramework.Core.Cryptography.HashType.SHA256"/> 。</param>
	<returns>計算されたハッシュ値の16進数表現。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Cryptography.HashUtility.GetStringHash(System.String,System.Text.Encoding)">
	<summary>
 指定した文字列のハッシュ値を取得します。
 </summary>
	<param name="text">ハッシュ値を求める文字列。</param>
	<param name="encoding">ハッシュを計算する際に使用する文字エンコード。既定は <see cref="P:System.Text.Encoding.Unicode"/> 。</param>
	<returns>計算されたハッシュ値の16進数表現。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Cryptography.HashUtility.GetStringHash(System.String,SRS.Standards.MvcFramework.Core.Cryptography.HashType,System.Text.Encoding)">
	<summary>
 指定した文字列のハッシュ値を取得します。
 </summary>
	<param name="text">ハッシュ値を求める文字列。</param>
	<param name="hashType">使用するハッシュアルゴリズム。既定は <see cref="F:SRS.Standards.MvcFramework.Core.Cryptography.HashType.SHA256"/> 。</param>
	<param name="encoding">ハッシュを計算する際に使用する文字エンコード。既定は <see cref="P:System.Text.Encoding.Unicode"/> 。</param>
	<returns>計算されたハッシュ値の16進数表現。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Cryptography.HashUtility.GetFileHash(System.String)">
	<summary>
 指定したファイルのハッシュ値を取得します。アルゴリズムはSHA256を使用します。
 </summary>
	<param name="filePath">ハッシュ値を求めるファイルのパス。存在しない場合、 <see cref="T:System.IO.FileNotFoundException"/> が発生します。</param>
	<returns>計算されたハッシュ値の16進数表現。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Cryptography.HashUtility.GetFileHash(System.String,SRS.Standards.MvcFramework.Core.Cryptography.HashType)">
	<summary>
 指定したファイルのハッシュ値を取得します。
 </summary>
	<param name="filePath">ハッシュ値を求めるファイルのパス。存在しない場合、 <see cref="T:System.IO.FileNotFoundException"/> が発生します。</param>
	<param name="hashType">使用するハッシュアルゴリズム。既定は <see cref="F:SRS.Standards.MvcFramework.Core.Cryptography.HashType.SHA256"/> 。</param>
	<returns>計算されたハッシュ値の16進数表現。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Cryptography.HashUtility">
	<summary>
 ハッシュ値の計算に関するユーティリティを提供します。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.OracleParameter.Value">
	<summary>値。</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.OracleParameter.DbType">
	<summary>型。</summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.OracleParameter.#ctor(System.Object)">
	<summary>
 コンストラクタ。
 </summary>
	<param name="value">値。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.OracleParameter.AddParameter(System.Data.IDbCommand,System.String)">
	<summary>
 指定したコマンドにパラメータを追加します。
 </summary>
	<param name="command">コマンド。</param>
	<param name="name">パラメータ名。</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.OracleParameter">
	<summary>
 Oracle 用のパラメータ。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Configuration.ExtensionConfigurationManager.#ctor">
	<summary>
 ダミーコンストラクタ
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Configuration.ExtensionConfigurationManager.SyncRoot">
	<summary>
 排他ロック制御用オブジェクト
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Configuration.ExtensionConfigurationManager._initializedConfig">
	<summary>
 初期化判定用
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Configuration.ExtensionConfigurationManager.GetExceptionMessage(System.Exception)">
	<summary>
 指定された例外に対応するメッセージの設定を取得します。
 </summary>
	<param name="exception">例外</param>
	<returns>メッセージの設定</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Configuration.ExtensionConfigurationManager.GetExceptionMessageDetail(System.Collections.Generic.IEnumerable{SRS.Standards.MvcFramework.Core.Configuration.ExceptionMessageConfiguration},System.Exception)">
	<summary>
 指定された例外に対応するメッセージの設定を取得します。(詳細取得用)
 </summary>
	<param name="messagelist">設定リスト</param>
	<param name="exception">例外</param>
	<returns>メッセージの設定</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.ExtensionConfigurationManager.Config">
	<summary>
 MVCフレームワークの各種設定を取得します。
 </summary>
	<returns>各種設定内容</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Configuration.ExtensionConfigurationManager.UserConfig``1">
	<summary>
 任意の設定を取得します。
 </summary>
	<typeparam name="T">設定の型。</typeparam>
	<returns>各種設定内容</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Configuration.ExtensionConfigurationManager.GetDataSelectQuery(System.String)">
	<summary>
 指定されたデータセレクト名に対応するSQL文を取得します。
 </summary>
	<param name="selectName">例外</param>
	<returns>SQL文</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Configuration.ExtensionConfigurationManager.GetDataSelectQueryBody(System.Collections.Generic.IEnumerable{SRS.Standards.MvcFramework.Core.Configuration.DataSelectConfiguration})">
	<summary>
 与えられた <see cref="T:SRS.Standards.MvcFramework.Core.Configuration.DataSelectConfiguration"/> から、現在の言語設定に合致したクエリを取得します。
 </summary>
	<param name="configList"><see cref="T:SRS.Standards.MvcFramework.Core.Configuration.DataSelectConfiguration"/> の集合。</param>
	<returns>SQL文</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Configuration.ExtensionConfigurationManager.GetTimeout(System.String,System.String)">
	<summary>
 指定された機能IDに対応するタイムアウト秒数を取得します。
 </summary>
	<param name="typeId">タイムアウトの種類を表すID。</param>
	<param name="menuId">機能ID。</param>
	<returns>タイムアウト秒数。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Configuration.ExtensionConfigurationManager.InitializeUserConfig``1(System.String)">
	<summary>
 任意の型で設定情報を初期化します。
 </summary>
	<typeparam name="T">設定ファイルの型。</typeparam>
	<param name="configSectionName">読み込むセクション名。key-value型の設定を期待します。</param>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.ExtensionConfigurationManager.ConfigurationReader">
	<summary>
 設定ファイルを読み込むためのクラスを取得します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Configuration.ExtensionConfigurationManager.DefaultConfigurationReader.GetSection(System.String)">
	<summary>
 セクションを取得する。
 </summary>
	<param name="name">セクション名。</param>
	<returns>セクション情報。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Configuration.ExtensionConfigurationManager.DefaultConfigurationReader.ConnectionStrings">
	<summary>
 接続情報を取得します。
 </summary>
	<returns>接続情報のコレクション。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Configuration.ExtensionConfigurationManager.DefaultConfigurationReader.AppSettings(System.String)">
	<summary>
 アプリ設定を取得します。
 </summary>
	<param name="key">アプリ設定のキー。</param>
	<returns>アプリ設定の値。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Configuration.ExtensionConfigurationManager.DefaultConfigurationReader">
	<summary>
 既定の設定ファイルを読み込むクラス。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Configuration.ExtensionConfigurationManager.Initialize(SRS.Standards.MvcFramework.Core.Configuration.IConfigurationReader)">
	<summary>
 初期化処理
 </summary>
	<param name="configReader">設定ファイルを読み込むためのクラス。<c>Nothing</c>のときは既定の設定ファイルから読み込む。</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.Configuration.ExtensionConfigurationManager">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 拡張設定の取得処理をグローバル(シングルトン)で共有する為のクラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.#ctor">
	<summary>
 コンストラクタ
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.DefaultConnection">
	<summary>
 デフォルトのデータベース接続先を設定/取得
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.UploadTempPath">
	<summary>
 ファイルアップロード時の保存パスを設定/取得
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.LiteralMethodBegin">
	<summary>
 メソッド開始の文言を設定/取得
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.LiteralMethodEnd">
	<summary>
 メソッド終了の文言を設定/取得
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.LiteralLogin">
	<summary>
 ログインの文言を設定/取得
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.LiteralLogout">
	<summary>
 ログアウトの文言を設定/取得する
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.LiteralSuccess">
	<summary>
 成功の文言を設定/取得
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.LiteralFail">
	<summary>
 失敗の文言を設定/取得
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.LiteralNoAuthentication">
	<summary>
 システム使用権限なしの文言を設定/取得
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.LiteralNoSecurity">
	<summary>
 業務権限なしの文言を設定/取得
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.LiteralRegulation">
	<summary>
 業務規制中の文言を設定/取得
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.RowIdColName">
	<summary>
 行ＩＤのデータベースの列名を設定/取得
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.RowVersionColName">
	<summary>
 行バージョンのデータベースの列名を設定/取得
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.MenuView">
	<summary>
 メニュー画面への遷移文字列を設定/取得
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.NoSecurityView">
	<summary>
 業務権限チェックＮＧ画面への遷移文字列を設定/取得
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.RegulationView">
	<summary>
 業務規制画面への遷移文字列を設定/取得
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.DeleteRequestCount">
	<summary>
 業務間情報が自動的に削除されるまでのリクエスト数を設定/取得する。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.ResourceBaseName">
	<summary>
 多言語メッセージ用リソースファイルのベース名を設定/取得
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.BrowserResourceBaseName">
	<summary>
 ブラウザ多言語メッセージ用リソースファイルのベース名を設定/取得
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.DefaultCultureInfoName">
	<summary>
 デフォルトの多言語メッセージ用のカルチャ情報を設定/取得
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.ColumnNameCaseMode">
	<summary>
 排他制御用の列名を、自動的に大文字・小文字などに変換するかどうかのモードを設定/取得
 既定はUpperCase
 何もしない: None、大文字に変換: UpperCase、小文字に変換: LowerCase
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.DataSelectCacheMinutes">
	<summary>
 データセレクト結果をキャッシュしておく時間(分) (-1: 無制限、0: キャッシュしない、1以上: キャッシュ時間)
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.ExclusiveLockType">
	<summary>
 更新処理中、対象行に実際にかけるロックの種類を指定します。
 明示ロックしない: NoLock、行更新ロック: RowUpdate、行更新(ロック待機なし): RowUpdateNoWait
 ※無効な値が指定された場合や指定されない場合は、RowUpdateNoWait が使用されます
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.MessageLoginError">
	<summary>
 ログインエラー時のメッセージ(メッセージIDでも可）を設定/取得
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.MessagePagingParamError">
	<summary>
 ページング処理に必要な情報が設定されていない場合のエラーメッセージ
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.MessageNotDMLError">
	<summary>
 ExecuteNonQuery実行時、Insert、Update、Delete以外が指定された場合のエラーメッセージ
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.MessageNonUpdateAuthority">
	<summary>
 データベース登録更新権限なしの場合のエラーメッセージ
 </summary>
	<remarks>テーブル名を埋め込む為、"{0}"必須</remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.MessageNonExclusiveUpdate">
	<summary>
 データベース排他チェックＮＧの場合のエラーメッセージ
 </summary>
	<remarks>テーブル名を埋め込む為、"{0}"必須</remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.MessageInvalidFacadeMethod">
	<summary>
 無効なファサードメソッドが実行された場合のエラーメッセージ
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.MessageNoInsertPermissionError">
	<summary>
 登録権限がない場合に表示されるエラーメッセージ
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.MessageNoUpdatePermissionError">
	<summary>
 更新権限がない場合に表示されるエラーメッセージ
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.MessageNoDeletePermissionError">
	<summary>
 削除権限がない場合に表示されるエラーメッセージ
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.MessageNoSearchPermissionError">
	<summary>
 検索権限がない場合に表示されるエラーメッセージ
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.MessageDataSelectNotFoundError">
	<summary>
 データセレクトが見つからない場合に表示されるエラーメッセージ
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.LabelSelectAll">
	<summary>
 全選択ボタン用のラベル
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.LabelClearAll">
	<summary>
 選択解除ボタン用のラベル
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.CssClassErrorMessage">
	<summary>
 エラーメッセージ用のCSSクラス
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.CssClassWarnMessage">
	<summary>
 警告メッセージ用のCSSクラス
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.DisablePathThroughOnSRSRaw">
	<summary>
 SRSHtmlHelper.SRSRaw で、リソース以外の通常の文字出力のみ、
 そのまま出力せずエスケープするかどうか。
 (誤ってデータ表示にSRSRawを使用した場合のWork around)
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration.SearchResultLimit">
	<summary>
 一覧検索で許可する検索件数の上限。これを越えると例外が発生します。既定値は <c>100000</c>。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.Configuration.MvcFrameworkConfiguration">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 フレームワークで使用する各種設定を管理する為のクラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 002, 2016-04-22, MASUDA Kazuya/SRS 検索件数の上限を越えた場合に例外にする対応
 </Version>
</member><member name="F:SRS.Standards.MvcFramework.Core.Facade.ValidLevelType.Normal">
	<summary>
 正常（初期値）
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Facade.ValidLevelType.Warn">
	<summary>
 警告
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Facade.ValidLevelType.Error">
	<summary>
 エラー
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Facade.ValidLevelType.Fatal">
	<summary>
 致命(続行不能)
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.Facade.ValidLevelType">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 エラー・警告の発生をコントローラへ通知する為の列挙型
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.ByteFixedDataReader.#ctor">
	<summary>
 ダミーコンストラクタ
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.ByteFixedDataReader.ReadModels``1(System.String)">
	<summary>
 固定長ファイルを読込みます。
 </summary>
	<typeparam name="T">固定長レコード型。</typeparam>
	<param name="fileName">読み込むファイルのパス。</param>
	<returns>読み込んだ固定長データ。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.ByteFixedDataReader.ReadModels``1(System.String,System.Text.Encoding)">
	<summary>
 固定長ファイルを読込みます。
 </summary>
	<typeparam name="T">固定長レコード型。</typeparam>
	<param name="fileName">読み込むファイルのパス。</param>
	<param name="encoding">入出力用のエンコーディング。多バイト文字の変換及び、長さ計算にも使われます。既定値は CP932(Shift-JIS)。</param>
	<returns>読み込んだ固定長データ。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.ByteFixedDataReader.GetTargetMemebers(System.Type)">
	<summary>
 固定長指定のある文字列メンバを取得します。
 </summary>
	<param name="targetType">取得対象の型。</param>
	<returns>対象メンバの集合。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.ByteFixedDataReader.ReadRecordLine``1(System.String,``0,System.Text.Encoding)">
	<summary>
 文字列から固定長レコードに変換します。
 </summary>
	<typeparam name="T">データレコードの型。</typeparam>
	<param name="line">データレコードを表す文字列。</param>
	<param name="target">設定するデータレコード。</param>
	<param name="encoding">入出力用のエンコーディング。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.IO.ByteFixedDataReader.FromByteValue(System.Collections.Generic.IEnumerable{System.Byte},System.Text.Encoding)">
	<summary>
 書き込まれたバイト列を文字列に変換します。
 結果は前後空白を切り捨てます。
 </summary>
	<param name="bytes">バイト列としての値。</param>
	<param name="encoding">入出力用のエンコーディング。</param>
	<returns>文字列。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.IO.ByteFixedDataReader">
	<summary>
 固定長データの読込機能を提供します。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.IO.QuoteModeType.Auto">
	<summary>
 必要な場合のみダブルクォートで囲みます。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.IO.QuoteModeType.Quote">
	<summary>
 必ずダブルクォートで囲みます。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.IO.QuoteModeType.NoQuote">
	<summary>
 一切ダブルクォートで囲みません。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.IO.QuoteModeType">
	<summary>
 CSV出力で、項目をダブルクォートで項目を囲む方法を指定します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Message.MessageManager.#ctor">
	<summary>
 ダミーコンストラクタ
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Message.MessageManager.SyncRoot">
	<summary>
 排他ロック制御用オブジェクト
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Message.MessageManager._initializedMessage">
	<summary>
 初期化判定用
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Message.MessageManager.GetMessage(System.String,System.String[])">
	<summary>
 多言語対応のメッセージを取得
 </summary>
	<param name="messageId">メッセージID</param>
	<param name="messageParams">メッセージ置換項目</param>
	<returns>多言語対応メッセージ</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Message.MessageManager.GetMessage(System.String,System.Collections.Generic.IEnumerable{System.String})">
	<summary>
 多言語対応のメッセージを取得
 </summary>
	<param name="messageId">メッセージID</param>
	<param name="messageParams">メッセージ置換項目</param>
	<returns>多言語対応メッセージ</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Message.MessageManager.GetMessage(System.Globalization.CultureInfo,System.String,System.String[])">
	<summary>
 多言語対応のメッセージを取得
 </summary>
	<param name="messageId">メッセージID</param>
	<param name="messageParams">メッセージ置換項目</param>
	<param name="culture">取得対象言語</param>
	<returns>多言語対応メッセージ</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Message.MessageManager.GetMessage(System.Globalization.CultureInfo,System.String,System.Collections.Generic.IEnumerable{System.String})">
	<summary>
 多言語対応のメッセージを取得
 </summary>
	<param name="messageId">メッセージID</param>
	<param name="messageParams">メッセージ置換項目</param>
	<param name="culture">取得対象言語</param>
	<returns>多言語対応メッセージ</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Message.MessageManager.Initialize">
	<summary>
 初期化処理
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Message.MessageManager.Reload">
	<summary>
 リソースを再読み込みします。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.Message.MessageManager">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 多言語対応メッセージの取得処理をグローバル(シングルトン)で共有する為のクラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfigurationSection.Name">
	<summary>
 この構成セクションのセクション名です。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfigurationSection.Section">
	<summary>
		<see cref="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfigurationSection.Name"/> が示す <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfigurationSection"/>
 構成セクションを取得します。
 </summary>
	<value><see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationSection"/> 構成セクション。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfigurationSection.Names">
	<summary>
 名前で指定される設定のコレクションを取得または設定します。
 </summary>
	<value>名前で指定される設定のコレクション。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfigurationSection.XmlNS">
	<summary>
 XML名前空間。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfigurationSection">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator"/> が使用する構成セクションです。
 この構成セクションには、SQL文の設定情報が記述されます。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfigurationCollection.Item(System.String)">
	<summary>
 指定された名前に対する構成要素である <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfiguration"/>
 を取得します。
 </summary>
	<param name="name">構成要素を取得する対象の名前。</param>
	<returns>指定された名前に対応する構成要素である
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfiguration"/></returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfigurationCollection.CreateNewElement">
	<summary>
 新しい <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfiguration"/> を作成します。
 </summary>
	<returns>新しい <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfiguration"/>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfigurationCollection.CreateNewElement(System.String)">
	<summary>
 作成する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfiguration"/> の名前を指定して、
 新しい <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfiguration"/> を作成します。
 </summary>
	<param name="elementName">作成する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfiguration"/> の名前。</param>
	<returns>新しい <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfiguration"/>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfigurationCollection.GetElementKey(System.Configuration.ConfigurationElement)">
	<summary>
 指定した構成要素の要素キーを取得します。
 </summary>
	<param name="element">キーを返す <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfiguration"/>。</param>
	<returns>指定した <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfiguration"/> のキーとして動作する
 <see cref="T:System.Object"/>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfigurationCollection.GetEnumerator1">
	<summary>
 列挙子を取得します。
 </summary>
	<returns>列挙子。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfigurationCollection">
	<summary>
 namedQuerys要素に含まれる、configuration構成要素のコレクションです。
 0個以上の configuration構成要素を含みます。
 </summary>
	<remarks>
		<para>このクラスは、<see cref="T:System.Configuration.ConfigurationElementCollection"/> から派生します。
 構成情報を読み込むために、最小限の機能を実装しています。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfiguration.#ctor">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfiguration"/> クラスの新しいインスタンスを
 初期化します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfiguration.#ctor(System.String)">
	<summary>
 作成する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfiguration"/> の名前を指定して、
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfiguration"/> クラスの新しいインスタンスを初期化します。
 </summary>
	<param name="elementName">作成する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfiguration"/> の名前。</param>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfiguration.Name">
	<summary>
 名前指定される設定の名称を取得または設定します。
 </summary>
	<value>名前指定される設定の名称。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfiguration.Queries">
	<summary>
 名前指定された設定の、プロパティの構成情報を、取得または設定します。
 </summary>
	<value>名前指定された設定の、プロパティの構成情報。</value>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedQueryConfiguration">
	<summary>
 configuration構成要素です。名前指定された設定情報になります。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfigurationCollection.Item(System.String)">
	<summary>
 指定された名前のプロパティに対する構成要素である <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfiguration"/>
 を取得します。
 </summary>
	<param name="name">構成要素を取得する対象のプロパティ名。</param>
	<returns>指定されたプロパティ名に対応する構成要素である
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfiguration"/></returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfigurationCollection.Item(System.Int32)">
	<summary>
 指定されたインデックス位置の構成要素である <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfiguration"/>
 を取得します。
 </summary>
	<param name="index">プロパティの構成要素を取得するインデックス位置。</param>
	<returns>指定されたインデックス位置の構成要素である
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfiguration"/></returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfigurationCollection.CreateNewElement">
	<summary>
 新しい <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfiguration"/> を作成します。
 </summary>
	<returns>新しい <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfiguration"/>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfigurationCollection.CreateNewElement(System.String)">
	<summary>
 作成する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfiguration"/> の名前を指定して、
 新しい <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfiguration"/> を作成します。
 </summary>
	<param name="elementName">作成する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfiguration"/> の名前。</param>
	<returns>新しい <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfiguration"/>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfigurationCollection.GetElementKey(System.Configuration.ConfigurationElement)">
	<summary>
 指定した構成要素の要素キーを取得します。
 </summary>
	<param name="element">キーを返す <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfiguration"/>。</param>
	<returns>指定した <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfiguration"/> のキーとして動作する
 <see cref="T:System.Object"/>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfigurationCollection.GetEnumerator1">
	<summary>
 列挙子を取得します。
 </summary>
	<returns>列挙子。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfigurationCollection">
	<summary>
 汎用的に使用される、プロパティ設定要素のコレクションです。
 </summary>
	<remarks>
		<para>この構成要素コレクションは、プロパティの設定要素を子要素として持ちます。
 プロパティのコレクションを設定する形式の構成要素コレクションとして、汎用的に使用できます。</para>
		<para>通常は、この構成要素を含む、親の構成要素または構成セクションの、
 プロパティの型として使用します。</para>
		<para>このクラスは、<see cref="T:System.Configuration.ConfigurationElementCollection"/> から派生します。
 構成情報を読み込むために、最小限の機能を実装しています。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfiguration.#ctor">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration"/> クラスの新しいインスタンスを
 初期化します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfiguration.#ctor(System.String)">
	<summary>
 作成する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration"/> の名前を指定して、
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration"/> クラスの新しいインスタンスを
 初期化します。
 </summary>
	<param name="elementName">作成する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration"/>
 の名前。</param>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfiguration.Locale">
	<summary>
 ロケールを取得または設定します。
 </summary>
	<value>ロケール。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfiguration.Query">
	<summary>
 クエリを取得または設定します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfiguration.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
	<summary>
 構成ファイルから XML ファイルを読み取ります。
 </summary>
	<param name="reader">構成ファイルから読み取る <see cref="T:System.Xml.XmlReader"/>。</param>
	<param name="serializeCollectionKey">コレクションのキープロパティだけをシリアライズする場合は <c>True</c>。</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.QueryConfiguration">
	<summary>
 汎用的に使用される、プロパティ設定要素です。
 </summary>
	<remarks>
		<para>この構成要素は、特定の名前つきプロパティの設定要素です。
 プロパティを設定する形式の構成要素として、汎用的に使用できます。</para>
		<para>通常は、この構成要素を含む、親の構成要素または構成セクションの、
 プロパティの型として使用します。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Configuration.IConfigurationReader.GetSection(System.String)">
	<summary>
 セクションを取得する。
 </summary>
	<param name="name">セクション名。</param>
	<returns>セクション情報。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Configuration.IConfigurationReader.ConnectionStrings">
	<summary>
 接続情報を取得します。
 </summary>
	<returns>接続情報のコレクション。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Configuration.IConfigurationReader.AppSettings(System.String)">
	<summary>
 アプリ設定を取得します。
 </summary>
	<param name="key">アプリ設定のキー。</param>
	<returns>アプリ設定の値。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Configuration.IConfigurationReader">
	<summary>
 システム設定 (Web.config) を読み込むインターフェイス。
 単体テスト用にインターフェイス化。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.ExecuteQuery``1(System.String,System.Object)">
	<summary>
 検索SQLを実行し、モデルの配列にマッピングして返す
 </summary>
	<typeparam name="T">結果モデルの型</typeparam>
	<param name="commandText">実行SQL文</param>
	<param name="paramModel">条件のモデル</param>
	<returns>結果モデルの型の配列</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.ExecuteQuery(System.String,System.Object)">
	<summary>
 検索SQLを実行し、モデルの配列にマッピングして返す(結果が動的型)
 </summary>
	<param name="commandText">実行SQL文</param>
	<param name="paramModel">条件のモデル</param>
	<returns>結果(動的型)の配列</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.ExecuteStoredProcedure``1(System.String,Dapper.SqlMapper.IDynamicParameters)">
	<summary>
 ストアドプロシージャを実行する
 </summary>
	<typeparam name="T">結果モデルの型</typeparam>
	<param name="storedName">ストアド名</param>
	<param name="param">Dapper用パラメータ</param>
	<returns>実行結果モデル</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.ExecuteStoredProcedure(System.String,Dapper.SqlMapper.IDynamicParameters)">
	<summary>
 ストアドプロシージャを実行する(結果が動的型)
 </summary>
	<param name="storedName">ストアド名</param>
	<param name="param">Dapper用パラメータ</param>
	<returns>実行結果(動的型)</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.ExecuteQueryAndPaging``1(System.String,System.String,SRS.Standards.MvcFramework.Core.DataAccess.IPaging)">
	<summary>
 検索SQLを実行し、ページング処理を行った後モデルの配列にマッピングして返す
 </summary>
	<typeparam name="T">結果モデルの型</typeparam>
	<param name="commandText">実行SQL文</param>
	<param name="orderByText">OrderBy句(Order Byも含める)</param>
	<param name="paramModel">条件モデル</param>
	<returns>結果モデルの型の配列</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.ExecuteQueryAndPaging``1(System.String,System.String,SRS.Standards.MvcFramework.Core.DataAccess.IPaging,System.Object)">
	<summary>
 検索SQLを実行し、ページング処理を行った後モデルの配列にマッピングして返す(キャッシュなし)
 </summary>
	<typeparam name="T">結果モデルの型</typeparam>
	<param name="commandText">実行SQL文</param>
	<param name="orderByText">OrderBy句(Order Byも含める)</param>
	<param name="pagingModel">ページ処理用のモデル</param>
	<param name="paramModel">条件モデル</param>
	<returns>結果モデルの型の配列</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.ExecuteQueryForPagingKey(System.String,System.Object)">
	<summary>
 検索SQLを実行して、キー情報を記憶する
 </summary>
	<param name="commandText">実行SQL文</param>
	<param name="paramModel">条件モデル</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.ExecuteQueryAndPagingWithCache``1(System.String,SRS.Standards.MvcFramework.Core.DataAccess.IPaging,System.Object)">
	<summary>
 検索SQLを実行し、ページング処理を行った後モデルの配列にマッピングして返す(事前に <see cref="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.ExecuteQueryForPagingKey(System.String,System.Object)"/> を実行する必要あり)
 </summary>
	<typeparam name="T">結果モデルの型</typeparam>
	<param name="commandText">実行SQL文</param>
	<param name="pagingModel">ページ処理用のモデル</param>
	<param name="paramModel">条件モデル</param>
	<returns>結果モデルの型の配列</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.ExecuteStoredProcedureForPagingKey(System.String,Dapper.SqlMapper.IDynamicParameters)">
	<summary>
 一覧キー取得ストアドプロシージャを実行して、キー情報を記憶する
 </summary>
	<param name="storedName">ストアド名</param>
	<param name="param">Dapper用パラメータ</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.ExecuteStoredProcedureAndPaging``1(System.String,SRS.Standards.MvcFramework.Core.DataAccess.IPaging,Dapper.SqlMapper.IDynamicParameters)">
	<summary>
 ストアドプロシージャを実行する (ページングあり)
 </summary>
	<typeparam name="T">結果モデルの型</typeparam>
	<param name="storedName">ストアド名</param>
	<param name="pagingModel">ページ処理用のモデル</param>
	<param name="param">Dapper用パラメータ</param>
	<returns>実行結果モデル</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.ReadStorePagingKey(System.Data.IDataReader)">
	<summary>
 クエリ結果をReaderから読み取り、RowIDと主キー情報を選別してセッション情報に保持します。
 </summary>
	<param name="_reader">クエリ結果を読み取るためのReader。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.SortResult``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String})">
	<summary>
 結果のソートが可能な場合、RowIdでソートを実行する
 </summary>
	<typeparam name="T">結果モデルの型</typeparam>
	<param name="data">結果データ</param>
	<param name="keys">キー(RowID)</param>
	<returns>ソート後のデータ</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.SortResult``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}},System.Collections.Generic.IEnumerable{System.String})">
	<summary>
 結果のソートが可能な場合、主キーでソートを実行する
 </summary>
	<typeparam name="T">結果モデルの型</typeparam>
	<param name="data">結果データ</param>
	<param name="keys">キー(主キー)</param>
	<param name="primaryKeyNames">主キー列名</param>
	<returns>ソート後のデータ</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.GetCommandTimeout">
	<summary>
 コマンドのタイムアウト秒数を取得します。
 ※トランザクションタイムアウト秒数とできるだけ一致させる仕様
 </summary>
	<returns>コマンドのタイムアウト秒数。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.ExecuteQueryInner``1(System.String,System.Func{System.Data.Common.DbConnection,Dapper.SqlMapper.IDynamicParameters,System.Collections.Generic.IEnumerable{``0}},System.Object)">
	<summary>
 検索SQLを実行し、モデルの配列にマッピングして返す
 </summary>
	<typeparam name="TReturn">結果モデルの型</typeparam>
	<param name="commandText">実行SQL文</param>
	<param name="functor">クエリの実行処理</param>
	<param name="paramModel">条件のモデル</param>
	<returns>結果モデルの型の配列</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.ExecuteQuery``3(System.String,System.Func{``0,``1,``2},System.Object)">
	<summary>
 検索SQLを実行し、モデルの配列にマッピングして返す
 </summary>
	<typeparam name="TFirst">マッピングする1つめの型</typeparam>
	<typeparam name="TSecond">マッピングする2つめの型</typeparam>
	<typeparam name="TReturn">結果モデルの型</typeparam>
	<param name="commandText">実行SQL文</param>
	<param name="map">クエリ結果を結果モデルにマッピングする関数</param>
	<param name="paramModel">条件のモデル</param>
	<returns>結果モデルの型の配列</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.ExecuteQuery``3(System.String,System.Func{``0,``1,``2},System.Object,System.String)">
	<summary>
 検索SQLを実行し、モデルの配列にマッピングして返す
 </summary>
	<typeparam name="TFirst">マッピングする1つめの型</typeparam>
	<typeparam name="TSecond">マッピングする2つめの型</typeparam>
	<typeparam name="TReturn">結果モデルの型</typeparam>
	<param name="commandText">実行SQL文</param>
	<param name="map">クエリ結果を結果モデルにマッピングする関数</param>
	<param name="paramModel">条件のモデル</param>
	<param name="splitOn">モデルを分割する列名 (カンマ区切り)</param>
	<returns>結果モデルの型の配列</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.ExecuteNonQuery(System.String,System.Object)">
	<summary>
 登録・更新・削除のSQL処理を実行する。
 </summary>
	<param name="commandText">実行SQL文</param>
	<param name="paramModel">登録更新モデル</param>
	<returns>処理件数</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.CheckExclusiveUpdate(System.String,SRS.Standards.MvcFramework.Core.MVC.ViewModelBase)">
	<summary>
 排他制御用データを検証します。検証がOKの場合、システム設定に従って実際にロックを取得します。
 </summary>
	<param name="tableName">テーブル名</param>
	<param name="paramModel">更新対象モデル</param>
	<exception cref="T:SRS.Standards.MvcFramework.Core.DataAccess.NonUpdateAuthorityException">適切な排他制御用データが登録されていないときに発生</exception>
	<exception cref="T:SRS.Standards.MvcFramework.Core.DataAccess.NonExclusiveUpdateException">排他制御データが一致しないときに発生</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.CheckExclusiveUpdate(System.String,System.Collections.Generic.IEnumerable{SRS.Standards.MvcFramework.Core.MVC.ViewModelBase})">
	<summary>
 排他制御用データを検証します。検証がOKの場合、システム設定に従って実際にロックを取得します。
 </summary>
	<param name="tableName">テーブル名</param>
	<param name="paramModel">更新対象モデル</param>
	<exception cref="T:SRS.Standards.MvcFramework.Core.DataAccess.NonUpdateAuthorityException">適切な排他制御用データが登録されていないときに発生</exception>
	<exception cref="T:SRS.Standards.MvcFramework.Core.DataAccess.NonExclusiveUpdateException">排他制御データが一致しないときに発生</exception>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase._primaryKeys">
	<summary>テーブルに対する主キー列をキャッシュする</summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.GetPrimaryKeys(System.String)">
	<summary>
 指定したテーブルから、主キー列名を取得します。
 </summary>
	<param name="tableName">テーブル名。</param>
	<returns>列名の配列。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.CheckExclusiveUpdate(System.String,System.Object,System.String,System.String)">
	<summary>
 排他制御用データを検証します。検証がOKの場合、システム設定に従って実際にロックを取得します。
 </summary>
	<param name="tableName">テーブル名</param>
	<param name="paramModel">更新対象モデル</param>
	<param name="rowIdPropertyName">行IDが格納されているプロパティ名を指定します。既定は RowId です。</param>
	<param name="revisionPropertyName">リビジョンが格納されているプロパティ名を指定します。既定は Revision です。</param>
	<exception cref="T:SRS.Standards.MvcFramework.Core.DataAccess.NonUpdateAuthorityException">適切な排他制御用データが登録されていないときに発生</exception>
	<exception cref="T:SRS.Standards.MvcFramework.Core.DataAccess.NonExclusiveUpdateException">排他制御データが一致しないときに発生</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.CreateExclusiveUpdateModel(System.String,System.Object,System.String,System.String)">
	<summary>
 引数モデルから排他制御モデルを作成します。
 </summary>
	<param name="tableName">テーブル名</param>
	<param name="paramModel">更新対象モデル</param>
	<param name="rowIdColumnName">行IDが格納されているプロパティ名を指定します。既定は RowId です。</param>
	<param name="revisionColumnName">リビジョンが格納されているプロパティ名を指定します。既定は Revision です。</param>
	<exception cref="T:SRS.Standards.MvcFramework.Core.DataAccess.NonUpdateAuthorityException">適切な排他制御用データが登録されていないときに発生</exception>
	<returns>排他制御モデル。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.IsNumericNullValue(System.Object)">
	<summary>
 データが数値として不正もしくは存在しないか判定する。0は不正値と見做す。
 </summary>
	<param name="value">判定する値。</param>
	<returns>値が不正値のとき <c>True</c>。それ以外のとき <c>False</c>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.IsNullRowId(System.Object)">
	<summary>
 RowIDとして不正もしくは存在しないか判定する。0は不正値と見做す。
 </summary>
	<param name="value">判定する値。</param>
	<returns>値が不正値のとき <c>True</c>。それ以外のとき <c>False</c>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.GetExclusiveLockType">
	<summary>
 システム設定とトランザクション状況から、適切なロックの種類を取得します。
 </summary>
	<returns>ロックの種類。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.CheckExclusiveUpdate(System.String,System.Object,SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveUpdateType,System.String[])">
	<summary>
 排他制御用データを検証します。検証がOKの場合、システム設定に従って実際にロックを取得します。
 </summary>
	<param name="tableName">テーブル名</param>
	<param name="paramModel">更新対象モデル</param>
	<param name="exclusiveUpdateTypes">処理対象(複数指定可能)</param>
	<param name="primaryKeys">主キーの名前(任意数)</param>
	<exception cref="T:SRS.Standards.MvcFramework.Core.DataAccess.NonUpdateAuthorityException">適切な排他制御用データが登録されていないときに発生</exception>
	<exception cref="T:SRS.Standards.MvcFramework.Core.DataAccess.NonExclusiveUpdateException">排他制御データが一致しないときに発生</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.GetExclusiveUpdate(System.String,System.Object,System.String[])">
	<summary>
 排他制御用データ取得
 </summary>
	<param name="tableName">テーブル名</param>
	<param name="paramModel">更新対象モデル</param>
	<param name="primaryKeys">主キーの名前(任意数)</param>
	<returns>排他制御用データ</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.GetDataSelectListItem(System.String)">
	<summary>
 指定したデータセレクト名でクエリを実行し、ドロップダウンリスト項目として取得します。
 </summary>
	<param name="selectName">データセレクト名</param>
	<returns>結果リスト</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.GetDataSelectListItem(System.String,System.Object)">
	<summary>
 指定したデータセレクト名でクエリを実行し、ドロップダウンリスト項目として取得します。
 </summary>
	<param name="selectName">データセレクト名</param>
	<param name="model">モデル</param>
	<returns>結果リスト</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.GetDataSelect``1(System.String)">
	<summary>
 指定したデータセレクト名でクエリを実行し、任意のモデルクラスとして取得します。
 </summary>
	<typeparam name="T">結果型</typeparam>
	<param name="selectName">データセレクト名</param>
	<returns>結果リスト</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.GetDataSelect``1(System.String,System.Object)">
	<summary>
 指定したデータセレクト名でクエリを実行し、任意のモデルクラスとして取得します。
 </summary>
	<typeparam name="T">結果型</typeparam>
	<param name="selectName">データセレクト名</param>
	<param name="model">モデル</param>
	<returns>結果リスト</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.ConvertParamValues(System.Collections.Generic.IEnumerable{System.String})">
	<summary>
 1変数に対する可変長個数の値を、ストアドプロシージャの引数に渡せるようXML形式に変換します。
 (HASHCODE列にマッピングされます)
 </summary>
	<param name="values">可変長の値。</param>
	<returns>XML形式の文字列。0個の場合 <c>Nothing</c>を返します。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.ConvertParamValuesString(System.Collections.Generic.IEnumerable{System.String})">
	<summary>
 1変数に対する可変長個数の値を、ストアドプロシージャの引数に渡せるようXML形式に変換します。
 (HASHCODE列にマッピングされます)
 </summary>
	<param name="values">可変長の値。</param>
	<returns>XML形式の文字列。0個の場合 <c>Nothing</c>を返します。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.ConvertParamValues(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
	<summary>
 複数の可変長個数の値を、ストアドプロシージャの引数に渡せるようXML形式に変換します。
 (PARAM01, PARAM02,...にマッピングされます)
 </summary>
	<param name="values">可変長の値。</param>
	<returns>XML形式の文字列。0個の場合 <c>Nothing</c>を返します。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.ConvertParamValuesString(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
	<summary>
 複数の可変長個数の値を、ストアドプロシージャの引数に渡せるようXML形式に変換します。
 (PARAM01, PARAM02,...にマッピングされます)
 </summary>
	<param name="values">可変長の値。</param>
	<returns>XML形式の文字列。0個の場合 <c>Nothing</c>を返します。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.ConvertParamValues``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>
 1変数に対する可変長個数のオブジェクトを、ストアドプロシージャの引数に渡せるようXML形式に変換します。
 (RowIdがHASHCODE、その他のプロパティはPARAM01, PARAM02,...にマッピングされます)
 </summary>
	<typeparam name="T">オブジェクトの型。</typeparam>
	<param name="values">可変長の値。</param>
	<returns>XML形式の文字列。0個の場合 <c>Nothing</c>を返します。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.AttachLogOutputHandler(System.Data.Common.DbConnection)">
	<summary>
 可能な場合、DB標準出力のログ出力イベントハンドラを登録します。
 </summary>
	<param name="connection">DB接続。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.OutputInfoMessageSqlClient(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)">
	<summary>DB接続標準出力をメッセージログに出力するハンドラ。(SQL Server用)</summary>
	<param name="sender">イベント発生オブジェクト。</param>
	<param name="e">イベント引数。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.OutputInfoMessageOleDb(System.Object,System.Data.OleDb.OleDbInfoMessageEventArgs)">
	<summary>DB接続標準出力をメッセージログに出力するハンドラ。(OleDB用)</summary>
	<param name="sender">イベント発生オブジェクト。</param>
	<param name="e">イベント引数。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.OutputInfoMessageOdbc(System.Object,System.Data.Odbc.OdbcInfoMessageEventArgs)">
	<summary>DB接続標準出力をメッセージログに出力するハンドラ。(ODBC用)</summary>
	<param name="sender">イベント発生オブジェクト。</param>
	<param name="e">イベント引数。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase.OutputInfoMessageOracle(System.Object,System.EventArgs)">
	<summary>DB接続標準出力をメッセージログに出力するハンドラ。(Oracle用)</summary>
	<param name="sender">イベント発生オブジェクト。</param>
	<param name="e">イベント引数。</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessBase">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＳＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 データアクセス基底クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 002, 2015-09-14, MASUDA Kazuya/SRS RowIdをキャッシュするページング方式を追加
 003, 2015-10-28, MASUDA Kazuya/SRS 主キーをキャッシュするページング方式を追加
 004, 2016-04-22, MASUDA Kazuya/SRS 検索件数の上限を越えた場合に例外にする対応
 005, 2016-10-11, MASUDA Kazuya/SRS データセレクト用共有キャッシュに同時アクセスするとCPU使用率100%になる場合があったため、データセレクト名毎にロックを取得するようにした
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.SqlLogger.NLogName">
	<summary>
 Nlogのログ名(設定名)
 </summary>
	<returns>ログ名</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.SqlLogger.NLogLogger">
	<summary>
 NLogのログ出力クラス
 </summary>
	<returns>NLogLogger</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Logging.SqlLogger.Log(System.String,System.Object)">
	<summary>
 SQL実行ログ出力
 </summary>
	<param name="sql">SQL文</param>
	<param name="paramModel">パラメータ</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Logging.SqlLogger.GetParamTypeString(System.Collections.Generic.Dictionary{System.String,System.String},System.Object)">
	<summary>
 パラメータの型のログを生成する
 </summary>
	<param name="paramHash">パラメータ情報</param>
	<param name="paramModel">モデル</param>
	<returns>型情報のログ</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Logging.SqlLogger.GetParamValueString(System.Collections.Generic.Dictionary{System.String,System.String},System.Object)">
	<summary>
 パラメータの値のログを生成する
 </summary>
	<param name="paramHash">パラメータ情報</param>
	<param name="paramModel">モデル</param>
	<returns>値情報のログ</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Logging.SqlLogger.GetValueString(System.Object,System.Type)">
	<summary>
 パラメータの値をログ出力用に加工する
 </summary>
	<param name="value">パラメータの値</param>
	<param name="valueType">パラメータの型</param>
	<returns>ログ出力用の値</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Logging.SqlLogger">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 SQL実行ログ出力クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSStringValidationAttribute.#ctor(System.Boolean,SRS.Standards.MvcFramework.Core.MVC.CharacterType,System.Int32,System.Int32)">
	<summary>
 コンストラクタ。
 </summary>
	<param name="required">必須項目かどうか。</param>
	<param name="type">文字種別。指定しない場合は <see cref="F:SRS.Standards.MvcFramework.Core.MVC.CharacterType.Any"/> を指定してください。</param>
	<param name="maxLength">最大桁数。指定しない場合は <c>0</c> を設定してください。またこの値は、SRSTextBoxForのMaxLength引数の既定値になります。</param>
	<param name="minLength">最小桁数。指定しない場合は <c>0</c> を設定してください。</param>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.SRSStringValidationAttribute.Type">
	<summary>文字種別。</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.SRSStringValidationAttribute.MaxLength">
	<summary>最大桁数。</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.SRSStringValidationAttribute.MinLength">
	<summary>最小桁数。</summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSStringValidationAttribute.GetInputMaxLength">
	<summary>
 TextBoxに入力可能な最大桁を求めます。
 </summary>
	<returns>TextBoxに入力可能な最大桁。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.MVC.SRSStringValidationAttribute">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 モデル文字列項目用バリデーション属性クラス。
 </summary>
	<author>MASUDA Kazuya/SRS TS</author>
	<Version>
 001, 2015-09-09, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.SRSSelectListItem.Selected">
	<summary>
 この項目が選択されているかどうかを示す値。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.SRSSelectListItem.Text">
	<summary>
 項目のテキスト。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.SRSSelectListItem.Value">
	<summary>
 項目の値。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.MVC.SRSSelectListItem">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 シリアライズ可能な <see cref="T:System.Web.Mvc.SelectListItem"/>。
 </summary>
	<author>MASUDA Kazuya/SRS TS</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.ReflectConfiguration(System.Object)">
	<summary>
 構成ファイルに設定されているプロパティ設定情報を元に、インスタンスにプロパティを
 反映します。このメソッドは主に、カスタムのクラスが、自分の型の設定を構成ファイルで
 簡単に行えるようにするために提供されています。
 </summary>
	<param name="target">プロパティを設定する対象のインスタンス。</param>
	<remarks>
		<para>使用される構成ファイルのプロパティ設定は、クラスに対する設定になります。
 このメソッドは、指定されたインスタンスの実行時型から、構成ファイルの対応する
 プロパティ設定情報を取得し、インスタンスに反映します。</para>
		<para>プロパティ設定は、基底クラス型から派生クラス型へと継承されます。
 基底クラスの設定として共通の設定を行うことで、派生クラスに設定を反映させることが
 できます。</para>
		<para>構成ファイルに記述した設定は、インスタンスに対してこのメソッドを実行した際に
 反映されます。このメソッドを実行しない場合は、プロパティ反映されません。
 プロパティ設定を行いたいクラスは、コンストラクタなどでこのメソッドを実行するようにします。
 あるいは、自身が管理するオブジェクトを対象に、このメソッドを実行するようにします。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.ReflectConfiguration(System.Object,System.String)">
	<summary>
 構成ファイルに設定されている、名前指定されたプロパティ設定情報を元に、インスタンスに
 プロパティを反映します。このメソッドは主に、カスタムのクラスが、名前指定された設定を
 構成ファイルで簡単に行えるようにするために提供されています。
 </summary>
	<param name="target">プロパティを設定する対象のインスタンス。</param>
	<param name="name">プロパティ設定の名前。</param>
	<remarks>
		<para>このオーバーロードで使用されるのプロパティ設定は、名前で指定された設定になります。
 このメソッドは、指定されたプロパティ設定の名前から、構成ファイルの対応するプロパティ
 設定情報を取得し、インスタンスに反映します。</para>
		<para>構成ファイルに記述した設定は、インスタンスに対してこのメソッドを実行した際に
 反映されます。このメソッドを実行しない場合は、プロパティ反映されません。
 プロパティ設定を行いたいクラスは、コンストラクタなどでこのメソッドを実行するようにします。
 あるいは、自身が管理するオブジェクトを対象に、このメソッドを実行するようにします。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.GetConfiguredProperties(System.Type)">
	<summary>
 指定された型に対するプロパティ設定情報のディクショナリを取得します。
 </summary>
	<param name="type">プロパティ設定情報のディクショナリを取得する対象の型。</param>
	<returns>指定された型に対するプロパティ設定情報のディクショナリ。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.GetConfiguredProperties(System.String)">
	<summary>
 指定された名前に対するプロパティ設定情報のディクショナリを取得します。
 </summary>
	<param name="name">プロパティ設定情報のディクショナリを取得する対象の名前。</param>
	<returns>指定された名前に対するプロパティ設定情報のディクショナリ。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.SetProperties(System.Object,SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationCollection,System.String[])">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationCollection"/> に格納されているプロパティの設定情報を元に、
 インスタンスにプロパティを設定します。
 </summary>
	<param name="target">プロパティを設定する対象のインスタンス。</param>
	<param name="propertyCollection">設定情報を保持する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationCollection"/> 。</param>
	<param name="exceptList">除外するプロパティ名のリスト。このリストに含まれる名前と一致する設定値は
 無視されます。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.SetProperties(System.Object,SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationCollection,System.Collections.ICollection)">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationCollection"/> に格納されているプロパティの設定情報を元に、
 インスタンスにプロパティを設定します。
 </summary>
	<param name="target">プロパティを設定する対象のインスタンス。</param>
	<param name="propertyCollection">設定情報を保持する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationCollection"/> 。</param>
	<param name="exceptList">除外するプロパティ名のリスト。このリストに含まれる名前と一致する設定値は
 無視されます。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.SetProperties(System.Object,SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationCollection,SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption,System.String[])">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationCollection"/> に格納されているプロパティの設定情報を元に、
 インスタンスにプロパティを設定します。
 </summary>
	<param name="target">プロパティを設定する対象のインスタンス。</param>
	<param name="propertyCollection">設定情報を保持する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationCollection"/> 。</param>
	<param name="propertyOptions">プロパティの設定動作を指定する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption"/> から成るビットマスク。</param>
	<param name="exceptList">除外するプロパティ名のリスト。このリストに含まれる名前と一致する設定値は
 無視されます。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.SetProperties(System.Object,SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationCollection,SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption,System.Collections.ICollection)">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationCollection"/> に格納されているプロパティの設定情報を元に、
 インスタンスにプロパティを設定します。
 </summary>
	<param name="target">プロパティを設定する対象のインスタンス。</param>
	<param name="propertyCollection">設定情報を保持する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationCollection"/> 。</param>
	<param name="propertyOptions">プロパティの設定動作を指定する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption"/> から成るビットマスク。</param>
	<param name="exceptList">除外するプロパティ名のリスト。このリストに含まれる名前と一致する設定値は
 無視されます。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.SetProperties(System.Object,System.Collections.Specialized.NameValueCollection,System.String[])">
	<summary>
		<see cref="T:System.Collections.Specialized.NameValueCollection"/> に格納されているプロパティの設定情報を元に、
 インスタンスにプロパティを設定します。
 </summary>
	<param name="target">プロパティを設定する対象のインスタンス。</param>
	<param name="propertyCollection">設定情報を保持する <see cref="T:System.Collections.Specialized.NameValueCollection"/> 。</param>
	<param name="exceptList">除外するプロパティ名のリスト。このリストに含まれる名前と一致する設定値は
 無視されます。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.SetProperties(System.Object,System.Collections.Specialized.NameValueCollection,System.Collections.ICollection)">
	<summary>
		<see cref="T:System.Collections.Specialized.NameValueCollection"/> に格納されているプロパティの設定情報を元に、
 インスタンスにプロパティを設定します。
 </summary>
	<param name="target">プロパティを設定する対象のインスタンス。</param>
	<param name="propertyCollection">設定情報を保持する <see cref="T:System.Collections.Specialized.NameValueCollection"/> 。</param>
	<param name="exceptList">除外するプロパティ名のリスト。このリストに含まれる名前と一致する設定値は
 無視されます。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.SetProperties(System.Object,System.Collections.Specialized.NameValueCollection,SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption,System.String[])">
	<summary>
		<see cref="T:System.Collections.Specialized.NameValueCollection"/> に格納されているプロパティの設定情報を元に、
 インスタンスにプロパティを設定します。
 </summary>
	<param name="target">プロパティを設定する対象のインスタンス。</param>
	<param name="propertyCollection">設定情報を保持する <see cref="T:System.Collections.Specialized.NameValueCollection"/> 。</param>
	<param name="propertyOptions">プロパティの設定動作を指定する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption"/> から成るビットマスク。</param>
	<param name="exceptList">除外するプロパティ名のリスト。このリストに含まれる名前と一致する設定値は
 無視されます。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.SetProperties(System.Object,System.Collections.Specialized.NameValueCollection,SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption,System.Collections.ICollection)">
	<summary>
		<see cref="T:System.Collections.Specialized.NameValueCollection"/> に格納されているプロパティの設定情報を元に、
 インスタンスにプロパティを設定します。
 </summary>
	<param name="target">プロパティを設定する対象のインスタンス。</param>
	<param name="propertyCollection">設定情報を保持する <see cref="T:System.Collections.Specialized.NameValueCollection"/> 。</param>
	<param name="propertyOptions">プロパティの設定動作を指定する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption"/> から成るビットマスク。</param>
	<param name="exceptList">除外するプロパティ名のリスト。このリストに含まれる名前と一致する設定値は
 無視されます。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.SetProperties(System.Object,System.Collections.IDictionary,System.String[])">
	<summary>
		<see cref="T:System.Collections.IDictionary"/> に格納されているプロパティの設定情報を元に、
 インスタンスにプロパティを設定します。
 </summary>
	<param name="target">プロパティを設定する対象のインスタンス。</param>
	<param name="propertyDictionary">設定情報を保持する <see cref="T:System.Collections.IDictionary"/> 。</param>
	<param name="exceptList">除外するプロパティ名のリスト。このリストに含まれる名前と一致する設定値は
 無視されます。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.SetProperties(System.Object,System.Collections.IDictionary,System.Collections.ICollection)">
	<summary>
		<see cref="T:System.Collections.IDictionary"/> に格納されているプロパティの設定情報を元に、
 インスタンスにプロパティを設定します。
 </summary>
	<param name="target">プロパティを設定する対象のインスタンス。</param>
	<param name="propertyDictionary">設定情報を保持する <see cref="T:System.Collections.IDictionary"/> 。</param>
	<param name="exceptList">除外するプロパティ名のリスト。このリストに含まれる名前と一致する設定値は
 無視されます。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.SetProperties(System.Object,System.Collections.IDictionary,SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption,System.String[])">
	<summary>
		<see cref="T:System.Collections.IDictionary"/> に格納されているプロパティの設定情報を元に、
 インスタンスにプロパティを設定します。
 </summary>
	<param name="target">プロパティを設定する対象のインスタンス。</param>
	<param name="propertyDictionary">設定情報を保持する <see cref="T:System.Collections.IDictionary"/> 。</param>
	<param name="propertyOptions">プロパティの設定動作を指定する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption"/> から成るビットマスク。</param>
	<param name="exceptList">除外するプロパティ名のリスト。このリストに含まれる名前と一致する設定値は
 無視されます。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.SetProperties(System.Object,System.Collections.IDictionary,SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption,System.Collections.ICollection)">
	<summary>
		<see cref="T:System.Collections.IDictionary"/> に格納されているプロパティの設定情報を元に、
 インスタンスにプロパティを設定します。
 </summary>
	<param name="target">プロパティを設定する対象のインスタンス。</param>
	<param name="propertyDictionary">設定情報を保持する <see cref="T:System.Collections.IDictionary"/> 。</param>
	<param name="propertyOptions">プロパティの設定動作を指定する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption"/> から成るビットマスク。</param>
	<param name="exceptList">除外するプロパティ名のリスト。このリストに含まれる名前と一致する設定値は
 無視されます。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.SetProperty(System.Object,SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguration)">
	<summary>
 プロパティの設定情報を元に、プロパティを設定します。
 </summary>
	<param name="target">プロパティを設定する対象のインスタンス。</param>
	<param name="property">対象のプロパティ設定情報。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.SetProperty(System.Object,System.String,System.Object)">
	<summary>
 プロパティ名と、プロパティの型への変換が可能なプロパティ値を表すオブジェクトを元に、
 プロパティを設定します。
 </summary>
	<param name="target">プロパティを設定する対象のインスタンス。</param>
	<param name="propertyName">設定対象のプロパティ名。</param>
	<param name="propertyValue">プロパティの型への変換が可能なプロパティ値を表すオブジェクト。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.SetProperty(System.Object,System.String,System.Object,SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption)">
	<summary>
 プロパティ名と、プロパティの型への変換が可能なプロパティ値を表すオブジェクトを元に、
 プロパティを設定します。
 </summary>
	<param name="target">プロパティを設定する対象のインスタンス。</param>
	<param name="propertyName">設定対象のプロパティ名。</param>
	<param name="propertyValue">プロパティの型への変換が可能なプロパティ値を表すオブジェクト。</param>
	<param name="propertyOptions">プロパティの設定動作を指定する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption"/> から成るビットマスク。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.SetPropertyCore(System.Object,System.String,System.Object,SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption,System.Collections.ICollection,System.ComponentModel.PropertyDescriptorCollection)">
	<summary>
 プロパティを設定する内部処理
 </summary>
	<param name="target">プロパティを設定する対象のインスタンス。</param>
	<param name="propertyName">プロパティ名</param>
	<param name="propertyValue">プロパティに設定する値</param>
	<param name="options__1">プロパティの設定動作を指定する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfiguratorOption"/> から成るビットマスク。</param>
	<param name="exceptList">除外するプロパティ名のリスト。このリストに含まれる名前と一致する設定値は
 無視されます。</param>
	<param name="properties">設定情報を保持する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationCollection"/> 。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.Convert(System.Object,System.Type,System.ComponentModel.TypeConverter)">
	<summary>
 型を変換します。
 </summary>
	<param name="fromValue">変換対象の値</param>
	<param name="destinationType">変換先の型</param>
	<param name="converter">型変換機</param>
	<returns>型変換後の値</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.GetConfiguredProperties(System.Type,SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationSection)">
	<summary>
 指定された型に対するプロパティ設定情報のディクショナリを取得する内部処理
 </summary>
	<param name="type">プロパティ設定情報のディクショナリを取得する対象の型。</param>
	<param name="section">セクション</param>
	<returns>指定された型に対するプロパティ設定情報のディクショナリ。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator">
	<summary>
 構成ファイルによる設定値や <see cref="T:System.Collections.Hashtable"/> のようなディクショナリから、
 インスタンスのプロパティを設定する機能を提供します。
 </summary>
	<remarks>
		<para>このクラスのインスタンスを作成することはできません。
 全ての機能は静的なメソッドとして提供されます。</para>
		<para>このクラスを使用すると、インスタンスのプロパティを、文字列による名前と
 値で設定することができます。主に構成ファイルによる設定値を、インスタンスに
 反映するために使用します。</para>
		<para>プロパティ値がプロパティの型に代入できない型の場合は、
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TypeUtility"/> を使用して型変換が行われます。</para>
		<para>プロパティに <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.ConfigurableAttribute"/> を適用しておくことで、
 このクラスによる設定対象となるかどうかを調整できます。デフォルトは設定対象
 となります。</para>
		<para>このクラスは、設定対象のプロパティを <see cref="T:System.ComponentModel.TypeDescriptor"/> から
 取得します。このため、設定できるプロパティは、クラス定義による静的な
 プロパティとは異なる可能性があります。</para>
		<para>設定するプロパティの名称に「.」を含めて、プロパティの階層を指定する
 こともできます。</para>
		<para>設定対象のプロパティが <see cref="T:System.Collections.IDictionary"/> 実装クラスである
 場合、「ディクショナリ型のプロパティ名.子プロパティ名」という指定で、
 ディクショナリに対して、子プロパティ名とプロパティ値のペアを格納します。
 これは、プロパティとしてディクショナリを公開するような型のための動作です。</para>
	</remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.SyncObjectTable.Item(System.Object)">
	<summary>
 指定のキーで識別される、同期用オブジェクトを取得します。
 </summary>
	<param name="key">識別用のキー。</param>
	<returns>指定のキーで識別されるオブジェクト。
 このオブジェクトは、キー毎に独立したインスタンスになります。</returns>
	<remarks>
		<para>取得される同期用オブジェクトは、このクラスのインスタンス毎に
 独立しています。キーが同じでも、このクラスのインスタンスが別の
 インスタンスの場合は、異なる同期用オブジェクトが取得されます。</para>
	</remarks>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.SyncObjectTable">
	<summary>
 名前や型をキーとする、同期用オブジェクトを管理します。
 キー毎に独立した、同期用のオブジェクトを取得する機能を提供します。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.BusinessSecurityLogger.NLogName">
	<summary>
 NLogのログ名(設定名)
 </summary>
	<returns>ログ名</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.BusinessSecurityLogger.NLogLogger">
	<summary>
 NLogのログ出力クラス
 </summary>
	<returns>NLogLogger</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Logging.BusinessSecurityLogger.Log(System.String,SRS.Standards.MvcFramework.Core.Security.BusinessSecurityType)">
	<summary>
 業務セキュリティログ出力
 </summary>
	<param name="menuId">メニューＩＤ</param>
	<param name="businessSecurity">業務セキュリティタイプ</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.Logging.BusinessSecurityLogger">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
セキュリティチェック(認証・業務権限・業務規制)ログ出力クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.SRSHttpPostedFile.InputStream">
	<summary>
 入力用ストリームを設定/取得します。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.SRSHttpPostedFile.ContentType">
	<summary>
 コンテンツタイプを設定/取得します。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.SRSHttpPostedFile.ContentLength">
	<summary>
 コンテンツ長を取得します。
 </summary>
	<remarks>InputStreamがOpenされた後取得可能</remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.SRSHttpPostedFile.FileName">
	<summary>
 ファイル名を設定/取得します。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.SRSHttpPostedFile.FileId">
	<summary>
 ファイルIDを設定/取得します。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.SRSHttpPostedFile.FilePath">
	<summary>
 ファイルが保存場所(フルパス)を設定/取得します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHttpPostedFile.#ctor(System.Web.HttpPostedFileBase)">
	<summary>
 コンストラクタ
 </summary>
	<param name="httpPostedFileBase">アップロードファイル</param>
	<remarks>HttpPostedFileBaseよりインスタンスを生成</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHttpPostedFile.#ctor(System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="fileId">ファイルID</param>
	<remarks>ファイルIDよりインスタンスを生成</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHttpPostedFile.OpenFile">
	<summary>
 アップロードファイルを読み込み参照可能な状態にします。
 </summary>
	<remarks>処理後は必ずCloseFileを実行してください</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHttpPostedFile.CloseFile">
	<summary>
 アップロードファイルをクローズします。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHttpPostedFile.Dispose(System.Boolean)">
	<summary>
 このオブジェクトによって使用されている全てのリソースを開放します。
 </summary>
	<param name="disposing">廃棄中かどうか</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHttpPostedFile.Dispose">
	<summary>
 このオブジェクトによって使用されている全てのリソースを開放します。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.MVC.SRSHttpPostedFile">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 アップロードファイル管理用クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.SessionBoundObjectPool.Session">
	<summary>
 セッション変数へのアクセッサ
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.SessionBoundObjectPool.Item(System.String)">
	<summary>
 現在の <see cref="T:System.Web.SessionState.HttpSessionState"/> 内に存在する、指定の名前のオブジェクトを
 取得または設定します。
 </summary>
	<param name="name">対象オブジェクトの名前。</param>
	<returns>現在の <see cref="T:System.Web.SessionState.HttpSessionState"/> に存在する、
 指定の名前のオブジェクト。</returns>
	<remarks>
		<para>オブジェクトは、指定された名前で直接セッションに格納されます。
 または、指定された名前で直接セッションから取得されます。</para>
	</remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.SessionBoundObjectPool.Item(System.Type)">
	<summary>
 現在の <see cref="T:System.Web.SessionState.HttpSessionState"/> 内に存在する、指定の型のオブジェクトを
 取得または設定します。
 </summary>
	<param name="type">対象オブジェクトの型。</param>
	<returns>現在の <see cref="T:System.Web.SessionState.HttpSessionState"/> に存在する、
 指定の型のオブジェクト。</returns>
	<remarks>
		<para>オブジェクトは、指定された型のアセンブリ名を含むフルクラス名で、
 直接セッションに格納されます。
 または、指定された型のアセンブリ名を含むフルクラス名で、
 直接セッションから取得されます。</para>
	</remarks>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.SessionBoundObjectPool">
	<summary>
 現在の <see cref="T:System.Web.SessionState.HttpSessionState"/> というスコープで管理されるオブジェクトの
 プールを提供します。オブジェクトは <see cref="T:System.Web.SessionState.HttpSessionState"/> に保持されます。
 このスコープは、ASP.NET環境におけるセッションに対応します。
 </summary>
	<remarks>
		<para>ASP.NETではない環境や、ASP.NET環境でもセッションが利用できない状態で、
 オブジェクトを格納または取得しようとすると、例外がスローされます。</para>
	</remarks>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStampConfigurationSection.Name">
	<summary>
 この構成セクションのセクション名です。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStampConfigurationSection.Section">
	<summary>
		<see cref="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStampConfigurationSection.Name"/> が示す <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStampConfigurationSection"/>
 構成セクションを取得します。
 </summary>
	<value><see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStampConfigurationSection"/> 構成セクション。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStampConfigurationSection.Enabled">
	<summary>
 タイムスタンプの取得が有効かどうかを示す値を取得または設定します。
 </summary>
	<value>タイムスタンプの取得が有効かどうかを示す値。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStampConfigurationSection.Global">
	<summary>
		<see cref="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Current"/> で取得される <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/>
 オブジェクトが、アプリケーション全体で単一のグローバルインスタンスかどうかを
 示す値を取得または設定します。
 </summary>
	<value><see cref="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Current"/> で取得される <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp.Stamper"/>
 オブジェクトが、アプリケーション全体で単一のグローバルインスタンスかどうかを
 示す値。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStampConfigurationSection.BufferSize">
	<summary>
 タイムスタンプ取得用バッファのサイズ（個数）を取得または設定します。
 </summary>
	<value>タイムスタンプ取得用バッファのサイズ（個数）。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStampConfigurationSection.FilePath">
	<summary>
 取得したタイムスタンプを出力するファイルの、ファイル名またはフルパスを
 取得または設定します。
 </summary>
	<value>取得したタイムスタンプを出力するファイルの、ファイル名またはフルパス。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStampConfigurationSection.Encoding">
	<summary>
 取得したタイムスタンプをファイルに出力する際の、エンコーディング名またはコードページを
 取得または設定します。
 </summary>
	<value>取得したタイムスタンプをファイルに出力する際の、エンコーディング名またはコードページ。</value>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStampConfigurationSection">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.TimeStamp"/> クラスの動作を設定する構成セクションです。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.FileUtilities.#ctor">
	<summary>
 ダミーコンストラクタ
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.FileUtilities.CreateTempDirectory">
	<summary>
 一時保存用ディレクトリ生成処理
 </summary>
	<returns>ファイルID</returns>
	<remarks>ファイルIDを自動採番してフォルダを生成します</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.FileUtilities.GetTempDirectory(System.String)">
	<summary>
 指定したファイルIDより一時保存用ディレクトリの物理パスを取得します。
 </summary>
	<param name="fileId">ファイルＩＤ</param>
	<returns>物理パス</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.FileUtilities.MapPath(System.String)">
	<summary>
 アプリケーションフォルダからの相対ファイルパスを元に、絶対ファイルパスを取得します。
 </summary>
	<param name="path">アプリケーションフォルダからの相対ファイルパス。</param>
	<returns>絶対ファイルパス。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Utilities.FileUtilities">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 ファイル操作関連ユーティリィ
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptableBase.IInterceptMessage(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
	<summary>
 メソッドが呼び出された際に、このメソッドに処理が移されます（割り込み処理の入り口になります）。
 割り込み処理メソッドは内部的に呼び出される前提であるため、インターフェイスを
 明示的に実装しています（派生クラスのパブリックなインターフェイスには現れません）。
 </summary>
	<param name="callMessage">メソッドの呼び出しに関する情報を格納している
 <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage"/>。</param>
	<returns>サービス呼び出しの結果情報を格納している <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage"/>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptableBase.InterceptMessage(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
	<summary>
 割り込み処理の基本の流れを実行します。派生クラスで追加の割り込み処理を実装する場合は、
 このメソッドか、<see cref="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptableBase.ProcessMessage(System.Runtime.Remoting.Messaging.IMethodCallMessage)"/> メソッドをオーバーライドしてください。
 このメソッドをオーバーライドする場合は、基本的にオーバーライドしたメソッド内から
 このメソッドを実行して、既定の処理が行われるようにしてください。
 </summary>
	<param name="callMessage">メソッドの呼び出しに関する情報を格納している
 <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage"/>。</param>
	<returns>サービス呼び出しの結果情報を格納している <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage"/>。</returns>
	<remarks>
		<para>このメソッドをオーバーライドするのは、メインの割り込み処理とは別に、割り込み処理
 全体を囲むレベルでの追加処理をさらに実装したい場合になります。メインとなる割り込み処理は、
 基本的に <see cref="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptableBase.ProcessMessage(System.Runtime.Remoting.Messaging.IMethodCallMessage)"/> メソッドをオーバーライドして実装してください。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptableBase.ProcessMessage(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
	<summary>
 割り込み処理のメインを実装します。派生クラスで割り込み処理を実装する場合、
 メインとなる処理はこのメソッドをオーバーライドして実装してください。
 </summary>
	<param name="callMessage">メソッドの呼び出しに関する情報を格納している
 <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage"/>。</param>
	<returns>サービス呼び出しの結果情報を格納している <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage"/>。</returns>
	<remarks>
		<para>既定の実装では、このメソッドは単に <see cref="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptableBase.ExecuteMessage(System.Runtime.Remoting.Messaging.IMethodCallMessage)"/> を
 呼び出します。つまり、特別な追加の割り込み処理は行わず、単に呼び出し対象のメソッドを
 実行します。</para>
		<para>派生クラスでオーバーライドする場合は、オーバーライドしたメソッド内部から、
 このメソッドか <see cref="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptableBase.ExecuteMessage(System.Runtime.Remoting.Messaging.IMethodCallMessage)"/> メソッドのいずれかを実行し、
 呼び出し対象のメソッドに処理を渡します。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptableBase.ExecuteMessage(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
	<summary>
 呼び出し対象となる大元のメソッドを実行します。特に必要でない場合は、
 基本的にこのメソッドはオーバーライドしないでください。
 </summary>
	<param name="callMessage">メソッドの呼び出しに関する情報を格納している
 <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage"/>。</param>
	<returns>サービス呼び出しの結果情報を格納している <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage"/>。</returns>
	<remarks>
		<para>このメソッドは、割り込み処理を行っている対象である、大元のメソッドを
 実行する役割を担います。大元のメソッドの実行処理自体をカスタマイズする必要が
 ない場合は、基本的にこのメソッドをオーバーライドする必要はありません。</para>
	</remarks>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptableBase">
	<summary>
 メソッド呼び出し時の割り込み処理をサポートするクラスの、既定の実装です。
 このクラスは、最も基本の機能と、割り込み処理の入り口を実装します。
 </summary>
	<remarks>
		<para>割り込みをサポートするクラスは、このクラスを継承し、必要な割り込み処理を
 実装します。通常は、プロジェクト共通で必要となる処理を実装した基底クラスを
 作成し、そこから個々の実クラスを派生します。実クラスでは、
 可能な限りそのクラス固有のロジックのみを記述するようにします。</para>
		<para>このクラスは、ファサードなどを実装する際の、基底クラスとして使用されます。</para>
		<para>このクラスは、既定では固有の状態フィールドを持ちません。そのため、
 Singleton 形式のリモート呼び出しでも使用することができます。派生クラスで
 メンバのフィールドを定義する場合は、インスタンスの状態に注意してください。
 Singleton の形でインスタンスを扱う場合、各フィールドは複数の処理で共有される
 ことになります。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Cryptography.CryptoUtility.EncryptoString(System.String)">
	<summary>
 指定された平文を暗号化します。
 </summary>
	<param name="plaintext">暗号化する平文</param>
	<returns>平文から暗号化された暗号文</returns>
	<exception cref="T:System.Security.Cryptography.CryptographicException">暗号化に失敗すると発生します。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Cryptography.CryptoUtility.EncryptoString(System.String,System.String)">
	<summary>
 指定された平文を暗号化します。
 </summary>
	<param name="plaintext">暗号化する平文</param>
	<param name="password">パスワード。指定しない場合、既定のパスワードが使用されます。</param>
	<returns>平文から暗号化された暗号文</returns>
	<exception cref="T:System.Security.Cryptography.CryptographicException">暗号化に失敗すると発生します。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Cryptography.CryptoUtility.EncryptoString(System.String,System.String,System.Int32)">
	<summary>
 指定された平文を暗号化します。
 </summary>
	<param name="plaintext">暗号化する平文</param>
	<param name="password">パスワード。指定しない場合、既定のパスワードが使用されます。</param>
	<param name="keySize">暗号キー長。128, 192, 256のいずれかを指定します。既定は <c>128</c> 。</param>
	<returns>平文から暗号化された暗号文</returns>
	<exception cref="T:System.Security.Cryptography.CryptographicException">暗号化に失敗すると発生します。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Cryptography.CryptoUtility.DecryptoString(System.String)">
	<summary>
 指定された暗号文を復号化します。
 </summary>
	<param name="cryptotext">複合化する暗号文</param>
	<returns>暗号文から復号化された平文</returns>
	<exception cref="T:System.Security.Cryptography.CryptographicException">パスワードが異なるなど、復号化に失敗すると発生します。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Cryptography.CryptoUtility.DecryptoString(System.String,System.String)">
	<summary>
 指定された暗号文を復号化します。
 </summary>
	<param name="cryptotext">複合化する暗号文</param>
	<param name="password">パスワード。指定しない場合、既定のパスワードが使用されます。</param>
	<returns>暗号文から復号化された平文</returns>
	<exception cref="T:System.Security.Cryptography.CryptographicException">パスワードが異なるなど、復号化に失敗すると発生します。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Cryptography.CryptoUtility.DecryptoString(System.String,System.String,System.Int32)">
	<summary>
 指定された暗号文を復号化します。
 </summary>
	<param name="cryptotext">複合化する暗号文</param>
	<param name="password">パスワード。指定しない場合、既定のパスワードが使用されます。</param>
	<param name="keySize">暗号キー長。128, 192, 256のいずれかを指定します。既定は <c>128</c> 。</param>
	<returns>暗号文から復号化された平文</returns>
	<exception cref="T:System.Security.Cryptography.CryptographicException">パスワードが異なるなど、復号化に失敗すると発生します。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Cryptography.CryptoUtility.EncryptoFile(System.String,System.String)">
	<summary>
 指定されたファイルを暗号化します。
 </summary>
	<param name="plainFilePath">暗号化したいファイルのパス。存在しない場合、<see cref="T:System.IO.FileNotFoundException"/> が発生します。</param>
	<param name="saveFilePath">暗号化したファイルを保存するパス。既にァイルが存在する場合、上書きされます。</param>
	<exception cref="T:System.Security.Cryptography.CryptographicException">暗号化に失敗すると発生します。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Cryptography.CryptoUtility.EncryptoFile(System.String,System.String,System.String)">
	<summary>
 指定されたファイルを暗号化します。
 </summary>
	<param name="plainFilePath">暗号化したいファイルのパス。存在しない場合、<see cref="T:System.IO.FileNotFoundException"/> が発生します。</param>
	<param name="saveFilePath">暗号化したファイルを保存するパス。既にァイルが存在する場合、上書きされます。</param>
	<param name="password">パスワード。指定しない場合、既定のパスワードが使用されます。</param>
	<exception cref="T:System.Security.Cryptography.CryptographicException">暗号化に失敗すると発生します。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Cryptography.CryptoUtility.EncryptoFile(System.String,System.String,System.String,System.Int32)">
	<summary>
 指定されたファイルを暗号化します。
 </summary>
	<param name="plainFilePath">暗号化したいファイルのパス。存在しない場合、<see cref="T:System.IO.FileNotFoundException"/> が発生します。</param>
	<param name="saveFilePath">暗号化したファイルを保存するパス。既にァイルが存在する場合、上書きされます。</param>
	<param name="password">パスワード。指定しない場合、既定のパスワードが使用されます。</param>
	<param name="keySize">暗号キー長。128, 192, 256のいずれかを指定します。既定は <c>128</c> 。</param>
	<exception cref="T:System.Security.Cryptography.CryptographicException">暗号化に失敗すると発生します。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Cryptography.CryptoUtility.DecryptoFile(System.String,System.String)">
	<summary>
 指定されたファイルを復号化します。
 </summary>
	<param name="cryptoFilePath">復号化したいファイルのパス。存在しない場合、<see cref="T:System.IO.FileNotFoundException"/> が発生します。</param>
	<param name="saveFilePath">復号化したファイルを保存するパス。既にァイルが存在する場合、上書きされます。</param>
	<exception cref="T:System.Security.Cryptography.CryptographicException">パスワードが異なるなど、復号化に失敗すると発生します。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Cryptography.CryptoUtility.DecryptoFile(System.String,System.String,System.String)">
	<summary>
 指定されたファイルを復号化します。
 </summary>
	<param name="cryptoFilePath">復号化したいファイルのパス。存在しない場合、<see cref="T:System.IO.FileNotFoundException"/> が発生します。</param>
	<param name="saveFilePath">復号化したファイルを保存するパス。既にァイルが存在する場合、上書きされます。</param>
	<param name="password">パスワード。指定しない場合、既定のパスワードが使用されます。</param>
	<exception cref="T:System.Security.Cryptography.CryptographicException">パスワードが異なるなど、復号化に失敗すると発生します。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Cryptography.CryptoUtility.DecryptoFile(System.String,System.String,System.String,System.Int32)">
	<summary>
 指定されたファイルを復号化します。
 </summary>
	<param name="cryptoFilePath">復号化したいファイルのパス。存在しない場合、<see cref="T:System.IO.FileNotFoundException"/> が発生します。</param>
	<param name="saveFilePath">復号化したファイルを保存するパス。既にァイルが存在する場合、上書きされます。</param>
	<param name="password">パスワード。指定しない場合、既定のパスワードが使用されます。</param>
	<param name="keySize">暗号キー長。128, 192, 256のいずれかを指定します。既定は <c>128</c> 。</param>
	<exception cref="T:System.Security.Cryptography.CryptographicException">パスワードが異なるなど、復号化に失敗すると発生します。</exception>
</member><member name="M:SRS.Standards.MvcFramework.Core.Cryptography.CryptoUtility.GenerateKeyFromPassword(System.Byte[]@,System.Byte[]@,System.String,System.Int32)">
	<summary>
 パスワードから暗号化キーと初期化ベクタを生成します。
 </summary>
	<param name="key">共有キーを格納する配列。</param>
	<param name="initializeVector">初期化ベクタを格納する配列</param>
	<param name="password">パスワード。</param>
	<param name="keySize">キーサイズ。</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.Cryptography.CryptoUtility">
	<summary>
 暗号化に関するユーティリティを提供します。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.ExceptionMessageConfiguration.ExceptionType">
	<summary>
 例外とメッセージ管理を行う例外の型を設定/取得
 </summary>
	<returns>例外の型名</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.ExceptionMessageConfiguration.DetailProperty">
	<summary>
 例外の詳細を判定する為に使用するプロパティを設定/取得
 </summary>
	<returns>プロパティ名</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.ExceptionMessageConfiguration.DetailValue">
	<summary>
 例外の詳細を判定する為の値を設定/取得
 </summary>
	<returns>プロパティ値</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.ExceptionMessageConfiguration.MessageId">
	<summary>
 発生した例外に対するメッセージＩＤを設定/取得
 </summary>
	<value>メッセージID</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.ExceptionMessageConfiguration.JudgeTrans">
	<summary>
 発生した例外に対する画面の動作を設定/取得
 </summary>
	<value>JudgeTransType</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.ExceptionMessageConfiguration.RedirectName">
	<summary>
 遷移先を指定
 </summary>
	<returns>遷移先(JudgeTrans=1の場合適用)</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Configuration.ExceptionMessageConfiguration">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 例外発生時の動作・表示メッセージを制御する設定を管理するクラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.DbKind.None">
	<summary>なし</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.DbKind.SQLServer">
	<summary>SQL Server</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.DbKind.Oracle">
	<summary>Oracle</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.DbKind.OLEDB">
	<summary>不明なOLE DB</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Constant.DbKind.Unknown">
	<summary>不明</summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.Constant.DbKind">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 接続DBの種別を表す列挙体。
 </summary>
	<author>MASUDA Kazuya/SRS TS</author>
	<Version>
 001, 2015-09-16, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHttpPostedFileModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
	<summary>
 バインドの処理
 </summary>
	<param name="controllerContext">コントローラコンテキスト</param>
	<param name="bindingContext">バインディングコンテキスト</param>
	<returns>バインド結果オブジェクト</returns>
	<remarks>公式のソースを流用</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHttpPostedFileModelBinder.ChooseFileOrNull(SRS.Standards.MvcFramework.Core.MVC.SRSHttpPostedFile)">
	<summary>
 バインドできなかった場合、Nothingを返す
 </summary>
	<param name="rawFile">バインド後のSRSHttpPostedFile</param>
	<returns>チェック結果オブジェクト</returns>
	<remarks>公式のソース流用</remarks>
</member><member name="T:SRS.Standards.MvcFramework.Core.MVC.SRSHttpPostedFileModelBinder">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 アップロードファイル管理用モデルバインダークラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationSection.Name">
	<summary>
 この構成セクションのセクション名です。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationSection.Section">
	<summary>
		<see cref="F:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationSection.Name"/> が示す <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationSection"/>
 構成セクションを取得します。
 </summary>
	<value><see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationSection"/> 構成セクション。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationSection.Types">
	<summary>
 特定の型に関する設定のコレクションを取得または設定します。
 </summary>
	<value>特定の型に関する設定のコレクション。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationSection.Names">
	<summary>
 名前で指定される設定のコレクションを取得または設定します。
 </summary>
	<value>名前で指定される設定のコレクション。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationSection.XmlNS">
	<summary>
 XML名前空間。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurationSection">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator"/> が使用する構成セクションです。
 この構成セクションには、プロパティの設定情報が記述されます。
 </summary>
	<remarks>
		<para>プロパティの設定情報には、特定の型に対する設定と、型に依存しない、
 名前で識別される設定があります。</para>
	</remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypeConfigurationCollection.Item(System.Type)">
	<summary>
 指定された型に対する構成要素である <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypePropertiesConfiguration"/>
 を取得します。
 </summary>
	<param name="type">構成要素を取得する対象の型。</param>
	<returns>指定された型に対応する構成要素である
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypePropertiesConfiguration"/></returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypeConfigurationCollection.CreateNewElement">
	<summary>
 新しい <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypePropertiesConfiguration"/> を作成します。
 </summary>
	<returns>新しい <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypePropertiesConfiguration"/>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypeConfigurationCollection.CreateNewElement(System.String)">
	<summary>
 作成する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypePropertiesConfiguration"/> の名前を指定して、
 新しい <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypePropertiesConfiguration"/> を作成します。
 </summary>
	<param name="elementName">作成する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypePropertiesConfiguration"/> の名前。</param>
	<returns>新しい <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypePropertiesConfiguration"/>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypeConfigurationCollection.GetElementKey(System.Configuration.ConfigurationElement)">
	<summary>
 指定した構成要素の要素キーを取得します。
 </summary>
	<param name="element">キーを返す <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypePropertiesConfiguration"/>。</param>
	<returns>指定した <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypePropertiesConfiguration"/> のキーとして動作する
 <see cref="T:System.Object"/>。</returns>
	<remarks>
		<para><see cref="T:System.Type"/> がキーとなるため、アセンブリ名を含むフルクラス名を
 キー名として使用します。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypeConfigurationCollection.GetEnumerator1">
	<summary>
 列挙子を取得します。
 </summary>
	<returns>列挙子。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.TypeConfigurationCollection">
	<summary>
 typeConfigurations要素に含まれる、configuration構成要素のコレクションです。
 0個以上の configuration構成要素を含みます。
 </summary>
	<remarks>
		<para>このクラスは、<see cref="T:System.Configuration.ConfigurationElementCollection"/> から派生します。
 構成情報を読み込むために、最小限の機能を実装しています。</para>
	</remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfigurationCollection.Item(System.String)">
	<summary>
 指定された名前に対する構成要素である <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfiguration"/>
 を取得します。
 </summary>
	<param name="name">構成要素を取得する対象の名前。</param>
	<returns>指定された名前に対応する構成要素である
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfiguration"/></returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfigurationCollection.CreateNewElement">
	<summary>
 新しい <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfiguration"/> を作成します。
 </summary>
	<returns>新しい <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfiguration"/>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfigurationCollection.CreateNewElement(System.String)">
	<summary>
 作成する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfiguration"/> の名前を指定して、
 新しい <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfiguration"/> を作成します。
 </summary>
	<param name="elementName">作成する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfiguration"/> の名前。</param>
	<returns>新しい <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfiguration"/>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfigurationCollection.GetElementKey(System.Configuration.ConfigurationElement)">
	<summary>
 指定した構成要素の要素キーを取得します。
 </summary>
	<param name="element">キーを返す <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfiguration"/>。</param>
	<returns>指定した <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfiguration"/> のキーとして動作する
 <see cref="T:System.Object"/>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfigurationCollection.GetEnumerator1">
	<summary>
 列挙子を取得します。
 </summary>
	<returns>列挙子。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfigurationCollection">
	<summary>
 namedConfigurations要素に含まれる、configuration構成要素のコレクションです。
 0個以上の configuration構成要素を含みます。
 </summary>
	<remarks>
		<para>このクラスは、<see cref="T:System.Configuration.ConfigurationElementCollection"/> から派生します。
 構成情報を読み込むために、最小限の機能を実装しています。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfiguration.#ctor">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfiguration"/> クラスの新しいインスタンスを
 初期化します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfiguration.#ctor(System.String)">
	<summary>
 作成する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfiguration"/> の名前を指定して、
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfiguration"/> クラスの新しいインスタンスを初期化します。
 </summary>
	<param name="elementName">作成する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfiguration"/> の名前。</param>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfiguration.Name">
	<summary>
 名前指定される設定の名称を取得または設定します。
 </summary>
	<value>名前指定される設定の名称。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfiguration.Properties">
	<summary>
 名前指定された設定の、プロパティの構成情報を、取得または設定します。
 </summary>
	<value>名前指定された設定の、プロパティの構成情報。</value>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.NamedConfiguration">
	<summary>
 configuration構成要素です。名前指定された設定情報になります。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.NonUpdateAuthorityException.TableName">
	<summary>
 対象テーブル名
 </summary>
	<returns>対象テーブル名</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.NonUpdateAuthorityException.#ctor">
	<summary>
 コンストラクタ
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.NonUpdateAuthorityException.#ctor(System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="tableName">テーブル名</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.NonUpdateAuthorityException.#ctor(System.String,System.Exception)">
	<summary>
 コンストラクタ
 </summary>
	<param name="tableName">テーブル名</param>
	<param name="inner">例外</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.NonUpdateAuthorityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 コンストラクタ
 </summary>
	<param name="info">SerializationInfo</param>
	<param name="context">StreamingContext</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.NonUpdateAuthorityException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 例外の情報をシリアライズします。
 </summary>
	<param name="info">SerializationInfo</param>
	<param name="context">StreamingContext</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.NonUpdateAuthorityException">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 登録更新権利チェックに失敗した際の例外クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.UserInformation.UserId">
	<summary>
 ユーザID
 </summary>
	<returns>ユーザID</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.UserInformation.UserName">
	<summary>
 ユーザ名
 </summary>
	<returns>ユーザ名</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.UserInformation.Organization">
	<summary>
 組織情報
 </summary>
	<returns>組織情報</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.UserInformation.BusinessIdentifyId">
	<summary>
 業務識別ID
 </summary>
	<returns>業務識別ID</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.UserInformation.IPAddress">
	<summary>
 IPアドレス
 </summary>
	<returns>IPアドレス</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.UserInformation.UserAttribute">
	<summary>
 ユーザ属性
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.Information.UserInformation">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 ユーザ情報格納クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.BusinessInformation.BusinessData">
	<summary>
 業務固有情報
 </summary>
	<returns>オブジェクトを返す</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.BusinessInformation.ListKeyCacheData">
	<summary>
 一覧検索キャッシュ情報
 </summary>
	<returns>オブジェクトを返す</returns>
	<remarks>本体は InformationManager から行う</remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.BusinessInformation.ListKeyCachePrimaryKeys">
	<summary>
 一覧検索キャッシュ情報
 </summary>
	<returns>オブジェクトを返す</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.BusinessInformation.ExclusiveUpdateData(System.String)">
	<summary>
 排他制御用データ
 </summary>
	<param name="tableName">テーブル名</param>
	<returns>排他制御用データ</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.BusinessInformation.CultureInfoName">
	<summary>
 表示言語設定
 </summary>
	<returns>表示言語の設定文字列</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Information.BusinessInformation">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 業務共通情報格納クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.SysTraceLogger.NLogName">
	<summary>
 Nlogのログ名(設定名)
 </summary>
	<returns>ログ名</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Logging.SysTraceLogger">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 システムトレースログ出力クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.TraceLoggerBase.NLogName">
	<summary>
 NLogのログ名(設定名)
 </summary>
	<returns>ログ名</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.TraceLoggerBase.NLogLogger">
	<summary>
 NLogのログ出力クラス
 </summary>
	<returns>NLogLogger</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Logging.TraceLoggerBase.Log(System.String,System.String,SRS.Standards.MvcFramework.Core.Logging.MethodTraceType)">
	<summary>
 トレースログを出力
 </summary>
	<param name="className">クラス名</param>
	<param name="methodName">メソッド名</param>
	<param name="methodTrace">開始 or 終了</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.Logging.TraceLoggerBase">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 トレースログ出力基底クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.ExtendedControllerFactory.GetControllerSessionBehavior(System.Web.Routing.RequestContext,System.Type)">
	<summary>
 コントローラのセッション動作を返します。
 </summary>
	<param name="requestContext">HTTPリクエスト情報。</param>
	<param name="controllerType">コントローラの型。</param>
	<returns>セッション動作。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.MVC.ExtendedControllerFactory">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 アクションメソッド毎に、セッションの有効無効を切替えるための属性。
 </summary>
	<author>MASUDA Kazuya/SRS TS</author>
	<Version>
 001, 2017-07-04, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSNumberValidationAttribute.#ctor(System.Boolean,System.Double,System.Double,System.Int32)">
	<summary>
 コンストラクタ。
 </summary>
	<param name="required">必須項目かどうか。</param>
	<param name="maxValue">最大値。</param>
	<param name="minValue">最小値。</param>
	<param name="decimalLength">小数桁数。</param>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.SRSNumberValidationAttribute.MaxValue">
	<summary>最大値。</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.SRSNumberValidationAttribute.MinValue">
	<summary>最小値。</summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.SRSNumberValidationAttribute.DecimalLength">
	<summary>小数桁数。</summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSNumberValidationAttribute.GetInputMaxLength">
	<summary>
 TextBoxに入力可能な最大桁を求めます。
 </summary>
	<returns>TextBoxに入力可能な最大桁。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.MVC.SRSNumberValidationAttribute">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 モデル数値項目用バリデーション属性クラス。
 </summary>
	<author>MASUDA Kazuya/SRS TS</author>
	<Version>
 001, 2015-09-09, 新規作成
 002, 2015-11-09 MASUDA Kazuya/SRS TS, MaxLengthの算出を、プラス記号と桁区切り記号は考慮しないよう変更
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSYMDValidationAttribute.#ctor(System.Boolean)">
	<summary>
 コンストラクタ。
 </summary>
	<param name="required">必須項目かどうか。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSYMDValidationAttribute.GetInputMaxLength">
	<summary>
 TextBoxに入力可能な最大桁を求めます。
 </summary>
	<returns>TextBoxに入力可能な最大桁。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.MVC.SRSYMDValidationAttribute">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 モデル年月日項目用バリデーション属性クラス。
 </summary>
	<author>MASUDA Kazuya/SRS TS</author>
	<Version>
 001, 2015-09-09, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ScopedVariable.#ctor(System.String,System.Object)">
	<summary>
 保持するオブジェクトの領域名とオブジェクトを指定して、<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ScopedVariable"/>
 クラスの新しいインスタンスを初期化します。オブジェクトは <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/>
 に保存されます。
 </summary>
	<param name="scopeName">保持するオブジェクトの領域名。</param>
	<param name="value">保持するオブジェクト。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ScopedVariable.#ctor(System.String)">
	<summary>
 保持するオブジェクトの領域名を指定して、<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ScopedVariable"/>
 クラスの新しいインスタンスを初期化します。このオーバーロードでは、
 オブジェクトは保存されず、領域のネスト数だけが保持されます。
 </summary>
	<param name="scopeName">保持するオブジェクトの領域名。</param>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ScopedVariable.Value">
	<summary>
 保持されているオブジェクトを取得します。
 </summary>
	<value>保持されているオブジェクト。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ScopedVariable.NestCount">
	<summary>
 同じ領域名でチェインされているオブジェクトの数を取得します。
 </summary>
	<value>同じ領域名でチェインされているオブジェクトの数。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ScopedVariable.Outside">
	<summary>
 同じ領域名で前回まで保持されていた、チェインの後ろの <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ScopedVariable"/>
 を取得します。
 </summary>
	<value>チェインの後ろの <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ScopedVariable"/>。</value>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ScopedVariable.Dispose">
	<summary>
 このクラスのインスタンスを破棄します。現在のオブジェクトは <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/>
 から削除され、チェインの後ろのオブジェクトが現在のオブジェクトとして復帰します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ScopedVariable.Current(System.String)">
	<summary>
 指定の領域名で現在保持されている、<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ScopedVariable"/> を取得します。
 現在のオブジェクトにアクセスするには、このメソッドで現在の <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ScopedVariable"/>
 インスタンスを取得後、その <see cref="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ScopedVariable.Value"/> プロパティを使用します。
 </summary>
	<param name="scopeName">現在の <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ScopedVariable"/> を取得する対象の領域名。</param>
	<returns>指定の領域名に保持されている、現在の <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ScopedVariable"/>。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ScopedVariable">
	<summary>
		<see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> に、特定の処理区間で有効となる変数を保持する機能を
 提供します。保持されたオブジェクトには、処理区間の間であればどこからでも
 グローバルにアクセスできます。同じメソッド内である必要はありません。
 </summary>
	<remarks>
		<para>このクラスは、名前で識別されるオブジェクトを、<see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> にスタック
 のようなイメージで保持する機能を提供します。保持されたオブジェクトには、処理区間の間で
 あればどこからでもグローバルにアクセスできます。同じメソッド内である必要はありません。</para>
		<para>このクラスのインスタンスを作成すると、指定された名前で <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> に
 オブジェクトを保持します。同じ名前で保持されていたオブジェクトは、新しいオブジェクトの後ろに
 チェインされる形で保持されます。このクラスのインスタンスを破棄すると、作成時に後ろにチェインされた
 オブジェクトが復帰します。動作は名前つきのスタックのようなイメージになります。</para>
		<para>現在保持されているオブジェクトにアクセスする場合は、<see cref="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ScopedVariable.Current(System.String)"/> メソッドで現在の
 <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ScopedVariable"/> を取得し、その <see cref="T:System.ValueType"/> プロパティを使用します。</para>
		<para>このクラスは、using 句とともに使用することを想定しています。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ReflectionUtility.#ctor">
	<summary>
 ダミーコンストラクタ
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ReflectionUtility.GetPropertyInfo``1(System.Type,System.String)">
	<summary>
 リフレクションを利用したプロパティ情報を取得します。
 情報はキャッシュします。
 </summary>
	<typeparam name="T">戻値の型。</typeparam>
	<param name="targetType">取得対象オブジェクト型。</param>
	<param name="propertyName">取得するプロパティ名。</param>
	<returns>プロパティ情報。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ReflectionUtility.GetGetterLambda``1(System.Type,System.String)">
	<summary>
 リフレクションを利用したプロパティ情報取得メソッドを取得します。
 情報はキャッシュします。
 </summary>
	<typeparam name="T">戻値の型。</typeparam>
	<param name="targetType">取得対象オブジェクト型。</param>
	<param name="propertyName">取得するプロパティ名。</param>
	<returns>プロパティの取得メソッド情報。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ReflectionUtility.GetSetterLambda``1(System.Type,System.String)">
	<summary>
 リフレクションを利用したプロパティ情報取得メソッドを取得します。
 情報はキャッシュします。
 </summary>
	<typeparam name="T">戻値の型。</typeparam>
	<param name="targetType">取得対象オブジェクト型。</param>
	<param name="propertyName">取得するプロパティ名。</param>
	<returns>プロパティの取得メソッド情報。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ReflectionUtility.GetMethodLambda``1(System.Type,System.String,System.Type[])">
	<summary>
 リフレクションを利用してメソッドを取得します。
 情報はキャッシュします。
 </summary>
	<typeparam name="F">返すラムダ式の型。</typeparam>
	<param name="targetType">取得対象オブジェクト型。</param>
	<param name="propertyName">取得するプロパティ名。</param>
	<param name="paramTypes">メソッドの引数型の配列。</param>
	<returns>プロパティの取得メソッド情報。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ReflectionUtility.GetReflectionPropertyValue``1(System.Object,System.String)">
	<summary>
 リフレクションを利用して、プロパティ値を取得します。
 </summary>
	<typeparam name="T">取得する型。</typeparam>
	<param name="targetObject">取得対象オブジェクト。</param>
	<param name="propertyName">取得するプロパティ名。</param>
	<returns>プロパティ値。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ReflectionUtility.SetReflectionPropertyValue``1(System.Object,System.String,``0)">
	<summary>
 リフレクションを利用して、プロパティ値を設定します。
 </summary>
	<typeparam name="T">設定する型。</typeparam>
	<param name="targetObject">設定対象オブジェクト。</param>
	<param name="propertyName">設定するプロパティ名。</param>
	<param name="value">設定する値。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ReflectionUtility.AddReflectionEventHandler(System.Object,System.String,System.Object,System.String,System.Reflection.BindingFlags)">
	<summary>
 イベントハンドラを設定します。
 </summary>
	<param name="eventOwner">イベントを発生させるオブジェクト。</param>
	<param name="eventName">イベント名。</param>
	<param name="handlerOwner">ハンドラを保持しているオブジェクト。</param>
	<param name="handlerName">イベントハンドラ名。</param>
	<param name="bindingFlag">イベントハンドラを取得するときのオプション。既定では Private なインスタンスメソッドを探します。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ReflectionUtility.AddReflectionSharedEventHandler(System.Object,System.String,System.Type,System.String,System.Reflection.BindingFlags)">
	<summary>
 共有イベントハンドラを設定します。
 </summary>
	<param name="eventOwner">イベントを発生させるオブジェクト。</param>
	<param name="eventName">イベント名。</param>
	<param name="handlerType">ハンドラを保持している型。</param>
	<param name="handlerName">イベントハンドラ名。</param>
	<param name="bindingFlag">イベントハンドラを取得するときのオプション。既定では Private なインスタンスメソッドを探します。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ReflectionUtility.RemoveReflectionEventHandler(System.Object,System.String,System.Object,System.String,System.Reflection.BindingFlags)">
	<summary>
 イベントハンドラを解除します。
 </summary>
	<param name="eventOwner">イベントを発生させるオブジェクト。</param>
	<param name="eventName">イベント名。</param>
	<param name="handlerOwner">ハンドラを保持しているオブジェクト。</param>
	<param name="handlerName">イベントハンドラ名。</param>
	<param name="bindingFlag">イベントハンドラを取得するときのオプション。既定では Private なインスタンスメソッドを探します。</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.Utilities.ReflectionUtility">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＳＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 Reflection 用ユーティリティを提供します。
 </summary>
	<author>kmasuda/SRS</author>
	<Version>
 001, 2015-10-27, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.DataSelectConfiguration.Name">
	<summary>
 データセレクト名を設定・取得します。
 </summary>
	<returns>プロパティ名</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Configuration.DataSelectConfiguration.Queries">
	<summary>
 言語コード(ja-JP等)に対応するSQLクエリを設定・取得します。
 言語コード指定なしの場合、空文字列で登録します。
 </summary>
	<returns>言語コードとSQLクエリが対応するディクショナリ。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Configuration.DataSelectConfiguration">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 言語コードに応じたSQL文設定を管理するクラス
 </summary>
	<author>Kazuya MASUDA/SRS TS</author>
	<Version>
 001, 2015-06-30, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.UserFacadeTraceLogger.NLogName">
	<summary>
 NLogのログ名(設定名)
 </summary>
	<returns>ログ名</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Logging.UserFacadeTraceLogger">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 ユーザ(Facade)トレースログ出力クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHMSValidationAttribute.#ctor(System.Boolean)">
	<summary>
 コンストラクタ。
 </summary>
	<param name="required">必須項目かどうか。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHMSValidationAttribute.GetInputMaxLength">
	<summary>
 TextBoxに入力可能な最大桁を求めます。
 </summary>
	<returns>TextBoxに入力可能な最大桁。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.MVC.SRSHMSValidationAttribute">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 モデル時分秒項目用バリデーション属性クラス。
 </summary>
	<author>MASUDA Kazuya/SRS TS</author>
	<Version>
 001, 2015-11-25, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.Security.SecurityRegulationModel.SystemName">
	<summary>
 システム名を設定/取得
 </summary>
	<returns>システム名</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Security.SecurityRegulationModel.SecurityCheck">
	<summary>
 チェック結果を設定/取得
 </summary>
	<returns>チェック結果(BusinessSecurityType)</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Security.SecurityRegulationModel.CanInsert">
	<summary>
 登録権限を設定/取得
 </summary>
	<returns>登録権限</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Security.SecurityRegulationModel.CanUpdate">
	<summary>
 更新権限を設定/取得
 </summary>
	<returns>更新権限</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Security.SecurityRegulationModel.CanDelete">
	<summary>
 削除権限を設定/取得
 </summary>
	<returns>削除権限</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Security.SecurityRegulationModel.CanSearch">
	<summary>
 検索権限を設定/取得
 </summary>
	<returns>検索権限</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Security.SecurityRegulationModel">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 業務権限・業務規制チェック用モデルクラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ModelHelper.#ctor">
	<summary>
 ダミーコンストラクタ
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ModelHelper.GetPropertyFullName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
	<summary>
 指定されたプロパティの名前を取得
 指定されたプロパティが階層構造であれば階層構造も合わせて取得する
 </summary>
	<typeparam name="TModel">基準となるモデルの型</typeparam>
	<typeparam name="TValue">プロパティの型</typeparam>
	<param name="modelProperty">プロパティ</param>
	<returns>プロパティ名</returns>
	<remarks>業務エラー発生時、モデルにエラー情報を設定する際に使用</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ModelHelper.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
	<summary>
 指定されたプロパティの名前を取得
 </summary>
	<typeparam name="TModel">基準となるモデルの型</typeparam>
	<typeparam name="TValue">プロパティの型</typeparam>
	<param name="modelProperty">プロパティ</param>
	<returns>プロパティ名</returns>
	<remarks>データアクセス時にパラメータ名、主キー名をモデルから取得したい場合に使用</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ModelHelper.GetDisplayName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
	<summary>
 指定されたプロパティのDisplayName属性を取得する
 </summary>
	<typeparam name="TModel">基準となるモデルの型</typeparam>
	<typeparam name="TValue">プロパティの型</typeparam>
	<param name="modelProperty">プロパティ</param>
	<returns>DisplayName属性の値</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ModelHelper.ModelCast``2(``0)">
	<summary>
 任意の型オブジェクトを、一致するプロパティを引き継いで任意の型に変換します。
 </summary>
	<typeparam name="TClass">元の型。</typeparam>
	<typeparam name="TResult">変換先の型。</typeparam>
	<param name="model">対象オブジェクト。</param>
	<returns>変換したオブジェクト。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ModelHelper.CanConvertType(System.Object@,System.Type,System.Type)">
	<summary>
 型を変換できるかどうか判定し、必要な場合はデータ変換を行います。
 </summary>
	<param name="value">値。変換できる場合、変換されます。</param>
	<param name="fromType">変換元の型。</param>
	<param name="toType">変換先の型。</param>
	<returns>変換できるとき <c>True</c>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ModelHelper.GetExpressionText(System.Linq.Expressions.LambdaExpression)">
	<summary>
 ラムダ式からモデル名を取得します。
 (IEnumerableのインデックス引数対応版)
 </summary>
	<param name="expression">ラムダ式。</param>
	<returns>モデル名。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ModelHelper.GetIndexerInvocation(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
	<summary>
 インデックス呼出の文字表現を取得します。
 </summary>
	<param name="expression">ラムダ式。</param>
	<param name="parameters">実行パラメータ式。</param>
	<returns>インデックス呼出の文字表現。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ModelHelper.IsSingleArgumentIndexer(System.Linq.Expressions.Expression)">
	<summary>
 1引数のインデックス呼出かどうかを判定します。
 </summary>
	<param name="expression">ラムダ式。</param>
	<returns>判定結果。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Utilities.ModelHelper">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 モデルヘルパー
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="F:SRS.Standards.MvcFramework.Core.Cryptography.HashType.SHA256">
	<summary>
 SHAアルゴリズムで256bitのハッシュ値を生成します。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Cryptography.HashType.SHA512">
	<summary>
 SHAアルゴリズムで512bitのハッシュ値を生成します。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.Cryptography.HashType">
	<summary>
 ハッシュアルゴリズムを表します。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.IO.PaddingType.RightSpace">
	<summary>
 文字を左詰めとし、規定の長さまで右を空白で埋める。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.IO.PaddingType.LeftSpace">
	<summary>
 文字を右詰めとし、規定の長さまで左を空白で埋める。
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.IO.PaddingType.LeftZero">
	<summary>
 文字を右詰めとし、規定の長さまで左を 0 で埋める。
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.IO.PaddingType">
	<summary>
 固定長文字列の埋め方を指定する列挙体。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSYMValidationAttribute.#ctor(System.Boolean)">
	<summary>
 コンストラクタ。
 </summary>
	<param name="required">必須項目かどうか。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSYMValidationAttribute.GetInputMaxLength">
	<summary>
 TextBoxに入力可能な最大桁を求めます。
 </summary>
	<returns>TextBoxに入力可能な最大桁。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.MVC.SRSYMValidationAttribute">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 モデル年月項目用バリデーション属性クラス。
 </summary>
	<author>MASUDA Kazuya/SRS TS</author>
	<Version>
 001, 2015-09-09, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.IScopeBoundObjectPool.Item(System.String)">
	<summary>
 このインターフェイス実装クラスが対象としている、特定スコープ内に存在する、
 指定の名前のオブジェクトを取得または設定します。
 </summary>
	<param name="name">対象オブジェクトの名前。</param>
	<returns>特定スコープ内に存在する、指定の名前のオブジェクト。</returns>
	<remarks>
		<para>このメソッドは、キーとして指定された名前を使用します。特定スコープ
 内において、特定の名称のオブジェクトを管理するために使用します。</para>
	</remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.IScopeBoundObjectPool.Item(System.Type)">
	<summary>
 このインターフェイス実装クラスが対象としている、特定スコープ内に存在する、
 指定の型のオブジェクトを取得または設定します。
 </summary>
	<param name="type">対象オブジェクトの型。</param>
	<returns>特定スコープ内に存在する、指定の型のオブジェクト。</returns>
	<remarks>
		<para>このメソッドは、キーとしてオブジェクトの型を使用します。特定スコープ
 内において、特定の型の単一インスタンスを管理するために使用します。</para>
	</remarks>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.IScopeBoundObjectPool">
	<summary>
 特定のスコープ内で有効となるオブジェクトのプール機能を提供する
 インターフェイスを定義します。実際の特定スコープは、このインターフェイスの
 実装クラスによって、実装または使用されます。
 </summary>
	<remarks>
		<para>特定のスコープとは、例えばアプリケーション全体、セッション、リクエスト、
 スレッド等を示します。このインターフェイスの実装クラスが、各種スコープに対する
 透過的なアクセスを提供します。</para>
	</remarks>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.StaticObjectPool.Pool">
	<summary>
 オブジェクトを保持する <see cref="T:System.Collections.Hashtable"/> を取得します。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.StaticObjectPool.Item(System.String)">
	<summary>
 静的領域のディクショナリに存在する、指定の名前のオブジェクトを取得または設定します。
 </summary>
	<param name="name">対象オブジェクトの名前。</param>
	<returns>静的領域のディクショナリに存在する、指定の名前のオブジェクト。</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.StaticObjectPool.Item(System.Type)">
	<summary>
 静的領域のディクショナリに存在する、指定の型のオブジェクトを取得または設定します。
 </summary>
	<param name="type">対象オブジェクトの型。</param>
	<returns>静的領域のディクショナリに存在する、指定の型のオブジェクト。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.StaticObjectPool">
	<summary>
 静的領域というスコープで管理されるオブジェクトのプールを提供します。
 オブジェクトは、このクラスの静的なフィールドがもつ <see cref="T:System.Collections.Hashtable"/>
 に保持されます。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Utilities.ConcurrentTableDictionary`3.Item(`0,`1)">
	<summary>
 項目を取得、設定します。
 </summary>
	<param name="row">行番号。</param>
	<param name="column">列番号。</param>
</member><member name="P:SRS.Standards.MvcFramework.Core.Utilities.ConcurrentTableDictionary`3.Item(`0)">
	<summary>
 項目を取得、設定します。
 </summary>
	<param name="row">行番号。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ConcurrentTableDictionary`3.HasItem">
	<summary>
 項目があるかどうかを返します。
 </summary>
	<returns>項目が存在する場合 <c>True</c> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ConcurrentTableDictionary`3.HasItem(`0)">
	<summary>
 項目があるかどうかを返します。
 </summary>
	<param name="row">行番号。</param>
	<returns>項目が存在する場合 <c>True</c> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ConcurrentTableDictionary`3.HasItem(`0,`1)">
	<summary>
 項目があるかどうかを返します。
 </summary>
	<param name="row">行番号。</param>
	<param name="column">列番号。</param>
	<returns>項目が存在する場合 <c>True</c> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ConcurrentTableDictionary`3.Clear">
	<summary>
 項目を全て削除します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ConcurrentTableDictionary`3.Clear(`0)">
	<summary>
 指定した行の項目を全て削除します。
 </summary>
	<param name="rowIndex">行番号。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ConcurrentTableDictionary`3.GetEnumerator">
	<summary>
 列挙子を取得します。
 </summary>
	<returns>列挙子。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ConcurrentTableDictionary`3.CopyTo(System.Array,System.Int32)">
	<summary>
 項目をコピーします。(ダミー)
 </summary>
	<param name="array">配列。</param>
	<param name="index">インデックス。</param>
</member><member name="P:SRS.Standards.MvcFramework.Core.Utilities.ConcurrentTableDictionary`3.Count">
	<summary>
 項目の数を取得します。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Utilities.ConcurrentTableDictionary`3.IsSynchronized">
	<summary>
 アクセスが同期されているかどうかを取得します。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Utilities.ConcurrentTableDictionary`3.SyncRoot">
	<summary>
 アクセスを同期するために使用するオブジェクトを取得します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ConcurrentTableDictionary`3.ForEach(System.Action{`0,`1,`2})">
	<summary>
 含まれる全ての Leaf node について、指定した処理を実行します。
 </summary>
	<param name="action">実行する処理。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ConcurrentTableDictionary`3.ForEach(System.Action{`0})">
	<summary>
 含まれる 1 つめの項目について、指定した処理を実行します。
 </summary>
	<param name="action">実行する処理。</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.Utilities.ConcurrentTableDictionary`3">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＳＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 テーブル型の項目に紐付く任意型を保持するための Dictionary 。スレッドセーフ。
 </summary>
	<author>MASUDA Kazuya/SRS</author>
	<Version>
 001, 2015-10-27, 新規作成
 002, 2016-10-12, MASUDA Kazuya/SRS, スレッドセーフにした
 </Version>
	<typeparam name="R">行の型。</typeparam>
	<typeparam name="S">列の型。</typeparam>
	<typeparam name="T">保持する値の型。</typeparam>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.GetPropertyName``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
	<summary>
 指定されたプロパティの名前を取得
 </summary>
	<typeparam name="TModel">基準となるモデルの型</typeparam>
	<typeparam name="TValue">プロパティの型</typeparam>
	<param name="model">基準となるモデル</param>
	<param name="modelProperty">プロパティ</param>
	<returns>プロパティ名</returns>
	<remarks>データアクセス時にパラメータ名、主キー名をモデルから取得したい場合に使用</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.GetPropertyName``2(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
	<summary>
 指定されたプロパティの名前を取得
 </summary>
	<typeparam name="TModel">基準となるモデルの型</typeparam>
	<typeparam name="TValue">プロパティの型</typeparam>
	<param name="model">基準となるモデル</param>
	<param name="modelProperty">プロパティ</param>
	<returns>プロパティ名</returns>
	<remarks>データアクセス時にパラメータ名、主キー名をモデルから取得したい場合に使用</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.GetPropertyFullName``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
	<summary>
 指定されたプロパティの名前を取得
 指定されたプロパティが階層構造であれば階層構造も合わせて取得する
 </summary>
	<typeparam name="TModel">基準となるモデルの型</typeparam>
	<typeparam name="TValue">プロパティの型</typeparam>
	<param name="model">基準となるモデル</param>
	<param name="modelProperty">プロパティ</param>
	<returns>プロパティ名(階層構造含む)</returns>
	<remarks>入力チェックエラーなどで、項目名をモデルから取得したい場合に使用</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.GetPropertyFullName``2(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
	<summary>
 指定されたプロパティの名前を取得
 指定されたプロパティが階層構造であれば階層構造も合わせて取得する
 </summary>
	<typeparam name="TModel">基準となるモデルの型</typeparam>
	<typeparam name="TValue">プロパティの型</typeparam>
	<param name="model">基準となるモデル</param>
	<param name="modelProperty">プロパティ</param>
	<returns>プロパティ名(階層構造含む)</returns>
	<remarks>入力チェックエラーなどで、項目名をモデルから取得したい場合に使用</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.GetDisplayName``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
	<summary>
 指定されたプロパティのDisplayName属性を取得する
 </summary>
	<typeparam name="TModel">基準となるモデルの型</typeparam>
	<typeparam name="TValue">プロパティの型</typeparam>
	<param name="model">基準となるモデル</param>
	<param name="modelProperty">プロパティ</param>
	<returns>DisplayNameの値</returns>
	<remarks>DisplayNameをモデルから取得したい場合に使用</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.GetDisplayName``2(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
	<summary>
 指定されたプロパティのDisplayName属性を取得する
 </summary>
	<typeparam name="TModel">基準となるモデルの型</typeparam>
	<typeparam name="TValue">プロパティの型</typeparam>
	<param name="model">基準となるモデル</param>
	<param name="modelProperty">プロパティ</param>
	<returns>DisplayNameの値</returns>
	<remarks>DisplayNameをモデルから取得したい場合に使用</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.SetValidateMember(SRS.Standards.MvcFramework.Core.Facade.IViewModel,SRS.Standards.MvcFramework.Core.Facade.ValidLevelType,System.String,System.String,System.String[])">
	<summary>
 モデルにエラー・警告・致命発生を通知する
 </summary>
	<param name="model">モデル</param>
	<param name="validLevel">検証結果レベル</param>
	<param name="propertyName">対象のプロパティ名(階層込で設定する)</param>
	<param name="messageId">メッセージID</param>
	<param name="messageParams">メッセージ置換文字列(メッセージIDも可)</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.GetValidLevel(SRS.Standards.MvcFramework.Core.Facade.IViewModel,System.String)">
	<summary>
 モデルの指定プロパティに設定されたエラー状態を取得する
 </summary>
	<param name="model">モデル</param>
	<param name="propertyName">対象のプロパティ名(階層込で設定する)</param>
	<returns>モデルの指定プロパティに設定されたエラー状態</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.GetText(System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String)">
	<summary>
 コンボボックス項目から、値をキーにして表示ラベルを取得します。存在しない場合は空文字列を返します。
 </summary>
	<param name="data">コンボボックス項目</param>
	<param name="key">取得する項目の値</param>
	<returns>表示ラベル。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.GetText(System.Collections.Generic.IEnumerable{SRS.Standards.MvcFramework.Core.MVC.SRSSelectListItem},System.String)">
	<summary>
 コンボボックス項目から、値をキーにして表示ラベルを取得します。存在しない場合は空文字列を返します。
 </summary>
	<param name="data">コンボボックス項目</param>
	<param name="key">取得する項目の値</param>
	<returns>表示ラベル。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.ModelCast``2(``0)">
	<summary>
 任意の型オブジェクトを、一致するプロパティを引き継いで任意の型に変換します。
 </summary>
	<typeparam name="TClass">元の型。</typeparam>
	<typeparam name="TResult">変換先の型。</typeparam>
	<param name="model">対象オブジェクト。</param>
	<returns>変換したオブジェクト。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.ModelCast``2(System.Collections.Generic.IEnumerable{``0})">
	<summary>
 任意の型オブジェクトを、一致するプロパティを引き継いで任意の型に変換します。
 </summary>
	<typeparam name="TClass">元の型。</typeparam>
	<typeparam name="TResult">変換先の型。</typeparam>
	<param name="model">対象オブジェクト。</param>
	<returns>変換したオブジェクト。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsFullwidth(System.Char)">
	<summary>
 対象の文字が全角文字か判定します。
 </summary>
	<param name="testValue">検査対象文字</param>
	<returns>全角文字ならば <c>True</c>、そうでなければ<c>False</c> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsHalfwidth(System.Char)">
	<summary>
 対象の文字が半角文字か判定します。
 </summary>
	<param name="testValue">検査対象文字</param>
	<returns>半角文字ならば <c>True</c>、そうでなければ<c>False</c> 。</returns>
	<remarks>SJISに無い文字は全て全角と見做す。</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsDigit(System.Char)">
	<summary>
 対象の文字が数字かどうか判定します。
 </summary>
	<param name="testValue">検査対象文字</param>
	<returns>数字ならば <c>True</c>、そうでなければ<c>False</c> 。</returns>
	<remarks>対象文字が数字か判定する</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsAlphabet(System.Char)">
	<summary>
 対象文字がアルファベットかどうか判定します。
 </summary>
	<param name="testValue">検査対象文字</param>
	<returns>英字ならば <c>True</c>、そうでなければ<c>False</c> 。</returns>
	<remarks>対象文字が英字か判定する</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsHalfwidthKatakana(System.Char)">
	<summary>
 対象文字が半角カタカナか判定します。
 </summary>
	<param name="testValue">検査対象文字</param>
	<returns>半角カタカナならば <c>True</c>、そうでなければ<c>False</c> 。</returns>
	<remarks>対象文字が半角カタカナか判定する</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsNonAsciiSymbol(System.Char)">
	<summary>
 対象文字がASCII外の記号かどうか判定します。
 </summary>
	<param name="testValue">検査対象文字</param>
	<returns>英字ならば <c>True</c>、そうでなければ<c>False</c> 。</returns>
	<remarks>対象文字がASCII外の記号か判定する</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.GetEastAsianWidth(System.Char)">
	<summary>
 対象のUnicode East Asian Width種別を求めます。
 </summary>
	<param name="testValue">検査対象文字</param>
	<returns>Unicode East Asian Width種別。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.GetBitInvertString(System.String)">
	<summary>
 テキストの Shit-JIS エンコードでビット反転した文字列を取得します。
 </summary>
	<param name="source">対象の文字列</param>
	<returns>テキストの Shit-JIS エンコードでビット反転した文字列</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.GetEncryptedString(System.String,System.String,System.Int32)">
	<summary>
 暗号化した文字列を取得します。
 </summary>
	<param name="source">対象の文字列</param>
	<param name="password">パスワード。指定しない場合、既定のパスワードが使用されます。</param>
	<param name="keySize">暗号キー長。128, 192, 256のいずれかを指定します。既定は <c>128</c> 。</param>
	<returns>暗号化した文字列</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.GetDecryptedString(System.String,System.String,System.Int32)">
	<summary>
 暗号化した文字列を復号化します。
 </summary>
	<param name="source">対象の文字列</param>
	<param name="password">パスワード。指定しない場合、既定のパスワードが使用されます。</param>
	<param name="keySize">暗号キー長。128, 192, 256のいずれかを指定します。既定は <c>128</c> 。</param>
	<returns>復号化した文字列</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.GetHashString(System.String,SRS.Standards.MvcFramework.Core.Cryptography.HashType,System.Text.Encoding)">
	<summary>
 文字列のハッシュ値を取得します。
 </summary>
	<param name="source">対象の文字列</param>
	<param name="hashType">使用するハッシュアルゴリズム。既定は <see cref="F:SRS.Standards.MvcFramework.Core.Cryptography.HashType.SHA256"/> 。</param>
	<param name="encoding">ハッシュを計算する際に使用する文字エンコード。既定は <see cref="P:System.Text.Encoding.UTF8"/> 。</param>
	<returns>テキストのハッシュ値を表す16進数文字列</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.GetTextLength(System.String)">
	<summary>
 テキストの文字数を取得します。
 </summary>
	<param name="target">対象の文字列</param>
	<returns>テキストの文字数</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.GetByteLength(System.String)">
	<summary>
 テキストの Shit-JIS エンコードでのバイト数を取得します。
 </summary>
	<param name="source">対象の文字列</param>
	<returns>テキストの Shit-JIS エンコードでのバイト数</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.GetByteLength(System.String,System.Text.Encoding)">
	<summary>
 指定されたエンコードに変換されたテキストのバイト数を取得します。
 </summary>
	<param name="source">対象の文字列</param>
	<param name="encoding">変換するエンコード</param>
	<returns>指定されたエンコードに変換されたテキストのバイト数</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.GetByteLength(System.String,System.Int32)">
	<summary>
 指定されたコードページのエンコードに変換されたテキストのバイト数を取得します。
 </summary>
	<param name="source">対象の文字列</param>
	<param name="codePage">変換するエンコードのコードページ</param>
	<returns>指定されたコードページのエンコードに変換されたテキストのバイト数</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.Surround(System.String,System.Char)">
	<summary>
 指定された文字で文字列を囲みます。
 </summary>
	<param name="source">対象の文字列</param>
	<param name="value">囲む文字列</param>
	<returns>囲み処理後の文字列。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsNullOrEmpty(System.String)">
	<summary>
 指定された <see cref="T:System.String"/> オブジェクトが Nothing または <see cref="T:System.String"/> 文字列であるかどうかを判定します。
 </summary>
	<param name="source">検査対象文字列</param>
	<returns>指定された <see cref="T:System.String"/> オブジェクトが Nothing または <see cref="T:System.String"/> ならば <c>True</c>、そうでなければ <c>False</c> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsNullOrWhiteSpace(System.String)">
	<summary>
 指定された <see cref="T:System.String"/> オブジェクトが Nothing または <see cref="T:System.String"/> 文字列か、空白文字列だけで構成でされているかどうかを判定します。
 </summary>
	<param name="source">検査対象文字列</param>
	<returns>指定された <see cref="T:System.String"/> オブジェクトが Nothing または <see cref="T:System.String"/> または空白文字だけならば <c>True</c>、そうでなければ <c>False</c> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsIncludeHalfwidthChar(System.String)">
	<summary>
 対象の文字列に半角文字が含まれるか判定します。
 </summary>
	<param name="testValue">検査対象文字列</param>
	<returns>半角文字が含まれれば <c>True</c>、そうでなければ<c>False</c> 。</returns>
	<remarks>
 文字列に半角文字が含まれるか判定
 先頭から検索.見つかった時点でReturn
 </remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsIncludeFullwidthChar(System.String)">
	<summary>
 対象の文字列に全角文字が含まれているか判定します。
 </summary>
	<param name="testValue">検査対象文字列</param>
	<returns>全角文字が含まれれば <c>True</c>、そうでなければ<c>False</c> 。</returns>
	<remarks>
 文字列に全角文字が含まれるか判定
 先頭から検索.見つかった時点でReturn
 </remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsIncludeDigit(System.String)">
	<summary>
 対象の文字列に数字が含まれているかどうか判定します。
 </summary>
	<param name="testValue">検査対象文字列</param>
	<returns>数字が含まれれば <c>True</c>、そうでなければ<c>False</c> 。</returns>
	<remarks>
 文字列に数字文字が含まれるか判定
 先頭から検索.見つかった時点でReturn
 </remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsIncludeAlphabet(System.String)">
	<summary>
 対象文字列に英字が含まれているか判定します。
 </summary>
	<param name="testValue">検査対象文字列</param>
	<returns>英字が含まれれば <c>True</c>、そうでなければ<c>False</c> 。</returns>
	<remarks>
 文字列に英字文字が含まれるか判定
 先頭から検索.見つかった時点でReturn
 </remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsIncludeSymbol(System.String)">
	<summary>
 対象文字列に記号が含まれているか判定します。
 </summary>
	<param name="testValue">検査対象文字列</param>
	<returns>記号が含まれれば <c>True</c>、そうでなければ<c>False</c> 。</returns>
	<remarks>
 文字列に記号文字が含まれるか判定
 先頭から検索.見つかった時点でReturn
 </remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsIncludeNonAsciiSymbol(System.String)">
	<summary>
 対象文字列にASCII外の記号が含まれているか判定します。
 </summary>
	<param name="testValue">検査対象文字列</param>
	<returns>記号が含まれれば <c>True</c>、そうでなければ<c>False</c> 。</returns>
	<remarks>
 文字列に記号文字が含まれるか判定
 先頭から検索.見つかった時点でReturn
 </remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsIncludeHalfwidthKatakana(System.String)">
	<summary>
 対象文字列に半角カタカナが含まれているか判定します。
 </summary>
	<param name="testValue">検査対象文字列</param>
	<returns>半角カタカナが含まれれば <c>True</c>、そうでなければ<c>False</c> 。</returns>
	<remarks>
 文字列に半角カナ文字が含まれるか判定
 先頭から検索し、見つかった時点でReturn
 </remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsIncludeNonSjis(System.String)">
	<summary>
 文字列にShift-JISに含まれない文字が含まれているか判定します。
 </summary>
	<param name="value">対象文字列</param>
	<returns>パラメータ付加後のURL</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsAlphabetOnly(System.String)">
	<summary>
 対象文字列が半角英字のみで構成されているか判定します。
 ※小数点や桁区切り文字も許しません。
 </summary>
	<param name="testValue">検査対象文字列</param>
	<returns>半角英字のみで構成されていれば <c>True</c>、そうでなければ <c>False</c>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsNumericOnly(System.String)">
	<summary>
 対象文字列が半角数字のみで構成されているか判定します。
 ※小数点や桁区切り文字も許しません。
 </summary>
	<param name="testValue">検査対象文字列</param>
	<returns>半角数字のみで構成されていれば <c>True</c>、そうでなければ <c>False</c>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsNumericOrAlphabetOnly(System.String)">
	<summary>
 対象文字列が英数字のみで構成されているか判定します。
 </summary>
	<param name="testValue">検査対象文字列</param>
	<returns>半角英数字のみで構成されていれば <c>True</c>、そうでなければ <c>False</c>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsFullWidthCharOnly(System.String)">
	<summary>
 対象文字列が全角文字のみで構成されているか判定します。
 </summary>
	<param name="value">検査対象文字列</param>
	<returns>全角文字のみで構成されていれば <c>True</c>、そうでなければ <c>False</c>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsHalfWidthCharOnly(System.String)">
	<summary>
 対象文字列が半角文字のみで構成されているか判定します。
 </summary>
	<param name="value">検査対象文字列</param>
	<returns>半角文字のみで構成されていれば <c>True</c>、そうでなければ <c>False</c>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsHalfwidthKatakanaOnly(System.String)">
	<summary>
 対象文字列に半角カタカナが含まれているか判定します。
 </summary>
	<param name="testValue">検査対象文字列</param>
	<returns>半角カタカナが含まれれば <c>True</c>、そうでなければ<c>False</c> 。</returns>
	<remarks>
 文字列に半角カナ文字が含まれるか判定
 先頭から検索し、見つかった時点でReturn
 </remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.CanConvertToDouble(System.String)">
	<summary>
 対象文字列が <see cref="T:System.Double"/> に変換できるかどうか判定します。
 </summary>
	<param name="value">検査対象文字列</param>
	<returns>変換できる場合 <c>True</c>、できない場合 <c>False</c> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.CanConvertToInteger(System.String)">
	<summary>
 対象文字列が <see cref="T:System.Int32"/> に変換できるかどうか判定します。
 </summary>
	<param name="value">検査対象文字列</param>
	<returns>変換できる場合 <c>True</c>、できない場合 <c>False</c> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.CanConvertToDateTime(System.String)">
	<summary>
 対象文字列が <see cref="T:System.DateTime"/> に変換できるかどうかを判定します。
 </summary>
	<param name="value">検査対象文字列</param>
	<returns>変換できる場合 <c>True</c>、できない場合 <c>False</c> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.CanConvertToDateTimeExact(System.String,System.String)">
	<summary>
 対象文字列が <see cref="T:System.DateTime"/> に指定した形式に従って変換できるかどうかを判定します。
 ※フォーマット指定文字の意味は言語設定に依存しません。 <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> を使用しています。
 </summary>
	<param name="value">検査対象文字列</param>
	<param name="format">指定する書式設定文字列。</param>
	<returns>変換できる場合 <c>True</c>、できない場合 <c>False</c> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsMatch(System.String,System.String)">
	<summary>
 正規表現を使って、パターンと一致するか判定します。
 </summary>
	<param name="value">検査対象文字列。</param>
	<param name="pattern">正規表現の一致パターン。</param>
	<returns>パターンに一致する場合 <c>True</c>、そうでない場合 <c>False</c> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
	<summary>
 正規表現を使って、パターンと一致するか判定します。
 </summary>
	<param name="value">検査対象文字列。</param>
	<param name="pattern">正規表現の一致パターン。</param>
	<param name="options">正規表現オプション。</param>
	<returns>パターンに一致する場合 <c>True</c>、そうでない場合 <c>False</c> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.Match(System.String,System.String)">
	<summary>
 正規表現を使って、パターンとのマッチングを実行します。
 </summary>
	<param name="value">検査対象文字列。</param>
	<param name="pattern">正規表現の一致パターン。</param>
	<returns>マッチング結果の <see cref="T:System.Text.RegularExpressions.Match"/> オブジェクト。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
	<summary>
 正規表現を使って、パターンとのマッチングを実行します。
 </summary>
	<param name="value">検査対象文字列。</param>
	<param name="pattern">正規表現の一致パターン。</param>
	<param name="options">正規表現オプション。</param>
	<returns>マッチング結果の <see cref="T:System.Text.RegularExpressions.Match"/> オブジェクト。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.Replace(System.String,System.String,System.String)">
	<summary>
 正規表現を使って、置換を実行します。
 </summary>
	<param name="value">置換対象文字列。</param>
	<param name="pattern">正規表現の一致パターン。</param>
	<param name="replacement">正規表現の置換パターン。</param>
	<returns>置換後の文字列。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
	<summary>
 正規表現を使って、置換を実行します。
 </summary>
	<param name="value">置換対象文字列。</param>
	<param name="pattern">正規表現の一致パターン。</param>
	<param name="replacement">正規表現の置換パターン。</param>
	<param name="options">正規表現オプション。</param>
	<returns>置換後の文字列。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
	<summary>
 正規表現を使って、置換を実行します。
 </summary>
	<param name="value">置換対象文字列。</param>
	<param name="pattern">正規表現の一致パターン。</param>
	<param name="evaluator">一致する各対象を調べて、置換後の文字列を返すカスタムメソッド。</param>
	<returns>置換後の文字列。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
	<summary>
 正規表現を使って、置換を実行します。
 </summary>
	<param name="value">置換対象文字列。</param>
	<param name="pattern">正規表現の一致パターン。</param>
	<param name="evaluator">一致する各対象を調べて、置換後の文字列を返すカスタムメソッド。</param>
	<param name="options">正規表現オプション。</param>
	<returns>置換後の文字列。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.ToFirstDateOfMonth(System.DateTime)">
	<summary>
 日付を月初日に変換して返します。時刻は変更しません。
 </summary>
	<param name="targetDate">対象の日付。</param>
	<returns>月初日に変換された日付。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.ToLastDateOfMonth(System.DateTime)">
	<summary>
 日付を月末日に変換して返します。時刻は変更しません。
 </summary>
	<param name="targetDate">対象の日付。</param>
	<returns>月末日に変換された日付。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.DefaultIfNull``1(``0,``0)">
	<summary>
		<paramref name="source"/> が <c>Nothing</c> の場合は <paramref name="defaultValue"/> を返します。
 </summary>
	<typeparam name="T">対象の型。</typeparam>
	<param name="source">対象の値。</param>
	<param name="defaultValue">デフォルトの値.</param>
	<returns><paramref name="source"/> が <c>Nothing</c> の場合は <paramref name="defaultValue"/> 、そうでない場合は <paramref name="source"/> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0[])">
	<summary>
 指定された引数の値とシーケンスを連結したシーケンスを取得します。
 </summary>
	<typeparam name="T">シーケンスの型。</typeparam>
	<param name="source">シーケンス。</param>
	<param name="values">値。</param>
	<returns>引数の値とシーケンスを連結したシーケンス。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.GetComplexString(System.Resources.ResourceManager,System.String,System.Globalization.CultureInfo)">
	<summary>
		<see cref="T:System.Resources.ResourceManager"/> から、キーに対する文字列を取得します。
 先頭文字が # のとき、複数のリソースを組み合わせたキーに対応します。
 例: #{Test}-{Hoge} → テスト-ほげ
 </summary>
	<param name="manager">使用する <see cref="T:System.Resources.ResourceManager"/> 。</param>
	<param name="key">リソースキー。</param>
	<param name="culture">取得する文字列のカルチャ。</param>
	<returns>リソース文字列。リソースが見つからなかった場合は Nothing 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.Extensions.GetComplexString(System.Resources.ResourceManager,System.String)">
	<summary>
		<see cref="T:System.Resources.ResourceManager"/> から、キーに対する文字列を取得します。
 先頭文字が # のとき、複数のリソースを組み合わせたキーに対応します。
 例: #{Test}-{Hoge} → テスト-ほげ
 </summary>
	<param name="manager">使用する <see cref="T:System.Resources.ResourceManager"/> 。</param>
	<param name="key">リソースキー。</param>
	<returns>リソース文字列。リソースが見つからなかった場合は Nothing 。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Utilities.Extensions">
	<summary>
 一般的な拡張メソッドを提供します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.SummerTimeUtilities.#ctor">
	<summary>
 ダミーコンストラクタ
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.SummerTimeUtilities.ToSummerTimeDate(System.DateTime,System.TimeZoneInfo)">
	<summary>
 非サマータイム日時をサマータイム日時に変換した結果を取得します。(タイムゾーンの変換は行いません)
 </summary>
	<param name="nonSummerTimeDate">非サマータイム日時</param>
	<param name="zone">使用するタイムゾーン。<see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)"/> で任意のタイムゾーンを取得します。タイムゾーンIDはレジストリキー <c>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones</c> 以下のキー名と一致させます。</param>
	<returns>サマータイム日時</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.SummerTimeUtilities.ToNonSummerTimeDate(System.DateTime,System.TimeZoneInfo)">
	<summary>
 サマータイム日時を非サマータイム日時に変換した結果を取得します。(タイムゾーンの変換は行いません)
 ※サマータイム調整で2回繰り返される時間帯は、調整中と見做します
 </summary>
	<param name="summerTimeDate">サマータイム日時</param>
	<param name="zone">使用するタイムゾーン。<see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)"/> で任意のタイムゾーンを取得します。タイムゾーンIDはレジストリキー <c>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones</c> 以下のキー名と一致させます。</param>
	<returns>非サマータイム日時</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.SummerTimeUtilities.NowSummerTimeDate(System.TimeZoneInfo)">
	<summary>
 指定したタイムゾーンでの現在のサマータイム日時を取得します。
 </summary>
	<param name="zone">使用するタイムゾーン。<see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)"/> で任意のタイムゾーンを取得します。タイムゾーンIDはレジストリキー <c>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones</c> 以下のキー名と一致させます。</param>
	<returns>現在のサマータイム日時</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.SummerTimeUtilities.NowNonSummerTimeDate(System.TimeZoneInfo)">
	<summary>
 指定したタイムゾーンでの現在の非サマータイム日時を取得します。
 </summary>
	<param name="zone">使用するタイムゾーン。<see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)"/> で任意のタイムゾーンを取得します。タイムゾーンIDはレジストリキー <c>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones</c> 以下のキー名と一致させます。</param>
	<returns>現在の非サマータイム日時</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.SummerTimeUtilities.GetDateFromTransitionTime(System.Int32,System.TimeZoneInfo.TransitionTime)">
	<summary>
 サマータイム遷移時刻から、<see cref="T:System.DateTime"/> を生成します。
 </summary>
	<param name="year">生成する日付の年。</param>
	<param name="time">生成元のサマータイム遷移日時。</param>
	<returns>サマータイム遷移時刻に対応する <see cref="T:System.DateTime"/> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.SummerTimeUtilities.InBetween(System.DateTime,System.TimeZoneInfo.AdjustmentRule,System.Boolean)">
	<summary>
 指定日が、サマータイム遷移日時内に含まれるか判定します。
 </summary>
	<param name="targetDate">指定日。</param>
	<param name="rule">タイムゾーン調整ルール。</param>
	<param name="isSummerTime">指定日がサマータイムかどうか。</param>
	<returns>サマータイム遷移日時内に含まれる場合 <c>True</c> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.SummerTimeUtilities.GetEndDate(System.TimeZoneInfo.AdjustmentRule)">
	<summary>
 タイムゾーン期間の終了日付を取得します。
 </summary>
	<param name="rule">タイムゾーン調整ルール。</param>
	<returns>タイムゾーン期間の終了日付。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Utilities.SummerTimeUtilities">
	<summary>
 日付に関する各種機能を提供します。このクラスは継承できません。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ServerTime.#ctor">
	<summary>
 ダミーコンストラクタ
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ServerTime.GetTime(System.String,System.String)">
	<summary>
 指定したDBサーバから現在の日時を取得します。
 </summary>
	<param name="connectionString">接続文字列。</param>
	<param name="providerName">使用するDBドライバ名。(SQL Serverの場合は System.Data.SqlClient)</param>
	<returns>サーバから取得した日時。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ServerTime.GetTime(System.String,System.String,System.String,System.String)">
	<summary>
 SQLサーバから現在の日時を取得します。
 </summary>
	<param name="userId">サーバ接続に使用するユーザID。</param>
	<param name="password">サーバ接続に使用するパスワード。</param>
	<param name="initialCatalog">初期カタログ。</param>
	<param name="dataSource">データソース</param>
	<returns>サーバから取得した日時。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ServerTime.GetTime(System.Configuration.ConnectionStringSettings)">
	<summary>
 DBサーバから現在の日時を取得します。
 </summary>
	<param name="setting"><c>App.config</c> から取得できる、接続文字列情報。</param>
	<returns>サーバから取得した日時。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Utilities.ServerTime.GetTime">
	<summary>
 現在の文脈で使用しているDBサーバから、現在の日時を取得します。
 </summary>
	<returns>サーバから取得した日時。</returns>
	<exception cref="T:System.IO.FileNotFoundException">設定ファイル <c>SetLocalDateTime.xml</c> が存在しません。</exception>
</member><member name="T:SRS.Standards.MvcFramework.Core.Utilities.ServerTime">
	<summary>
 指定したサーバから、現在時刻を取得する機能を提供します。
 SQL Serverからの取得をサポートします。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.RuleException.#ctor">
	<summary>
 コンストラクタ
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.RuleException.#ctor(System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="message">エラーメッセージ</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.RuleException.#ctor(System.String,System.Exception)">
	<summary>
 コンストラクタ
 </summary>
	<param name="message">エラーメッセージ</param>
	<param name="inner">例外</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.RuleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 コンストラクタ
 </summary>
	<param name="info">SerializationInfo</param>
	<param name="context">StreamingContext</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.Business.RuleException">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 ビジネスルールの領域の例外クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.RuleBase.InterceptMessage(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
	<summary>
 Ruleメソッド実行前処理
 </summary>
	<param name="callMessage">実行メソッド情報</param>
	<returns>メソッド実行結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.RuleBase.ProcessMessage(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
	<summary>
 Ruleメソッド実行処理
 </summary>
	<param name="callMessage">実行メソッド情報</param>
	<returns>メソッド実行結果</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.RuleBase.OnMethodSucceeded(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Runtime.Remoting.Messaging.IMethodReturnMessage)">
	<summary>
 Ruleメソッド実行後処理
 </summary>
	<param name="callMessage">実行メソッド情報</param>
	<param name="returnMessage">メソッド実行結果情報</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.RuleBase.SetWarn(SRS.Standards.MvcFramework.Core.Facade.IViewModel,System.String,System.String,System.String[])">
	<summary>
 モデルに警告発生を通知する
 </summary>
	<param name="model">モデル</param>
	<param name="propertyName">対象のプロパティ名(階層込で設定する)</param>
	<param name="messageId">メッセージID</param>
	<param name="messageParams">メッセージ置換文字列(メッセージIDも可)</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.RuleBase.SetError(SRS.Standards.MvcFramework.Core.Facade.IViewModel,System.String,System.String,System.String[])">
	<summary>
 モデルにエラー発生を通知する
 </summary>
	<param name="model">モデル</param>
	<param name="propertyName">対象のプロパティ名(階層込で設定する)</param>
	<param name="messageId">メッセージID</param>
	<param name="messageParams">メッセージ置換文字列(メッセージIDも可)</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.RuleBase.SetFatal(SRS.Standards.MvcFramework.Core.Facade.IViewModel,System.String,System.String,System.String[])">
	<summary>
 モデルに致命(継続不能)発生を通知する
 </summary>
	<param name="model">モデル</param>
	<param name="propertyName">対象のプロパティ名(階層込で設定する)</param>
	<param name="messageId">メッセージID</param>
	<param name="messageParams">メッセージ置換文字列(メッセージIDも可)</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.RuleBase.ClearErrors(SRS.Standards.MvcFramework.Core.Facade.IViewModel)">
	<summary>
 モデルに設定されたエラー情報を全てクリアする
 </summary>
	<param name="model">モデル</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.RuleBase.HasInsertPermission(SRS.Standards.MvcFramework.Core.Facade.IViewModel)">
	<summary>
 登録権限があるかどうかを判定します。
 権限が無い場合、与えられたモデルにエラーメッセージを設定し、<c>False</c>を返します。
 </summary>
	<param name="model">画面モデル。</param>
	<returns>権限がある場合 <c>True</c>、それ意外のとき <c>False</c>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.RuleBase.HasUpdatePermission(SRS.Standards.MvcFramework.Core.Facade.IViewModel)">
	<summary>
 更新権限があるかどうかを判定します。
 権限が無い場合、与えられたモデルにエラーメッセージを設定し、<c>False</c>を返します。
 </summary>
	<param name="model">画面モデル。</param>
	<returns>権限がある場合 <c>True</c>、それ意外のとき <c>False</c>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.RuleBase.HasDeletePermission(SRS.Standards.MvcFramework.Core.Facade.IViewModel)">
	<summary>
 削除権限があるかどうかを判定します。
 権限が無い場合、与えられたモデルにエラーメッセージを設定し、<c>False</c>を返します。
 </summary>
	<param name="model">画面モデル。</param>
	<returns>権限がある場合 <c>True</c>、それ意外のとき <c>False</c>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.RuleBase.HasSearchPermission(SRS.Standards.MvcFramework.Core.Facade.IViewModel)">
	<summary>
 検索権限があるかどうかを判定します。
 権限が無い場合、与えられたモデルにエラーメッセージを設定し、<c>False</c>を返します。
 </summary>
	<param name="model">画面モデル。</param>
	<returns>権限がある場合 <c>True</c>、それ意外のとき <c>False</c>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.RuleBase.HasInsertPermission">
	<summary>
 登録権限があるかどうかを判定します。
 </summary>
	<returns>権限がある場合 <c>True</c>、それ意外のとき <c>False</c>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.RuleBase.HasUpdatePermission">
	<summary>
 更新権限があるかどうかを判定します。
 </summary>
	<returns>権限がある場合 <c>True</c>、それ意外のとき <c>False</c>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.RuleBase.HasDeletePermission">
	<summary>
 削除権限があるかどうかを判定します。
 </summary>
	<returns>権限がある場合 <c>True</c>、それ意外のとき <c>False</c>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.RuleBase.HasSearchPermission">
	<summary>
 検索権限があるかどうかを判定します。
 </summary>
	<returns>権限がある場合 <c>True</c>、それ意外のとき <c>False</c>。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.RuleBase.SetExclusiveUpdateData(System.String,SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveUpdateType,System.Collections.Generic.IEnumerable{SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveUpdateRowModel})">
	<summary>
 排他制御用データ登録
 </summary>
	<param name="tableName">テーブル名</param>
	<param name="exclusiveUpdateTypes">処理対象(複数指定可能)</param>
	<param name="exclusiveUpdateData">排他制御用データモデル</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.RuleBase.RemoveExclusiveUpdateData(System.String)">
	<summary>
 排他制御用データ削除
 </summary>
	<param name="tableName">テーブル名</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.Business.RuleBase">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 ビジネスルール基底クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.NonExclusiveUpdateException.TableName">
	<summary>
 対象テーブル名
 </summary>
	<returns>対象テーブル名</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.NonExclusiveUpdateException.#ctor">
	<summary>
 コンストラクタ
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.NonExclusiveUpdateException.#ctor(System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="tableName">テーブル名</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.NonExclusiveUpdateException.#ctor(System.String,System.Exception)">
	<summary>
 コンストラクタ
 </summary>
	<param name="tableName">テーブル名</param>
	<param name="inner">例外</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.NonExclusiveUpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 コンストラクタ
 </summary>
	<param name="info">SerializationInfo</param>
	<param name="context">StreamingContext</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.NonExclusiveUpdateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 例外の情報をシリアライズします。
 </summary>
	<param name="info">SerializationInfo</param>
	<param name="context">StreamingContext</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.NonExclusiveUpdateException">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 排他制御チェックに失敗した際の例外クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.IPaging.PageNum">
	<summary>
 取得したいページ番号を設定/取得
 </summary>
	<returns>現在ページ</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.IPaging.RowCount">
	<summary>
 １ページあたりに行数を設定/取得
 </summary>
	<returns>１ページあたりに行数</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.IPaging.MaxRow">
	<summary>
 ページングを行わない場合の最大行数を設定/取得
 </summary>
	<returns>ページングを行わない場合の最大行数</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.IPaging.MaxPage">
	<summary>
 最大ページ番号を設定/取得
 </summary>
	<returns>最大ページ番号</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.IPaging">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 ページング制御用メンバインターフェイス
 ページングを行うモデルは当インタフェースを実装する
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.PreloadInformation.ResourceServerPath">
	<summary>
 多言語メッセージ用リソースファイルのサーバ上のパスを指定
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.PreloadInformation.UploadTempPath">
	<summary>
 ファイルアップロード先のパスを指定
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.Information.PreloadInformation">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 プレロード情報格納クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.BusinessLogger.NLogName">
	<summary>
 Nlogのログ名(設定名)
 </summary>
	<returns>ログ名</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.BusinessLogger.NLogLogger">
	<summary>
 NLogのログ出力クラス
 </summary>
	<returns>NLogLogger</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Logging.BusinessLogger.Log(NLog.LogLevel,System.String)">
	<summary>
 業務ログ出力(LogLevel指定)
 </summary>
	<param name="logLevel">ログレベル</param>
	<param name="business">業務内容</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Logging.BusinessLogger.Log(NLog.LogLevel,System.String,System.Exception)">
	<summary>
 業務ログ出力(LogLevel指定)
 </summary>
	<param name="logLevel">ログレベル</param>
	<param name="business">業務内容</param>
	<param name="exception">例外オブジェクト</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Logging.BusinessLogger.Trace(System.String)">
	<summary>
 業務ログ出力(Traceレベル)
 </summary>
	<param name="business">業務内容</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Logging.BusinessLogger.Debug(System.String)">
	<summary>
 業務ログ出力(Debugレベル)
 </summary>
	<param name="business">業務内容</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Logging.BusinessLogger.Info(System.String)">
	<summary>
 業務ログ出力(Infoレベル)
 </summary>
	<param name="business">業務内容</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Logging.BusinessLogger.Warn(System.String)">
	<summary>
 業務ログ出力(Warnレベル)
 </summary>
	<param name="business">業務内容</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Logging.BusinessLogger.Error(System.String)">
	<summary>
 業務ログ出力(Errorレベル)
 </summary>
	<param name="business">業務内容</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Logging.BusinessLogger.Error(System.String,System.Exception)">
	<summary>
 業務ログ出力(Errorレベル)
 </summary>
	<param name="business">業務内容</param>
	<param name="exception">例外オブジェクト</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Logging.BusinessLogger.Fatal(System.String)">
	<summary>
 業務ログ出力(Fatalレベル)
 </summary>
	<param name="business">業務内容</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.Logging.BusinessLogger">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 業務ログログ出力クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.Mail.SriMail.#ctor">
	<summary>
 初期化処理。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Mail.SriMail.#ctor(System.String,System.String,System.String)">
	<summary>
 初期化処理。件名、本文、宛先アドレスを指定してメールを作成します。
 </summary>
	<param name="subject">メールの件名。</param>
	<param name="body">メールの本文。</param>
	<param name="toAddress">メールの宛先。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Mail.SriMail.#ctor(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 初期化処理。件名、本文、宛先アドレス、差出人アドレス、サーバアドレスを指定してメールを作成します。
 </summary>
	<param name="subject">メールの件名。</param>
	<param name="body">メールの本文。</param>
	<param name="toAddress">メールの宛先アドレス。</param>
	<param name="fromAddress">メールの差出人アドレス。</param>
	<param name="hostAddress">送信メールサーバアドレス。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Mail.SriMail.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32)">
	<summary>
 初期化処理。件名、本文、宛先アドレス、差出人アドレス、サーバアドレス、ポートを指定してメールを作成します。
 </summary>
	<param name="subject">メールの件名。</param>
	<param name="body">メールの本文。</param>
	<param name="toAddress">メールの宛先アドレス。</param>
	<param name="fromAddress">メールの差出人アドレス。</param>
	<param name="hostAddress">送信メールサーバアドレス。</param>
	<param name="port">送信メールサーバのポート。既定は <c>25</c> 。</param>
</member><member name="P:SRS.Standards.MvcFramework.Core.Mail.SriMail.Host">
	<summary>
 メール送信サーバアドレスを設定・取得します。既定値は空文字です。
 サーバ管理者に利用許可を得たサーバを使用して下さい。
 </summary>
	<value>メール送信サーバアドレス。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.Mail.SriMail.Port">
	<summary>
 メール送信サーバの送信ポートを設定します。既定値は <c>25</c> です。
 </summary>
	<value>メール送信サーバの送信ポート。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.Mail.SriMail.EnableSsl">
	<summary>
 メール送信に SSL を使用するかどうかを設定します。既定値は <c>False</c> です。
 </summary>
	<value>メール送信に SSL を使用するかどうか。</value>
</member><member name="P:SRS.Standards.MvcFramework.Core.Mail.SriMail.SendTimeout">
	<summary>
		<see cref="M:SRS.Standards.MvcFramework.Core.Mail.SriMail.Send"/> 実行時にタイムアウトする時間を設定します。単位はミリ秒。
 </summary>
	<value><see cref="M:SRS.Standards.MvcFramework.Core.Mail.SriMail.Send"/> 実行時にタイムアウトする時間です。既定値は 100000 [ms] 。</value>
</member><member name="M:SRS.Standards.MvcFramework.Core.Mail.SriMail.Send">
	<summary>
 現在の設定で、メールを送信します。
 </summary>
	<returns>送信結果コード。<see cref="T:System.Net.Mail.SmtpStatusCode"/> 値のいずれかをとります。送信成功した場合は <see cref="F:System.Net.Mail.SmtpStatusCode.Ok"/> 。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Mail.SriMail.SetPassword(System.String,System.String)">
	<summary>
 サーバの認証情報を設定します。
 </summary>
	<param name="userId">ユーザID。</param>
	<param name="password">パスワード。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Mail.SriMail.AddAttachment(System.String)">
	<summary>
 指定したパスに存在するファイルを、メールに添付します。
 </summary>
	<param name="filePath">添付するファイルのパス。</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.Mail.SriMail">
	<summary>
 メールを作成・送信するための機能を提供します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.MvcException.#ctor">
	<summary>
 コンストラクタ
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.MvcException.#ctor(System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="message">エラーメッセージ</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.MvcException.#ctor(System.String,System.Exception)">
	<summary>
 コンストラクタ
 </summary>
	<param name="message">エラーメッセージ</param>
	<param name="inner">例外</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Business.MvcException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 コンストラクタ
 </summary>
	<param name="info">SerializationInfo</param>
	<param name="context">StreamingContext</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.Business.MvcException">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 MVCの領域の例外クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewPagerModelBase.PageNum">
	<summary>
 現在ページ番号/取得したいページ番号を設定/取得
 </summary>
	<value>取得したいページ番号</value>
	<returns>現在ページ番号</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewPagerModelBase.RowCount">
	<summary>
 1ページあたりの行数を設定/取得
 </summary>
	<returns>1ページあたりの行数</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewPagerModelBase.MaxRow">
	<summary>
 検索結果の総件数を設定/取得
 </summary>
	<returns>検索結果の総件数</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewPagerModelBase.MaxPage">
	<summary>
 最大ページ番号を設定/取得
 </summary>
	<returns>最大ページ番号</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewPagerModelBase.SelectPageNum">
	<summary>
 ページ番号ドロップダウンリストを設定/取得
 </summary>
	<returns>ドロップダウンリスト名</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ViewPagerModelBase.PageLists">
	<summary>
 ページ指定ドロップダウンリスト要素を設定/取得
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.ViewPagerModelBase.ExecutePageList">
	<summary>
 ページングの情報より、ドロップダウンリストの項目を生成
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.MVC.ViewPagerModelBase">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 ページング機能付の画面モデルの基底クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.NullObjectPool.Item(System.String)">
	<summary>
 このプロパティで格納しようとしたオブジェクトは、実際にはどこにも保持されません。
 また、このプロパティは常に null 参照を返します。
 </summary>
	<param name="name">対象オブジェクトの名前。</param>
	<returns>常に null。</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.NullObjectPool.Item(System.Type)">
	<summary>
 このプロパティで格納しようとしたオブジェクトは、実際にはどこにも保持されません。
 また、このプロパティは常に null 参照を返します。
 </summary>
	<param name="type">対象オブジェクトの型。</param>
	<returns>常に null。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.NullObjectPool">
	<summary>
 この <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.IScopeBoundObjectPool"/> 実装クラスは、特定の
 スコープを定義しません。通常は、スコープが存在しないことを示すために
 使用されます。
 </summary>
	<remarks>
		<para>このクラスは実際のプールを提供しません。このプールに保存しようとした
 オブジェクトは、実際にはどこにも保持されません。</para>
	</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.ObjectPoolManager.GetPool(System.String)">
	<summary>
 既定の名称または、カスタムのプール実装クラス名で指定される、
 オブジェクトプールの実装を取得します。主に、構成ファイルなどでスコープ名が
 指定される場合に使用します。
 </summary>
	<param name="nameOrType">既定の名称または、カスタムのプール実装クラス名。</param>
	<returns>対応するオブジェクトプール実装のインスタンス。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.ObjectPoolManager.GetPool(SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.ObjectPoolName)">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.ObjectPoolName"/> 値で指定される、既定のオブジェクトプール実装を取得します。
 </summary>
	<param name="poolNameValue">プールの種別を指定する <see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.ObjectPoolName"/> 値。</param>
	<returns>対応するオブジェクトプール実装のインスタンス。</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.ObjectPoolManager.GetPool(System.Type)">
	<summary>
 型で指定される、オブジェクトプールの実装を取得します。
 このメソッドは、ユーザ実装のカスタムオブジェクトプールを取得します。
 </summary>
	<param name="poolType">カスタムのプール実装クラス型。</param>
	<returns>対応するオブジェクトプール実装のインスタンス。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.ObjectPoolManager">
	<summary>
 既定で提供される、<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Utility.ObjectPool.IScopeBoundObjectPool"/> 実装を管理します。
 このクラスのメソッドを使用すると、スコープの名称による指定で、特定スコープ
 のプール実装を取得できます。このクラスは、主に構成ファイルなどでスコープ名を
 指定するような場合に使用します。
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Security.AuthenticationModel.UserId">
	<summary>
 ユーザＩＤを設定/取得
 </summary>
	<returns>ユーザＩＤ</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Security.AuthenticationModel.UserName">
	<summary>
 ユーザ名を設定/取得
 </summary>
	<returns>ユーザ名</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Security.AuthenticationModel.Password">
	<summary>
 パスワードを設定/取得
 </summary>
	<returns>パスワード</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Security.AuthenticationModel.Authentication">
	<summary>
 認証OK/NGを設定/取得
 </summary>
	<returns>True:認証OK</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Security.AuthenticationModel.EncryptFormsAuthenticationTicket">
	<summary>
 認証チケット文字列(暗号化後)を設定/取得
 </summary>
	<returns>認証チケット文字列(暗号化後)</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Security.AuthenticationModel.Organization">
	<summary>
 組織情報を設定/取得
 </summary>
	<returns>組織情報</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Security.AuthenticationModel.BusinessIdentifyId">
	<summary>
 業務識別IDを設定/取得
 </summary>
	<returns>業務識別ID</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Security.AuthenticationModel.IPAddress">
	<summary>
 IPアドレスを設定/取得
 </summary>
	<returns>IPアドレス</returns>
</member><member name="P:SRS.Standards.MvcFramework.Core.Security.AuthenticationModel.UserAttribute">
	<summary>
 ユーザ属性を設定/取得
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Security.AuthenticationModel.ReturnUrl">
	<summary>
 他画面から強制遷移してきたときの、元画面URL
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.Security.AuthenticationModel">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
認証チェック用モデルクラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFileNotLoadedException.#ctor">
	<summary>
 初期化処理。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFileNotLoadedException.#ctor(System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="message">エラーメッセージ</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFileNotLoadedException.#ctor(System.String,System.Exception)">
	<summary>
 コンストラクタ
 </summary>
	<param name="message">エラーメッセージ</param>
	<param name="inner">例外</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Xml.XmlFileNotLoadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 コンストラクタ
 </summary>
	<param name="info">SerializationInfo</param>
	<param name="context">StreamingContext</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.Xml.XmlFileNotLoadedException">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.Xml.XmlFile"/> にて、ファイルを開いていない状態で操作しようとした場合に発生する例外です.
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionProxy.#ctor(System.Type,System.MarshalByRefObject)">
	<summary>
 指定された対象クラス型と対象オブジェクトに対するプロキシを初期化します。
 </summary>
	<param name="targetType">プロキシを作成する対象の型。</param>
	<param name="target">プロキシを作成する対象のオブジェクト。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionProxy.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
	<summary>
 プロキシ対象のオブジェクトに対してメソッドが呼び出されると、
 このメソッドに処理が移ります。
 </summary>
	<param name="msg">メソッドの呼び出しに関する情報の <see cref="T:System.Collections.IDictionary"/>
 を格納している <see cref="T:System.Runtime.Remoting.Messaging.IMessage"/>。</param>
	<returns>呼び出されたメソッドが返すメッセージで、out パラメータまたは
 ref パラメータのどちらかと戻り値を格納しているメッセージ。 </returns>
	<remarks>
		<para>呼び出されたメソッドがコンストラクタの場合は、コンストラクタを実行します。
 通常のメソッドの場合は、割り込み処理メソッドに処理を渡します。</para>
		<para>このメソッドは、割り込み処理を、割り込み処理が有効となっている
 オブジェクト自身に委譲します。</para>
		<para>このメソッドは、コンストラクタ実行時に
 <see cref="M:SRS.Standards.MvcFramework.Core.OME2.Framework.Configuration.PropertyConfigurator.ReflectConfiguration(System.Object)"/> を使用して、
 対象のオブジェクトに構成ファイルのプロパティ設定を適用します。</para>
	</remarks>
</member><member name="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionProxy">
	<summary>
		<see cref="T:SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionProxyAttribute"/> が適用された
 <see cref="T:System.ContextBoundObject"/> 派生クラスに適用される実プロキシクラスです。
 </summary>
	<remarks>
		<para>このプロキシクラスは、割り込み処理を、割り込みが処理が追加される
 オブジェクト自身のメソッドに委譲します。この動作により、割り込み処理が有効になる
 クラス自身で、独自の割り込み処理を実装することができます。</para>
	</remarks>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveUpdateType.None">
	<summary>
 None
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveUpdateType.Insert">
	<summary>
 Insert
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveUpdateType.Update">
	<summary>
 Update
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveUpdateType.Delete">
	<summary>
 Delete
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.ExclusiveUpdateType">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 排他制御の対象を判別する為の列挙型
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessException.#ctor">
	<summary>
 コンストラクタ
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessException.#ctor(System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="message">エラーメッセージ</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessException.#ctor(System.String,System.Exception)">
	<summary>
 コンストラクタ
 </summary>
	<param name="message">エラーメッセージ</param>
	<param name="inner">例外</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 コンストラクタ
 </summary>
	<param name="info">SerializationInfo</param>
	<param name="context">StreamingContext</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.DataAccessException">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 データアクセスの領域の例外クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SearchResultLimitException.#ctor">
	<summary>
 コンストラクタ
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SearchResultLimitException.#ctor(System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="message">エラーメッセージ</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SearchResultLimitException.#ctor(System.String,System.Exception)">
	<summary>
 コンストラクタ
 </summary>
	<param name="message">エラーメッセージ</param>
	<param name="exception">例外オブジェクト</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SearchResultLimitException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 コンストラクタ
 </summary>
	<param name="info">SerializationInfo</param>
	<param name="context">StreamingContext</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.DataAccess.SearchResultLimitException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 例外の情報をシリアライズします。
 </summary>
	<param name="info">SerializationInfo</param>
	<param name="context">StreamingContext</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.SearchResultLimitException">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 検索件数の上限を越えた際の例外クラス
 </summary>
	<author>MASUDA Kazuya/SRS</author>
	<Version>
 001, 2016-04-22, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.Http.WebHost.SessionHttpControllerHandler.#ctor(System.Web.Routing.RouteData,System.Collections.Generic.IDictionary{System.String,System.Web.Http.Controllers.HttpControllerDescriptor})">
	<summary>
 コンストラクタ
 </summary>
	<param name="routeData">ルートデータ</param>
	<param name="map">コントローラマップ</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.Http.WebHost.SessionHttpControllerHandler">
	<summary>
 セッションをサポートするHTTPコントローラハンドラ
 </summary>
</member><member name="P:SRS.Standards.MvcFramework.Core.Logging.UserRuleTraceLogger.NLogName">
	<summary>
 Nlogのログ名(設定名)
 </summary>
	<returns>ログ名</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Logging.UserRuleTraceLogger">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 ユーザ(Rule)トレースログ出力クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSBeginForm(System.Web.Mvc.HtmlHelper)">
	<summary>
 拡張BeginForm
 </summary>
	<param name="helper">拡張先HTMLヘルパー</param>
	<returns>HTML構文</returns>
	<remarks>HTML.BeginForm拡張</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSPartial(System.Web.Mvc.HtmlHelper,System.String)">
	<summary>
 拡張Partial
 </summary>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="partialViewName">描画View名</param>
	<returns>HTML構文</returns>
	<remarks>HTML.BeginForm拡張</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSRaw(System.Web.Mvc.HtmlHelper,System.String,System.String[])">
	<summary>
 拡張Raw
 多言語化に対応しています。
 </summary>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="value">値</param>
	<param name="messageParams">置換項目</param>
	<returns>HTML構文</returns>
	<remarks>HTML.Raw拡張</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSRaw(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.String})">
	<summary>
 拡張Raw
 多言語化に対応しています。
 </summary>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="value">値</param>
	<param name="messageParams">置換項目</param>
	<returns>HTML構文</returns>
	<remarks>HTML.Raw拡張</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSRaw(System.Web.Mvc.HtmlHelper,System.Globalization.CultureInfo,System.String,System.Collections.Generic.IEnumerable{System.String})">
	<summary>
 拡張Raw
 多言語化に対応しています。
 </summary>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="culture">多言語化する際の言語情報。</param>
	<param name="value">値</param>
	<param name="messageParams">置換項目</param>
	<returns>HTML構文</returns>
	<remarks>HTML.Raw拡張</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSLabel(System.Web.Mvc.HtmlHelper,System.String,System.String)">
	<summary>
 拡張Label
 ラベルの多言語化に対応しています。
 </summary>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="expression">ラベルに対応する要素のID</param>
	<param name="labelText">ラベルのテキストのメッセージID(メッセージそのものでも可能)</param>
	<returns>HTML構文</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSLabel(System.Web.Mvc.HtmlHelper,System.Globalization.CultureInfo,System.String,System.String)">
	<summary>
 拡張Label
 ラベルの多言語化に対応しています。
 </summary>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="culture">多言語化する際の言語情報。</param>
	<param name="expression">ラベルに対応する要素のID</param>
	<param name="labelText">ラベルのテキストのメッセージID(メッセージそのものでも可能)</param>
	<returns>HTML構文</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSLabelFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
	<summary>
 拡張LabelFor
 プロパティに設定されたラベルを表示します。
 ラベルの多言語化に対応しています。
 </summary>
	<typeparam name="TModel">モデル</typeparam>
	<typeparam name="TValue">プロパティ</typeparam>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="expression">対象プロパティを取得する式</param>
	<returns>HTML構文</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSLabelFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
	<summary>
 拡張LabelFor
 指定されたラベルテキストを表示します。
 ラベルの多言語化に対応しています。
 </summary>
	<typeparam name="TModel">モデル</typeparam>
	<typeparam name="TValue">プロパティ</typeparam>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="expression">対象プロパティを取得する式</param>
	<param name="labelText">ラベルのテキストのメッセージID(メッセージそのものでも可能)</param>
	<returns>HTML構文</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSTextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int32})">
	<summary>
 拡張TextBoxFor
 エラー処理に対応しています。
 </summary>
	<typeparam name="TModel">モデル</typeparam>
	<typeparam name="TValue">プロパティ</typeparam>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="expression">対象プロパティを取得する式</param>
	<param name="maxLength">最大入力桁。SRSStringValidation属性で対象プロパティにMaxLengthが指定されている場合、その値が既定値になります。</param>
	<param name="disabled">True:入力不可</param>
	<param name="cssClass">CSSクラス名</param>
	<param name="htmlAttributes">追加属性群</param>
	<param name="tabIndex">TAB順</param>
	<returns>HTML構文</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSPasswordFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int32})">
	<summary>
 拡張PasswordFor
 エラー処理に対応しています。
 </summary>
	<typeparam name="TModel">モデル</typeparam>
	<typeparam name="TValue">プロパティ</typeparam>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="expression">対象プロパティを取得する式</param>
	<param name="maxLength">最大入力桁</param>
	<param name="disabled">True:入力不可</param>
	<param name="cssClass">CSSクラス名</param>
	<param name="htmlAttributes">追加属性群</param>
	<param name="tabIndex">TAB順</param>
	<returns>HTML構文</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSDropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{SRS.Standards.MvcFramework.Core.MVC.SRSSelectListItem},System.String,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int32})">
	<summary>
 拡張DropDownListFor
 多言語化とエラー処理に対応しています。
 </summary>
	<typeparam name="TModel">モデル</typeparam>
	<typeparam name="TValue">プロパティ</typeparam>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="expression">対象プロパティを取得する式</param>
	<param name="selectList">リストボックス内容</param>
	<param name="optionLabel">基底の空の項目のテキスト。Nothingでも可。</param>
	<param name="disabled">True:入力不可</param>
	<param name="cssClass">CSSクラス名</param>
	<param name="htmlAttributes">追加属性群</param>
	<param name="tabIndex">TAB順</param>
	<returns>HTML構文</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSDropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int32})">
	<summary>
 拡張DropDownListFor
 多言語化とエラー処理に対応しています。
 </summary>
	<typeparam name="TModel">モデル</typeparam>
	<typeparam name="TValue">プロパティ</typeparam>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="expression">対象プロパティを取得する式</param>
	<param name="selectList">リストボックス内容</param>
	<param name="optionLabel">基底の空の項目のテキスト。Nothingでも可。</param>
	<param name="disabled">True:入力不可</param>.
 <param name="cssClass">CSSクラス名</param>
	<param name="htmlAttributes">追加属性群</param>
	<param name="tabIndex">TAB順</param>
	<returns>HTML構文</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSDropDownCheckListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{SRS.Standards.MvcFramework.Core.MVC.SRSSelectListItem},System.String,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Nullable{System.Int32})">
	<summary>
 項目がチェックボックスのDropDownListFor
 (jQueryと連携して擬似的にドロップダウンに構成する)
 多言語化とエラー処理に対応しています。
 </summary>
	<typeparam name="TModel">モデル</typeparam>
	<typeparam name="TValue">プロパティ</typeparam>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="expression">対象プロパティを取得する式</param>
	<param name="selectList">リストボックス内容</param>
	<param name="optionLabel">基底の空の項目のテキスト。Nothingでも可。</param>
	<param name="disabled">True:入力不可</param>
	<param name="cssClass">CSSクラス名</param>
	<param name="htmlAttributes">追加属性群</param>
	<param name="enableAllControl">全選択、選択解除ボタンを有効にするかどうか。</param>
	<param name="tabIndex">TAB順</param>
	<returns>HTML構文</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSDropDownCheckListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Nullable{System.Int32})">
	<summary>
 項目がチェックボックスのDropDownListFor
 (jQueryと連携して擬似的にドロップダウンに構成する)
 多言語化とエラー処理に対応しています。
 </summary>
	<typeparam name="TModel">モデル</typeparam>
	<typeparam name="TValue">プロパティ</typeparam>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="expression">対象プロパティを取得する式</param>
	<param name="selectList">リストボックス内容</param>
	<param name="optionLabel">基底の空の項目のテキスト。Nothingでも可。</param>
	<param name="disabled">True:入力不可</param>
	<param name="cssClass">CSSクラス名</param>
	<param name="htmlAttributes">追加属性群</param>
	<param name="enableAllControl">全選択、選択解除ボタンを有効にするかどうか。</param>
	<param name="tabIndex">TAB順</param>
	<returns>HTML構文</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSRadioButtonFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int32})">
	<summary>
 拡張RadioButtonFor
 多言語化とエラー処理に対応しています。
 </summary>
	<typeparam name="TModel">モデル</typeparam>
	<typeparam name="TValue">プロパティ</typeparam>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="expression">対象プロパティを取得する式</param>
	<param name="value">フォーム送信時の値</param>
	<param name="disabled">True:入力不可</param>
	<param name="cssClass">CSSクラス名</param>
	<param name="htmlAttributes">追加属性群</param>
	<param name="tabIndex">TAB順</param>
	<returns>HTML構文</returns>
	<remarks>HTML.RadioButtonFor拡張</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSSelectRadioButtonFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int32})">
	<summary>
 拡張RadioButtonFor (一覧選択用)
 多言語化とエラー処理に対応しています。
 </summary>
	<typeparam name="TModel">モデル</typeparam>
	<typeparam name="TValue">プロパティ</typeparam>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="expression">対象プロパティを取得する式</param>
	<param name="value">フォーム送信時の値</param>
	<param name="disabled">True:入力不可</param>
	<param name="cssClass">CSSクラス名</param>
	<param name="htmlAttributes">追加属性群</param>
	<param name="tabIndex">TAB順</param>
	<returns>HTML構文</returns>
	<remarks>HTML.RadioButtonFor拡張</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSRadioButtonListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{SRS.Standards.MvcFramework.Core.MVC.SRSSelectListItem},System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int32})">
	<summary>
 拡張RadioButtonFor
 多言語化とエラー処理に対応しています。
 </summary>
	<typeparam name="TModel">モデル</typeparam>
	<typeparam name="TValue">プロパティ</typeparam>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="expression">対象プロパティを取得する式</param>
	<param name="selectList">ラジオボタン内容</param>
	<param name="disabled">True:入力不可</param>
	<param name="cssClass">CSSクラス名</param>
	<param name="htmlAttributes">追加属性群</param>
	<param name="tabIndex">TAB順</param>
	<returns>HTML構文</returns>
	<remarks>HTML.RadioButtonFor拡張</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSCheckBoxFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int32})">
	<summary>
 拡張CheckBoxFor
 エラー処理に対応しています。
 </summary>
	<typeparam name="TModel">モデル</typeparam>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="expression">対象プロパティを取得する式</param>
	<param name="disabled">True:入力不可</param>
	<param name="cssClass">CSSクラス名</param>
	<param name="htmlAttributes">追加属性群</param>
	<param name="tabIndex">TAB順</param>
	<returns>HTML構文</returns>
	<remarks>HTML.CheckBoxFor拡張</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSHidden(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
	<summary>
 拡張Hidden
 </summary>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="name">名前</param>
	<param name="value">値</param>
	<param name="htmlAttributes">追加属性群</param>
	<returns>HTML構文</returns>
	<remarks>HTML.Hidden拡張</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSHiddenOnShared(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
	<summary>
 拡張Hidden(共通ページ用)
 </summary>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="name">名前</param>
	<param name="value">値</param>
	<param name="htmlAttributes">追加属性群</param>
	<returns>HTML構文</returns>
	<remarks>HTML.Hidden拡張、共通ページに通常のHiddenを使用すると値が正しく出力されない場合
 (Modelが階層構造で同名のプロパティが存在する場合など)がある為こちらを使用</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSHiddenFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
	<summary>
 拡張HiddenFor
 </summary>
	<typeparam name="TModel">モデル</typeparam>
	<typeparam name="TValue">プロパティ</typeparam>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="expression">対象プロパティを取得する式</param>
	<param name="htmlAttributes">追加属性群</param>
	<returns>HTML構文</returns>
	<remarks>HTML.HiddenFor拡張</remarks>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
	<summary>
 拡張ActionLink
 多言語化に対応しています。
 </summary>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="linkText">画面表示文言(メッセージID)</param>
	<param name="actionName">アクション名</param>
	<param name="controllerName">コントローラ名</param>
	<param name="disabled">True:入力不可</param>
	<param name="cssClass">CSSクラス名</param>
	<param name="htmlAttributes">追加属性群</param>
	<returns>HTML構文</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int32},System.Globalization.CultureInfo)">
	<summary>
 Button(Inputタグ)を生成する
 多言語化に対応しています。
 </summary>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="id">ID</param>
	<param name="value">ボタン表示内容</param>
	<param name="disabled">True:入力不可</param>
	<param name="cssClass">CSSクラス名</param>
	<param name="htmlAttributes">追加属性群</param>
	<param name="tabIndex">TAB順</param>
	<param name="culture">多言語化する際の言語情報。</param>
	<returns>HTML構文</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSSubmitButton(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int32},System.Globalization.CultureInfo)">
	<summary>
 Submit(Inputタグ)を生成する
 多言語化に対応しています。
 </summary>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="id">ID</param>
	<param name="value">ボタン表示内容</param>
	<param name="disabled">True:入力不可</param>
	<param name="cssClass">CSSクラス名</param>
	<param name="htmlAttributes">追加属性群</param>
	<param name="tabIndex">TAB順</param>
	<param name="culture">多言語化する際の言語情報。</param>
	<returns>HTML構文</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSFileFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Int32,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int32})">
	<summary>
 File(Inputタグ)を生成する
 エラー処理に対応しています。
 </summary>
	<typeparam name="TModel">モデル</typeparam>
	<typeparam name="TValue">プロパティ</typeparam>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="expression">対象プロパティを取得する式</param>
	<param name="accept">ファイルタイプ</param>
	<param name="size">サイズ</param>
	<param name="disabled">True:入力不可</param>
	<param name="cssClass">CSSクラス名</param>
	<param name="htmlAttributes">追加属性群</param>
	<param name="tabIndex">TAB順</param>
	<returns>HTML構文</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.SRSTextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int32})">
	<summary>
 拡張TextTextAreaFor
 エラー処理に対応しています。
 </summary>
	<typeparam name="TModel">モデル</typeparam>
	<typeparam name="TValue">プロパティ</typeparam>
	<param name="helper">拡張先HTMLヘルパー</param>
	<param name="expression">対象プロパティを取得する式</param>
	<param name="maxLength">最大入力桁。SRSStringValidation属性で対象プロパティにMaxLengthが指定されている場合、その値が既定値になります。</param>
	<param name="disabled">True:入力不可</param>
	<param name="cssClass">CSSクラス名</param>
	<param name="htmlAttributes">追加属性群</param>
	<param name="tabIndex">TAB順</param>
	<returns>HTML構文</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.AddValidationError(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
	<summary>
 エラー情報をセットします。
 </summary>
	<param name="helper">HTMLヘルパー</param>
	<param name="memberName">プロパティ名</param>
	<param name="htmlAttributes">追加属性群</param>
	<returns>追加属性群</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper.GetMaxLength``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
	<summary>
 指定されたプロパティのSRSValidation属性から、MaxLength値を取得します。
 </summary>
	<typeparam name="TModel">基準となるモデルの型</typeparam>
	<typeparam name="TValue">プロパティの型</typeparam>
	<param name="modelProperty">プロパティ</param>
	<returns>DisplayName属性の値</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.MVC.SRSHtmlHelper">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 カスタムHTMLヘルパークラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 002, 2015-10-07, kmasuda/SRS, ラベル文字をエスケープせずに出力するよう変更
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.DataAccess.RowsCountModel.RowsCount">
	<summary>
 行数カウントを設定/取得
 </summary>
	<returns>行数</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.DataAccess.RowsCountModel">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 件数取得用モデルクラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.DbConnectionAttribute.#ctor">
	<summary>
 特定のオプションを指定せずに新しいインスタンスを初期化します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.DbConnectionAttribute.#ctor(System.String)">
	<summary>
 データベースの接続先キーを指定して新たしいインスタンスを初期化します。
 </summary>
	<param name="connectionStringsName">接続先キー</param>
</member><member name="P:SRS.Standards.MvcFramework.Core.Facade.DbConnectionAttribute.ConnectionStringsName">
	<summary>
 データベースの接続先を取得
 </summary>
	<returns>データベースの接続先キー値</returns>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.DbConnectionAttribute.Overlay(SRS.Standards.MvcFramework.Core.OME2.Framework.Interception.InterceptionOptionAttributeBase)">
	<summary>
 現在のインスタンスの各オプション値に指定された
 オプション値を上書きします。設定されていないオプション値は上書きされません。
 </summary>
	<param name="overlayAttr">上書きする設定内容。</param>
</member><member name="M:SRS.Standards.MvcFramework.Core.Facade.DbConnectionAttribute.GetEffective(System.Type,System.Reflection.MethodBase)">
	<summary>
 指定された型とメソッドに適用されているオプションの属性から、実際に有効になる
 オプション情報を取得します。
 </summary>
	<param name="type">オプション値を取得する対象の型。</param>
	<param name="method">オプション値を取得する対象のメソッド。</param>
	<returns>実際に有効となるオプション情報。</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Facade.DbConnectionAttribute">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 ファサードメソッドにおけるデータベース接続先情報を指定する属性
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="F:SRS.Standards.MvcFramework.Core.Facade.JudgeTransType.NotTransition">
	<summary>
 遷移なし（初期値）
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Facade.JudgeTransType.AnyRedirect">
	<summary>
 任意のリダイレクト (システム内)
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Facade.JudgeTransType.FileTransfer">
	<summary>
 ファイル転送
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Facade.JudgeTransType.LoginRedirect">
	<summary>
 ログインページへリダイレクト
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Facade.JudgeTransType.SecurityRedirect">
	<summary>
 業務権限ＮＧ用案内ページへリダイレクト
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Facade.JudgeTransType.RegulationRedirect">
	<summary>
 業務規制用案内ページへリダイレクト
 </summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.Facade.JudgeTransType.ReturnRedirect">
	<summary>
 指定されたページへの単純なリダイレクト
 </summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.Facade.JudgeTransType">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 Façadeからコントローラへ処理結果を通知する為の列挙型
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.TransferInformation.TransferData">
	<summary>
 業務間連携情報
 </summary>
	<returns>オブジェクトを返す</returns>
	<exception cref="T:SRS.Standards.MvcFramework.Core.Business.MvcException">不適切な型の情報が登録された場合に発生します。</exception>
</member><member name="P:SRS.Standards.MvcFramework.Core.Information.TransferInformation.DeleteRequestCount">
	<summary>
 自動的に削除されるまでのリクエスト数
 </summary>
	<returns>残リクエスト数</returns>
</member><member name="T:SRS.Standards.MvcFramework.Core.Information.TransferInformation">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 業務間連携情報格納クラス
 </summary>
	<author>nagatani/Minori</author>
	<Version>
 001, 2015-03-21, 新規作成
 </Version>
</member><member name="P:SRS.Standards.MvcFramework.Core.MVC.ActionSessionStateAttribute.Behavior">
	<summary>
 セッションの有効無効を指定します。
 </summary>
</member><member name="M:SRS.Standards.MvcFramework.Core.MVC.ActionSessionStateAttribute.#ctor(System.Web.SessionState.SessionStateBehavior)">
	<summary>
 コンストラクタ。
 </summary>
	<param name="behavior">セッションの有効無効。</param>
</member><member name="T:SRS.Standards.MvcFramework.Core.MVC.ActionSessionStateAttribute">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 アクションメソッド毎に、セッションの有効無効を切替えるための属性。
 </summary>
	<author>MASUDA Kazuya/SRS TS</author>
	<Version>
 001, 2017-07-04, 新規作成
 </Version>
</member><member name="F:SRS.Standards.MvcFramework.Core.MVC.CharacterType.Any">
	<summary>全ての文字種別</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.MVC.CharacterType.AlphaNumeric">
	<summary>半角英数字</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.MVC.CharacterType.Alphabet">
	<summary>半角英字</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.MVC.CharacterType.Numeric">
	<summary>半角数字</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.MVC.CharacterType.HalfWidth">
	<summary>半角文字</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.MVC.CharacterType.FullWidth">
	<summary>全角文字</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.MVC.CharacterType.HalfWidthKatakana">
	<summary>半角カナ</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.MVC.CharacterType.ASCII">
	<summary>ASCII文字(英数字+記号)</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.MVC.CharacterType.AlphaNumericKantakana">
	<summary>英数字+半角カナ)</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.MVC.CharacterType.ShiftJIS">
	<summary>Shift-JISの文字</summary>
</member><member name="F:SRS.Standards.MvcFramework.Core.MVC.CharacterType.Symbol">
	<summary>記号</summary>
</member><member name="T:SRS.Standards.MvcFramework.Core.MVC.CharacterType">
	<userName>住友ゴム工業株式会社</userName>
	<sysName>ＡＰ基盤構築</sysName>
	<subSysName>MVCフレームワーク</subSysName>
	<summary>
 文字種別を表す列挙体。
 </summary>
	<author>MASUDA Kazuya/SRS</author>
	<Version>
 001, 2015-09-09, 新規作成
 </Version>
</member>
</members>
</doc>